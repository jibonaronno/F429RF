
F429RF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065e8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08006798  08006798  00016798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800684c  0800684c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  0800684c  0800684c  0001684c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006854  08006854  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006854  08006854  00016854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006858  08006858  00016858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800685c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          00001c70  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001cdc  20001cdc  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000100cb  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002444  00000000  00000000  000301aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e90  00000000  00000000  000325f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b69  00000000  00000000  00033480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025572  00000000  00000000  00033fe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00011a24  00000000  00000000  0005955b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e8096  00000000  00000000  0006af7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000438c  00000000  00000000  00153018  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  001573a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006780 	.word	0x08006780

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	08006780 	.word	0x08006780

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2f>:
 8000a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a44:	bf24      	itt	cs
 8000a46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a4e:	d90d      	bls.n	8000a6c <__aeabi_d2f+0x30>
 8000a50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a64:	bf08      	it	eq
 8000a66:	f020 0001 	biceq.w	r0, r0, #1
 8000a6a:	4770      	bx	lr
 8000a6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a70:	d121      	bne.n	8000ab6 <__aeabi_d2f+0x7a>
 8000a72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a76:	bfbc      	itt	lt
 8000a78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a7c:	4770      	bxlt	lr
 8000a7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a86:	f1c2 0218 	rsb	r2, r2, #24
 8000a8a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a92:	fa20 f002 	lsr.w	r0, r0, r2
 8000a96:	bf18      	it	ne
 8000a98:	f040 0001 	orrne.w	r0, r0, #1
 8000a9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa8:	ea40 000c 	orr.w	r0, r0, ip
 8000aac:	fa23 f302 	lsr.w	r3, r3, r2
 8000ab0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab4:	e7cc      	b.n	8000a50 <__aeabi_d2f+0x14>
 8000ab6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aba:	d107      	bne.n	8000acc <__aeabi_d2f+0x90>
 8000abc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ac0:	bf1e      	ittt	ne
 8000ac2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ac6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aca:	4770      	bxne	lr
 8000acc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ad0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ad4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_uldivmod>:
 8000adc:	b953      	cbnz	r3, 8000af4 <__aeabi_uldivmod+0x18>
 8000ade:	b94a      	cbnz	r2, 8000af4 <__aeabi_uldivmod+0x18>
 8000ae0:	2900      	cmp	r1, #0
 8000ae2:	bf08      	it	eq
 8000ae4:	2800      	cmpeq	r0, #0
 8000ae6:	bf1c      	itt	ne
 8000ae8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aec:	f04f 30ff 	movne.w	r0, #4294967295
 8000af0:	f000 b970 	b.w	8000dd4 <__aeabi_idiv0>
 8000af4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000af8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000afc:	f000 f806 	bl	8000b0c <__udivmoddi4>
 8000b00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b08:	b004      	add	sp, #16
 8000b0a:	4770      	bx	lr

08000b0c <__udivmoddi4>:
 8000b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b10:	9e08      	ldr	r6, [sp, #32]
 8000b12:	460d      	mov	r5, r1
 8000b14:	4604      	mov	r4, r0
 8000b16:	460f      	mov	r7, r1
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d14a      	bne.n	8000bb2 <__udivmoddi4+0xa6>
 8000b1c:	428a      	cmp	r2, r1
 8000b1e:	4694      	mov	ip, r2
 8000b20:	d965      	bls.n	8000bee <__udivmoddi4+0xe2>
 8000b22:	fab2 f382 	clz	r3, r2
 8000b26:	b143      	cbz	r3, 8000b3a <__udivmoddi4+0x2e>
 8000b28:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b2c:	f1c3 0220 	rsb	r2, r3, #32
 8000b30:	409f      	lsls	r7, r3
 8000b32:	fa20 f202 	lsr.w	r2, r0, r2
 8000b36:	4317      	orrs	r7, r2
 8000b38:	409c      	lsls	r4, r3
 8000b3a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b3e:	fa1f f58c 	uxth.w	r5, ip
 8000b42:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b46:	0c22      	lsrs	r2, r4, #16
 8000b48:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b4c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b50:	fb01 f005 	mul.w	r0, r1, r5
 8000b54:	4290      	cmp	r0, r2
 8000b56:	d90a      	bls.n	8000b6e <__udivmoddi4+0x62>
 8000b58:	eb1c 0202 	adds.w	r2, ip, r2
 8000b5c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b60:	f080 811c 	bcs.w	8000d9c <__udivmoddi4+0x290>
 8000b64:	4290      	cmp	r0, r2
 8000b66:	f240 8119 	bls.w	8000d9c <__udivmoddi4+0x290>
 8000b6a:	3902      	subs	r1, #2
 8000b6c:	4462      	add	r2, ip
 8000b6e:	1a12      	subs	r2, r2, r0
 8000b70:	b2a4      	uxth	r4, r4
 8000b72:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b76:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b7a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b7e:	fb00 f505 	mul.w	r5, r0, r5
 8000b82:	42a5      	cmp	r5, r4
 8000b84:	d90a      	bls.n	8000b9c <__udivmoddi4+0x90>
 8000b86:	eb1c 0404 	adds.w	r4, ip, r4
 8000b8a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b8e:	f080 8107 	bcs.w	8000da0 <__udivmoddi4+0x294>
 8000b92:	42a5      	cmp	r5, r4
 8000b94:	f240 8104 	bls.w	8000da0 <__udivmoddi4+0x294>
 8000b98:	4464      	add	r4, ip
 8000b9a:	3802      	subs	r0, #2
 8000b9c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ba0:	1b64      	subs	r4, r4, r5
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	b11e      	cbz	r6, 8000bae <__udivmoddi4+0xa2>
 8000ba6:	40dc      	lsrs	r4, r3
 8000ba8:	2300      	movs	r3, #0
 8000baa:	e9c6 4300 	strd	r4, r3, [r6]
 8000bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb2:	428b      	cmp	r3, r1
 8000bb4:	d908      	bls.n	8000bc8 <__udivmoddi4+0xbc>
 8000bb6:	2e00      	cmp	r6, #0
 8000bb8:	f000 80ed 	beq.w	8000d96 <__udivmoddi4+0x28a>
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	e9c6 0500 	strd	r0, r5, [r6]
 8000bc2:	4608      	mov	r0, r1
 8000bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc8:	fab3 f183 	clz	r1, r3
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	d149      	bne.n	8000c64 <__udivmoddi4+0x158>
 8000bd0:	42ab      	cmp	r3, r5
 8000bd2:	d302      	bcc.n	8000bda <__udivmoddi4+0xce>
 8000bd4:	4282      	cmp	r2, r0
 8000bd6:	f200 80f8 	bhi.w	8000dca <__udivmoddi4+0x2be>
 8000bda:	1a84      	subs	r4, r0, r2
 8000bdc:	eb65 0203 	sbc.w	r2, r5, r3
 8000be0:	2001      	movs	r0, #1
 8000be2:	4617      	mov	r7, r2
 8000be4:	2e00      	cmp	r6, #0
 8000be6:	d0e2      	beq.n	8000bae <__udivmoddi4+0xa2>
 8000be8:	e9c6 4700 	strd	r4, r7, [r6]
 8000bec:	e7df      	b.n	8000bae <__udivmoddi4+0xa2>
 8000bee:	b902      	cbnz	r2, 8000bf2 <__udivmoddi4+0xe6>
 8000bf0:	deff      	udf	#255	; 0xff
 8000bf2:	fab2 f382 	clz	r3, r2
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	f040 8090 	bne.w	8000d1c <__udivmoddi4+0x210>
 8000bfc:	1a8a      	subs	r2, r1, r2
 8000bfe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c02:	fa1f fe8c 	uxth.w	lr, ip
 8000c06:	2101      	movs	r1, #1
 8000c08:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c0c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c10:	0c22      	lsrs	r2, r4, #16
 8000c12:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c16:	fb0e f005 	mul.w	r0, lr, r5
 8000c1a:	4290      	cmp	r0, r2
 8000c1c:	d908      	bls.n	8000c30 <__udivmoddi4+0x124>
 8000c1e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c22:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c26:	d202      	bcs.n	8000c2e <__udivmoddi4+0x122>
 8000c28:	4290      	cmp	r0, r2
 8000c2a:	f200 80cb 	bhi.w	8000dc4 <__udivmoddi4+0x2b8>
 8000c2e:	4645      	mov	r5, r8
 8000c30:	1a12      	subs	r2, r2, r0
 8000c32:	b2a4      	uxth	r4, r4
 8000c34:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c38:	fb07 2210 	mls	r2, r7, r0, r2
 8000c3c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c40:	fb0e fe00 	mul.w	lr, lr, r0
 8000c44:	45a6      	cmp	lr, r4
 8000c46:	d908      	bls.n	8000c5a <__udivmoddi4+0x14e>
 8000c48:	eb1c 0404 	adds.w	r4, ip, r4
 8000c4c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c50:	d202      	bcs.n	8000c58 <__udivmoddi4+0x14c>
 8000c52:	45a6      	cmp	lr, r4
 8000c54:	f200 80bb 	bhi.w	8000dce <__udivmoddi4+0x2c2>
 8000c58:	4610      	mov	r0, r2
 8000c5a:	eba4 040e 	sub.w	r4, r4, lr
 8000c5e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c62:	e79f      	b.n	8000ba4 <__udivmoddi4+0x98>
 8000c64:	f1c1 0720 	rsb	r7, r1, #32
 8000c68:	408b      	lsls	r3, r1
 8000c6a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c6e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c72:	fa05 f401 	lsl.w	r4, r5, r1
 8000c76:	fa20 f307 	lsr.w	r3, r0, r7
 8000c7a:	40fd      	lsrs	r5, r7
 8000c7c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c80:	4323      	orrs	r3, r4
 8000c82:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c86:	fa1f fe8c 	uxth.w	lr, ip
 8000c8a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c8e:	0c1c      	lsrs	r4, r3, #16
 8000c90:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c94:	fb08 f50e 	mul.w	r5, r8, lr
 8000c98:	42a5      	cmp	r5, r4
 8000c9a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c9e:	fa00 f001 	lsl.w	r0, r0, r1
 8000ca2:	d90b      	bls.n	8000cbc <__udivmoddi4+0x1b0>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cac:	f080 8088 	bcs.w	8000dc0 <__udivmoddi4+0x2b4>
 8000cb0:	42a5      	cmp	r5, r4
 8000cb2:	f240 8085 	bls.w	8000dc0 <__udivmoddi4+0x2b4>
 8000cb6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cba:	4464      	add	r4, ip
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	b29d      	uxth	r5, r3
 8000cc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000cc8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ccc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000cd0:	45a6      	cmp	lr, r4
 8000cd2:	d908      	bls.n	8000ce6 <__udivmoddi4+0x1da>
 8000cd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000cdc:	d26c      	bcs.n	8000db8 <__udivmoddi4+0x2ac>
 8000cde:	45a6      	cmp	lr, r4
 8000ce0:	d96a      	bls.n	8000db8 <__udivmoddi4+0x2ac>
 8000ce2:	3b02      	subs	r3, #2
 8000ce4:	4464      	add	r4, ip
 8000ce6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cea:	fba3 9502 	umull	r9, r5, r3, r2
 8000cee:	eba4 040e 	sub.w	r4, r4, lr
 8000cf2:	42ac      	cmp	r4, r5
 8000cf4:	46c8      	mov	r8, r9
 8000cf6:	46ae      	mov	lr, r5
 8000cf8:	d356      	bcc.n	8000da8 <__udivmoddi4+0x29c>
 8000cfa:	d053      	beq.n	8000da4 <__udivmoddi4+0x298>
 8000cfc:	b156      	cbz	r6, 8000d14 <__udivmoddi4+0x208>
 8000cfe:	ebb0 0208 	subs.w	r2, r0, r8
 8000d02:	eb64 040e 	sbc.w	r4, r4, lr
 8000d06:	fa04 f707 	lsl.w	r7, r4, r7
 8000d0a:	40ca      	lsrs	r2, r1
 8000d0c:	40cc      	lsrs	r4, r1
 8000d0e:	4317      	orrs	r7, r2
 8000d10:	e9c6 7400 	strd	r7, r4, [r6]
 8000d14:	4618      	mov	r0, r3
 8000d16:	2100      	movs	r1, #0
 8000d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1c:	f1c3 0120 	rsb	r1, r3, #32
 8000d20:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d24:	fa20 f201 	lsr.w	r2, r0, r1
 8000d28:	fa25 f101 	lsr.w	r1, r5, r1
 8000d2c:	409d      	lsls	r5, r3
 8000d2e:	432a      	orrs	r2, r5
 8000d30:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d34:	fa1f fe8c 	uxth.w	lr, ip
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d40:	0c11      	lsrs	r1, r2, #16
 8000d42:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d46:	fb00 f50e 	mul.w	r5, r0, lr
 8000d4a:	428d      	cmp	r5, r1
 8000d4c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0x258>
 8000d52:	eb1c 0101 	adds.w	r1, ip, r1
 8000d56:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d5a:	d22f      	bcs.n	8000dbc <__udivmoddi4+0x2b0>
 8000d5c:	428d      	cmp	r5, r1
 8000d5e:	d92d      	bls.n	8000dbc <__udivmoddi4+0x2b0>
 8000d60:	3802      	subs	r0, #2
 8000d62:	4461      	add	r1, ip
 8000d64:	1b49      	subs	r1, r1, r5
 8000d66:	b292      	uxth	r2, r2
 8000d68:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d6c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d74:	fb05 f10e 	mul.w	r1, r5, lr
 8000d78:	4291      	cmp	r1, r2
 8000d7a:	d908      	bls.n	8000d8e <__udivmoddi4+0x282>
 8000d7c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d80:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d84:	d216      	bcs.n	8000db4 <__udivmoddi4+0x2a8>
 8000d86:	4291      	cmp	r1, r2
 8000d88:	d914      	bls.n	8000db4 <__udivmoddi4+0x2a8>
 8000d8a:	3d02      	subs	r5, #2
 8000d8c:	4462      	add	r2, ip
 8000d8e:	1a52      	subs	r2, r2, r1
 8000d90:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d94:	e738      	b.n	8000c08 <__udivmoddi4+0xfc>
 8000d96:	4631      	mov	r1, r6
 8000d98:	4630      	mov	r0, r6
 8000d9a:	e708      	b.n	8000bae <__udivmoddi4+0xa2>
 8000d9c:	4639      	mov	r1, r7
 8000d9e:	e6e6      	b.n	8000b6e <__udivmoddi4+0x62>
 8000da0:	4610      	mov	r0, r2
 8000da2:	e6fb      	b.n	8000b9c <__udivmoddi4+0x90>
 8000da4:	4548      	cmp	r0, r9
 8000da6:	d2a9      	bcs.n	8000cfc <__udivmoddi4+0x1f0>
 8000da8:	ebb9 0802 	subs.w	r8, r9, r2
 8000dac:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000db0:	3b01      	subs	r3, #1
 8000db2:	e7a3      	b.n	8000cfc <__udivmoddi4+0x1f0>
 8000db4:	4645      	mov	r5, r8
 8000db6:	e7ea      	b.n	8000d8e <__udivmoddi4+0x282>
 8000db8:	462b      	mov	r3, r5
 8000dba:	e794      	b.n	8000ce6 <__udivmoddi4+0x1da>
 8000dbc:	4640      	mov	r0, r8
 8000dbe:	e7d1      	b.n	8000d64 <__udivmoddi4+0x258>
 8000dc0:	46d0      	mov	r8, sl
 8000dc2:	e77b      	b.n	8000cbc <__udivmoddi4+0x1b0>
 8000dc4:	3d02      	subs	r5, #2
 8000dc6:	4462      	add	r2, ip
 8000dc8:	e732      	b.n	8000c30 <__udivmoddi4+0x124>
 8000dca:	4608      	mov	r0, r1
 8000dcc:	e70a      	b.n	8000be4 <__udivmoddi4+0xd8>
 8000dce:	4464      	add	r4, ip
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	e742      	b.n	8000c5a <__udivmoddi4+0x14e>

08000dd4 <__aeabi_idiv0>:
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop

08000dd8 <myprintf>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void myprintf(const char *fmt, ...) {
 8000dd8:	b40f      	push	{r0, r1, r2, r3}
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b082      	sub	sp, #8
 8000dde:	af00      	add	r7, sp, #0
  static char buffer[100];
  va_list args;
  va_start(args, fmt);
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	2164      	movs	r1, #100	; 0x64
 8000dec:	480b      	ldr	r0, [pc, #44]	; (8000e1c <myprintf+0x44>)
 8000dee:	f005 f835 	bl	8005e5c <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 8000df2:	480a      	ldr	r0, [pc, #40]	; (8000e1c <myprintf+0x44>)
 8000df4:	f7ff f9fc 	bl	80001f0 <strlen>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*)buffer, len, -1);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	b29a      	uxth	r2, r3
 8000e00:	f04f 33ff 	mov.w	r3, #4294967295
 8000e04:	4905      	ldr	r1, [pc, #20]	; (8000e1c <myprintf+0x44>)
 8000e06:	4806      	ldr	r0, [pc, #24]	; (8000e20 <myprintf+0x48>)
 8000e08:	f004 f800 	bl	8004e0c <HAL_UART_Transmit>

}
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e16:	b004      	add	sp, #16
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	20001b28 	.word	0x20001b28
 8000e20:	20000178 	.word	0x20000178

08000e24 <FindPeak>:
volatile int gidxA = 0;

volatile uint32_t relative_sawtooth_voltage = 0;

int FindPeak(uint32_t *sig)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
	int fidxA = 0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60fb      	str	r3, [r7, #12]

	if((sig[0] < sig[1]) && (sig[2] < sig[1]))
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3304      	adds	r3, #4
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d209      	bcs.n	8000e52 <FindPeak+0x2e>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	3308      	adds	r3, #8
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	3304      	adds	r3, #4
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d201      	bcs.n	8000e52 <FindPeak+0x2e>
	{
		return 1;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e000      	b.n	8000e54 <FindPeak+0x30>
	}
	else
	{
		return 0;
 8000e52:	2300      	movs	r3, #0
	}
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3714      	adds	r7, #20
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <kalman_filter>:
static float P_k_k1 = 0.5;
static float kalman_adc_old=0;
static int kalman_adc_int = 0;

unsigned long kalman_filter(unsigned long ADC_Value)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b087      	sub	sp, #28
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
    float Z_k;


    float kalman_adc;

    Z_k = ADC_Value;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	ee07 3a90 	vmov	s15, r3
 8000e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e72:	edc7 7a05 	vstr	s15, [r7, #20]
    x_k1_k1 = kalman_adc_old;
 8000e76:	4b32      	ldr	r3, [pc, #200]	; (8000f40 <kalman_filter+0xe0>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	613b      	str	r3, [r7, #16]

    x_k_k1 = x_k1_k1;
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	60fb      	str	r3, [r7, #12]
    P_k_k1 = P_k1_k1 + Q;
 8000e80:	4b30      	ldr	r3, [pc, #192]	; (8000f44 <kalman_filter+0xe4>)
 8000e82:	ed93 7a00 	vldr	s14, [r3]
 8000e86:	4b30      	ldr	r3, [pc, #192]	; (8000f48 <kalman_filter+0xe8>)
 8000e88:	edd3 7a00 	vldr	s15, [r3]
 8000e8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e90:	4b2e      	ldr	r3, [pc, #184]	; (8000f4c <kalman_filter+0xec>)
 8000e92:	edc3 7a00 	vstr	s15, [r3]

    Kg = P_k_k1/(P_k_k1 + R);
 8000e96:	4b2d      	ldr	r3, [pc, #180]	; (8000f4c <kalman_filter+0xec>)
 8000e98:	edd3 6a00 	vldr	s13, [r3]
 8000e9c:	4b2b      	ldr	r3, [pc, #172]	; (8000f4c <kalman_filter+0xec>)
 8000e9e:	ed93 7a00 	vldr	s14, [r3]
 8000ea2:	4b2b      	ldr	r3, [pc, #172]	; (8000f50 <kalman_filter+0xf0>)
 8000ea4:	edd3 7a00 	vldr	s15, [r3]
 8000ea8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000eac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000eb0:	4b28      	ldr	r3, [pc, #160]	; (8000f54 <kalman_filter+0xf4>)
 8000eb2:	edc3 7a00 	vstr	s15, [r3]

    kalman_adc = x_k_k1 + Kg * (Z_k - kalman_adc_old);
 8000eb6:	4b22      	ldr	r3, [pc, #136]	; (8000f40 <kalman_filter+0xe0>)
 8000eb8:	edd3 7a00 	vldr	s15, [r3]
 8000ebc:	ed97 7a05 	vldr	s14, [r7, #20]
 8000ec0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ec4:	4b23      	ldr	r3, [pc, #140]	; (8000f54 <kalman_filter+0xf4>)
 8000ec6:	edd3 7a00 	vldr	s15, [r3]
 8000eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ece:	ed97 7a03 	vldr	s14, [r7, #12]
 8000ed2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ed6:	edc7 7a02 	vstr	s15, [r7, #8]
    P_k1_k1 = (1 - Kg)*P_k_k1;
 8000eda:	4b1e      	ldr	r3, [pc, #120]	; (8000f54 <kalman_filter+0xf4>)
 8000edc:	edd3 7a00 	vldr	s15, [r3]
 8000ee0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000ee4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ee8:	4b18      	ldr	r3, [pc, #96]	; (8000f4c <kalman_filter+0xec>)
 8000eea:	edd3 7a00 	vldr	s15, [r3]
 8000eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ef2:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <kalman_filter+0xe4>)
 8000ef4:	edc3 7a00 	vstr	s15, [r3]
    P_k_k1 = P_k1_k1;
 8000ef8:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <kalman_filter+0xe4>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a13      	ldr	r2, [pc, #76]	; (8000f4c <kalman_filter+0xec>)
 8000efe:	6013      	str	r3, [r2, #0]

    ADC_OLD_Value = ADC_Value;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	ee07 3a90 	vmov	s15, r3
 8000f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f0a:	4b13      	ldr	r3, [pc, #76]	; (8000f58 <kalman_filter+0xf8>)
 8000f0c:	edc3 7a00 	vstr	s15, [r3]
    kalman_adc_old = kalman_adc;
 8000f10:	4a0b      	ldr	r2, [pc, #44]	; (8000f40 <kalman_filter+0xe0>)
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	6013      	str	r3, [r2, #0]
    kalman_adc_int = (int)kalman_adc;
 8000f16:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f1e:	ee17 2a90 	vmov	r2, s15
 8000f22:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <kalman_filter+0xfc>)
 8000f24:	601a      	str	r2, [r3, #0]
    return kalman_adc;
 8000f26:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f2e:	ee17 3a90 	vmov	r3, s15
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	371c      	adds	r7, #28
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	20001b04 	.word	0x20001b04
 8000f44:	20001afc 	.word	0x20001afc
 8000f48:	20000004 	.word	0x20000004
 8000f4c:	2000000c 	.word	0x2000000c
 8000f50:	20000008 	.word	0x20000008
 8000f54:	20001b00 	.word	0x20001b00
 8000f58:	20001af8 	.word	0x20001af8
 8000f5c:	20001b08 	.word	0x20001b08

08000f60 <HAL_ADC_ConvCpltCallback>:

	return (((max - min)/2) + min);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	adcConversionComplete = 1;
 8000f68:	4b70      	ldr	r3, [pc, #448]	; (800112c <HAL_ADC_ConvCpltCallback+0x1cc>)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	601a      	str	r2, [r3, #0]
	ad1 = adraw[0]; // HAL_ADC_GetValue(&hadc1);
 8000f6e:	4b70      	ldr	r3, [pc, #448]	; (8001130 <HAL_ADC_ConvCpltCallback+0x1d0>)
 8000f70:	881b      	ldrh	r3, [r3, #0]
 8000f72:	461a      	mov	r2, r3
 8000f74:	4b6f      	ldr	r3, [pc, #444]	; (8001134 <HAL_ADC_ConvCpltCallback+0x1d4>)
 8000f76:	601a      	str	r2, [r3, #0]
	ad2 = adraw[1]; // HAL_ADC_GetValue(&hadc1);
 8000f78:	4b6d      	ldr	r3, [pc, #436]	; (8001130 <HAL_ADC_ConvCpltCallback+0x1d0>)
 8000f7a:	885b      	ldrh	r3, [r3, #2]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	4b6e      	ldr	r3, [pc, #440]	; (8001138 <HAL_ADC_ConvCpltCallback+0x1d8>)
 8000f80:	601a      	str	r2, [r3, #0]
	conv_rate++;
 8000f82:	4b6e      	ldr	r3, [pc, #440]	; (800113c <HAL_ADC_ConvCpltCallback+0x1dc>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	3301      	adds	r3, #1
 8000f88:	4a6c      	ldr	r2, [pc, #432]	; (800113c <HAL_ADC_ConvCpltCallback+0x1dc>)
 8000f8a:	6013      	str	r3, [r2, #0]

	//insert_new_value(sawtooth_buf, (int32_t)ad1);
	//insert_new_value(signal_buf, (int32_t)ad2);

	if(rx_flagA == 0)
 8000f8c:	4b6c      	ldr	r3, [pc, #432]	; (8001140 <HAL_ADC_ConvCpltCallback+0x1e0>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	f040 8178 	bne.w	8001286 <HAL_ADC_ConvCpltCallback+0x326>
	{
		if(gidxB == 200)
 8000f96:	4b6b      	ldr	r3, [pc, #428]	; (8001144 <HAL_ADC_ConvCpltCallback+0x1e4>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2bc8      	cmp	r3, #200	; 0xc8
 8000f9c:	d10d      	bne.n	8000fba <HAL_ADC_ConvCpltCallback+0x5a>
		{
			if(signal_buffer_in_queue == 1)
 8000f9e:	4b6a      	ldr	r3, [pc, #424]	; (8001148 <HAL_ADC_ConvCpltCallback+0x1e8>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d103      	bne.n	8000fae <HAL_ADC_ConvCpltCallback+0x4e>
			{
				signal_buffer_in_queue = 2;
 8000fa6:	4b68      	ldr	r3, [pc, #416]	; (8001148 <HAL_ADC_ConvCpltCallback+0x1e8>)
 8000fa8:	2202      	movs	r2, #2
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	e002      	b.n	8000fb4 <HAL_ADC_ConvCpltCallback+0x54>
			}
			else
			{
				signal_buffer_in_queue = 1;
 8000fae:	4b66      	ldr	r3, [pc, #408]	; (8001148 <HAL_ADC_ConvCpltCallback+0x1e8>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	601a      	str	r2, [r3, #0]
			}
			gidxB = 0;
 8000fb4:	4b63      	ldr	r3, [pc, #396]	; (8001144 <HAL_ADC_ConvCpltCallback+0x1e4>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
		}

		if(gidxB > 5)
 8000fba:	4b62      	ldr	r3, [pc, #392]	; (8001144 <HAL_ADC_ConvCpltCallback+0x1e4>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2b05      	cmp	r3, #5
 8000fc0:	dd1f      	ble.n	8001002 <HAL_ADC_ConvCpltCallback+0xa2>
		{
			if(gmaxA < kalman_buf1[gidxB])
 8000fc2:	4b60      	ldr	r3, [pc, #384]	; (8001144 <HAL_ADC_ConvCpltCallback+0x1e4>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a61      	ldr	r2, [pc, #388]	; (800114c <HAL_ADC_ConvCpltCallback+0x1ec>)
 8000fc8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000fcc:	4b60      	ldr	r3, [pc, #384]	; (8001150 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	dd06      	ble.n	8000fe2 <HAL_ADC_ConvCpltCallback+0x82>
			{
				gmaxA = kalman_buf1[gidxB];
 8000fd4:	4b5b      	ldr	r3, [pc, #364]	; (8001144 <HAL_ADC_ConvCpltCallback+0x1e4>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a5c      	ldr	r2, [pc, #368]	; (800114c <HAL_ADC_ConvCpltCallback+0x1ec>)
 8000fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fde:	4a5c      	ldr	r2, [pc, #368]	; (8001150 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8000fe0:	6013      	str	r3, [r2, #0]
			}

			if(gminA > kalman_buf1[gidxB])
 8000fe2:	4b58      	ldr	r3, [pc, #352]	; (8001144 <HAL_ADC_ConvCpltCallback+0x1e4>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a59      	ldr	r2, [pc, #356]	; (800114c <HAL_ADC_ConvCpltCallback+0x1ec>)
 8000fe8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000fec:	4b59      	ldr	r3, [pc, #356]	; (8001154 <HAL_ADC_ConvCpltCallback+0x1f4>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	da06      	bge.n	8001002 <HAL_ADC_ConvCpltCallback+0xa2>
			{
				gminA = kalman_buf1[gidxB];
 8000ff4:	4b53      	ldr	r3, [pc, #332]	; (8001144 <HAL_ADC_ConvCpltCallback+0x1e4>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a54      	ldr	r2, [pc, #336]	; (800114c <HAL_ADC_ConvCpltCallback+0x1ec>)
 8000ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ffe:	4a55      	ldr	r2, [pc, #340]	; (8001154 <HAL_ADC_ConvCpltCallback+0x1f4>)
 8001000:	6013      	str	r3, [r2, #0]
			}
		}

		if(gidxB == 195)
 8001002:	4b50      	ldr	r3, [pc, #320]	; (8001144 <HAL_ADC_ConvCpltCallback+0x1e4>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2bc3      	cmp	r3, #195	; 0xc3
 8001008:	d10d      	bne.n	8001026 <HAL_ADC_ConvCpltCallback+0xc6>
		{
			midlineA = (((gmaxA - gminA)/2) + gminA);
 800100a:	4b51      	ldr	r3, [pc, #324]	; (8001150 <HAL_ADC_ConvCpltCallback+0x1f0>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	4b51      	ldr	r3, [pc, #324]	; (8001154 <HAL_ADC_ConvCpltCallback+0x1f4>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	0fda      	lsrs	r2, r3, #31
 8001016:	4413      	add	r3, r2
 8001018:	105b      	asrs	r3, r3, #1
 800101a:	461a      	mov	r2, r3
 800101c:	4b4d      	ldr	r3, [pc, #308]	; (8001154 <HAL_ADC_ConvCpltCallback+0x1f4>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4413      	add	r3, r2
 8001022:	4a4d      	ldr	r2, [pc, #308]	; (8001158 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8001024:	6013      	str	r3, [r2, #0]
		}

		if(signal_buffer_in_queue == 1)
 8001026:	4b48      	ldr	r3, [pc, #288]	; (8001148 <HAL_ADC_ConvCpltCallback+0x1e8>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2b01      	cmp	r3, #1
 800102c:	f040 80a0 	bne.w	8001170 <HAL_ADC_ConvCpltCallback+0x210>
		{
			signal_buf1[gidxB] = ad1;
 8001030:	4b40      	ldr	r3, [pc, #256]	; (8001134 <HAL_ADC_ConvCpltCallback+0x1d4>)
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	4b43      	ldr	r3, [pc, #268]	; (8001144 <HAL_ADC_ConvCpltCallback+0x1e4>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4611      	mov	r1, r2
 800103a:	4a48      	ldr	r2, [pc, #288]	; (800115c <HAL_ADC_ConvCpltCallback+0x1fc>)
 800103c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			sawtooth_buf1[gidxB] = ad2;
 8001040:	4b3d      	ldr	r3, [pc, #244]	; (8001138 <HAL_ADC_ConvCpltCallback+0x1d8>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4b3f      	ldr	r3, [pc, #252]	; (8001144 <HAL_ADC_ConvCpltCallback+0x1e4>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4611      	mov	r1, r2
 800104a:	4a45      	ldr	r2, [pc, #276]	; (8001160 <HAL_ADC_ConvCpltCallback+0x200>)
 800104c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			kalman_buf1[gidxB] = kalman_filter(signal_buf1[gidxB]);
 8001050:	4b3c      	ldr	r3, [pc, #240]	; (8001144 <HAL_ADC_ConvCpltCallback+0x1e4>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a41      	ldr	r2, [pc, #260]	; (800115c <HAL_ADC_ConvCpltCallback+0x1fc>)
 8001056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff ff00 	bl	8000e60 <kalman_filter>
 8001060:	4602      	mov	r2, r0
 8001062:	4b38      	ldr	r3, [pc, #224]	; (8001144 <HAL_ADC_ConvCpltCallback+0x1e4>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4611      	mov	r1, r2
 8001068:	4a38      	ldr	r2, [pc, #224]	; (800114c <HAL_ADC_ConvCpltCallback+0x1ec>)
 800106a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

			if(gidxB==0)
 800106e:	4b35      	ldr	r3, [pc, #212]	; (8001144 <HAL_ADC_ConvCpltCallback+0x1e4>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d107      	bne.n	8001086 <HAL_ADC_ConvCpltCallback+0x126>
			{
				gminA = kalman_buf1[0];
 8001076:	4b35      	ldr	r3, [pc, #212]	; (800114c <HAL_ADC_ConvCpltCallback+0x1ec>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a36      	ldr	r2, [pc, #216]	; (8001154 <HAL_ADC_ConvCpltCallback+0x1f4>)
 800107c:	6013      	str	r3, [r2, #0]
				gmaxA = kalman_buf1[0];
 800107e:	4b33      	ldr	r3, [pc, #204]	; (800114c <HAL_ADC_ConvCpltCallback+0x1ec>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a33      	ldr	r2, [pc, #204]	; (8001150 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8001084:	6013      	str	r3, [r2, #0]
			}

			if((gidxB >= 5) && (gidxB < 190))
 8001086:	4b2f      	ldr	r3, [pc, #188]	; (8001144 <HAL_ADC_ConvCpltCallback+0x1e4>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2b04      	cmp	r3, #4
 800108c:	dd46      	ble.n	800111c <HAL_ADC_ConvCpltCallback+0x1bc>
 800108e:	4b2d      	ldr	r3, [pc, #180]	; (8001144 <HAL_ADC_ConvCpltCallback+0x1e4>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2bbd      	cmp	r3, #189	; 0xbd
 8001094:	dc42      	bgt.n	800111c <HAL_ADC_ConvCpltCallback+0x1bc>
			{

				if(FindPeak(&kalman_buf1[gidxB-3]) && (kalman_buf1[gidxB-3] > midlineA))
 8001096:	4b2b      	ldr	r3, [pc, #172]	; (8001144 <HAL_ADC_ConvCpltCallback+0x1e4>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	3b03      	subs	r3, #3
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	4a2b      	ldr	r2, [pc, #172]	; (800114c <HAL_ADC_ConvCpltCallback+0x1ec>)
 80010a0:	4413      	add	r3, r2
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff febe 	bl	8000e24 <FindPeak>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d02d      	beq.n	800110a <HAL_ADC_ConvCpltCallback+0x1aa>
 80010ae:	4b25      	ldr	r3, [pc, #148]	; (8001144 <HAL_ADC_ConvCpltCallback+0x1e4>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	3b03      	subs	r3, #3
 80010b4:	4a25      	ldr	r2, [pc, #148]	; (800114c <HAL_ADC_ConvCpltCallback+0x1ec>)
 80010b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010ba:	4b27      	ldr	r3, [pc, #156]	; (8001158 <HAL_ADC_ConvCpltCallback+0x1f8>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	429a      	cmp	r2, r3
 80010c0:	dd23      	ble.n	800110a <HAL_ADC_ConvCpltCallback+0x1aa>
				{
					if(dripOff == 0)
 80010c2:	4b28      	ldr	r3, [pc, #160]	; (8001164 <HAL_ADC_ConvCpltCallback+0x204>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d117      	bne.n	80010fa <HAL_ADC_ConvCpltCallback+0x19a>
					{
						peaks_buff1[gidxB] = 2000;
 80010ca:	4b1e      	ldr	r3, [pc, #120]	; (8001144 <HAL_ADC_ConvCpltCallback+0x1e4>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a26      	ldr	r2, [pc, #152]	; (8001168 <HAL_ADC_ConvCpltCallback+0x208>)
 80010d0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80010d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						dripOff = 20;
 80010d8:	4b22      	ldr	r3, [pc, #136]	; (8001164 <HAL_ADC_ConvCpltCallback+0x204>)
 80010da:	2214      	movs	r2, #20
 80010dc:	601a      	str	r2, [r3, #0]
						relative_sawtooth_voltage = (3300000 / 4096) * sawtooth_buf1[gidxB-3]; // sawtooth_buf1[gidxB-3]; //
 80010de:	4b19      	ldr	r3, [pc, #100]	; (8001144 <HAL_ADC_ConvCpltCallback+0x1e4>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	3b03      	subs	r3, #3
 80010e4:	4a1e      	ldr	r2, [pc, #120]	; (8001160 <HAL_ADC_ConvCpltCallback+0x200>)
 80010e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ea:	f240 3225 	movw	r2, #805	; 0x325
 80010ee:	fb02 f303 	mul.w	r3, r2, r3
 80010f2:	461a      	mov	r2, r3
 80010f4:	4b1d      	ldr	r3, [pc, #116]	; (800116c <HAL_ADC_ConvCpltCallback+0x20c>)
 80010f6:	601a      	str	r2, [r3, #0]
					if(dripOff == 0)
 80010f8:	e00f      	b.n	800111a <HAL_ADC_ConvCpltCallback+0x1ba>
					}
					else
					{
						peaks_buff1[gidxB] = 500;
 80010fa:	4b12      	ldr	r3, [pc, #72]	; (8001144 <HAL_ADC_ConvCpltCallback+0x1e4>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a1a      	ldr	r2, [pc, #104]	; (8001168 <HAL_ADC_ConvCpltCallback+0x208>)
 8001100:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001104:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					if(dripOff == 0)
 8001108:	e007      	b.n	800111a <HAL_ADC_ConvCpltCallback+0x1ba>
					}
				}
				else
				{
					peaks_buff1[gidxB] = 500;
 800110a:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <HAL_ADC_ConvCpltCallback+0x1e4>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a16      	ldr	r2, [pc, #88]	; (8001168 <HAL_ADC_ConvCpltCallback+0x208>)
 8001110:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001114:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				if(FindPeak(&kalman_buf1[gidxB-3]) && (kalman_buf1[gidxB-3] > midlineA))
 8001118:	e0a7      	b.n	800126a <HAL_ADC_ConvCpltCallback+0x30a>
 800111a:	e0a6      	b.n	800126a <HAL_ADC_ConvCpltCallback+0x30a>
				}
			}
			else
			{
				peaks_buff1[gidxB] = 500;
 800111c:	4b09      	ldr	r3, [pc, #36]	; (8001144 <HAL_ADC_ConvCpltCallback+0x1e4>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a11      	ldr	r2, [pc, #68]	; (8001168 <HAL_ADC_ConvCpltCallback+0x208>)
 8001122:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001126:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800112a:	e09e      	b.n	800126a <HAL_ADC_ConvCpltCallback+0x30a>
 800112c:	200001d8 	.word	0x200001d8
 8001130:	200001c0 	.word	0x200001c0
 8001134:	200001e4 	.word	0x200001e4
 8001138:	200001e8 	.word	0x200001e8
 800113c:	200001e0 	.word	0x200001e0
 8001140:	200001d0 	.word	0x200001d0
 8001144:	20001aec 	.word	0x20001aec
 8001148:	20000000 	.word	0x20000000
 800114c:	20000e6c 	.word	0x20000e6c
 8001150:	20001b0c 	.word	0x20001b0c
 8001154:	20001b10 	.word	0x20001b10
 8001158:	20001b14 	.word	0x20001b14
 800115c:	2000082c 	.word	0x2000082c
 8001160:	200001ec 	.word	0x200001ec
 8001164:	20001b18 	.word	0x20001b18
 8001168:	200014ac 	.word	0x200014ac
 800116c:	20001af0 	.word	0x20001af0
			}
		}
		else
		{
			signal_buf2[gidxB] = ad1;
 8001170:	4b4a      	ldr	r3, [pc, #296]	; (800129c <HAL_ADC_ConvCpltCallback+0x33c>)
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	4b4a      	ldr	r3, [pc, #296]	; (80012a0 <HAL_ADC_ConvCpltCallback+0x340>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4611      	mov	r1, r2
 800117a:	4a4a      	ldr	r2, [pc, #296]	; (80012a4 <HAL_ADC_ConvCpltCallback+0x344>)
 800117c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			sawtooth_buf2[gidxB] = ad2;
 8001180:	4b49      	ldr	r3, [pc, #292]	; (80012a8 <HAL_ADC_ConvCpltCallback+0x348>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	4b46      	ldr	r3, [pc, #280]	; (80012a0 <HAL_ADC_ConvCpltCallback+0x340>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4611      	mov	r1, r2
 800118a:	4a48      	ldr	r2, [pc, #288]	; (80012ac <HAL_ADC_ConvCpltCallback+0x34c>)
 800118c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			kalman_buf2[gidxB] = kalman_filter(signal_buf2[gidxB]);
 8001190:	4b43      	ldr	r3, [pc, #268]	; (80012a0 <HAL_ADC_ConvCpltCallback+0x340>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a43      	ldr	r2, [pc, #268]	; (80012a4 <HAL_ADC_ConvCpltCallback+0x344>)
 8001196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff fe60 	bl	8000e60 <kalman_filter>
 80011a0:	4602      	mov	r2, r0
 80011a2:	4b3f      	ldr	r3, [pc, #252]	; (80012a0 <HAL_ADC_ConvCpltCallback+0x340>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4611      	mov	r1, r2
 80011a8:	4a41      	ldr	r2, [pc, #260]	; (80012b0 <HAL_ADC_ConvCpltCallback+0x350>)
 80011aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

			if(gidxB==0)
 80011ae:	4b3c      	ldr	r3, [pc, #240]	; (80012a0 <HAL_ADC_ConvCpltCallback+0x340>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d107      	bne.n	80011c6 <HAL_ADC_ConvCpltCallback+0x266>
			{
				gminA = kalman_buf2[0];
 80011b6:	4b3e      	ldr	r3, [pc, #248]	; (80012b0 <HAL_ADC_ConvCpltCallback+0x350>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a3e      	ldr	r2, [pc, #248]	; (80012b4 <HAL_ADC_ConvCpltCallback+0x354>)
 80011bc:	6013      	str	r3, [r2, #0]
				gmaxA = kalman_buf2[0];
 80011be:	4b3c      	ldr	r3, [pc, #240]	; (80012b0 <HAL_ADC_ConvCpltCallback+0x350>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a3d      	ldr	r2, [pc, #244]	; (80012b8 <HAL_ADC_ConvCpltCallback+0x358>)
 80011c4:	6013      	str	r3, [r2, #0]
			}

			if((gidxB >= 5) && (gidxB < 190))
 80011c6:	4b36      	ldr	r3, [pc, #216]	; (80012a0 <HAL_ADC_ConvCpltCallback+0x340>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2b04      	cmp	r3, #4
 80011cc:	dd46      	ble.n	800125c <HAL_ADC_ConvCpltCallback+0x2fc>
 80011ce:	4b34      	ldr	r3, [pc, #208]	; (80012a0 <HAL_ADC_ConvCpltCallback+0x340>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2bbd      	cmp	r3, #189	; 0xbd
 80011d4:	dc42      	bgt.n	800125c <HAL_ADC_ConvCpltCallback+0x2fc>
			{
				if(FindPeak(&kalman_buf2[gidxB-3]) && (kalman_buf2[gidxB-3] > midlineA))
 80011d6:	4b32      	ldr	r3, [pc, #200]	; (80012a0 <HAL_ADC_ConvCpltCallback+0x340>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	3b03      	subs	r3, #3
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	4a34      	ldr	r2, [pc, #208]	; (80012b0 <HAL_ADC_ConvCpltCallback+0x350>)
 80011e0:	4413      	add	r3, r2
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff fe1e 	bl	8000e24 <FindPeak>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d02d      	beq.n	800124a <HAL_ADC_ConvCpltCallback+0x2ea>
 80011ee:	4b2c      	ldr	r3, [pc, #176]	; (80012a0 <HAL_ADC_ConvCpltCallback+0x340>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	3b03      	subs	r3, #3
 80011f4:	4a2e      	ldr	r2, [pc, #184]	; (80012b0 <HAL_ADC_ConvCpltCallback+0x350>)
 80011f6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80011fa:	4b30      	ldr	r3, [pc, #192]	; (80012bc <HAL_ADC_ConvCpltCallback+0x35c>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	429a      	cmp	r2, r3
 8001200:	dd23      	ble.n	800124a <HAL_ADC_ConvCpltCallback+0x2ea>
				{
					if(dripOff == 0)
 8001202:	4b2f      	ldr	r3, [pc, #188]	; (80012c0 <HAL_ADC_ConvCpltCallback+0x360>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d117      	bne.n	800123a <HAL_ADC_ConvCpltCallback+0x2da>
					{
						peaks_buff2[gidxB] = 2000;
 800120a:	4b25      	ldr	r3, [pc, #148]	; (80012a0 <HAL_ADC_ConvCpltCallback+0x340>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a2d      	ldr	r2, [pc, #180]	; (80012c4 <HAL_ADC_ConvCpltCallback+0x364>)
 8001210:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001214:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						relative_sawtooth_voltage = (3300000 / 4096) * sawtooth_buf2[gidxB-3]; // sawtooth_buf2[gidxB-3]; //
 8001218:	4b21      	ldr	r3, [pc, #132]	; (80012a0 <HAL_ADC_ConvCpltCallback+0x340>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	3b03      	subs	r3, #3
 800121e:	4a23      	ldr	r2, [pc, #140]	; (80012ac <HAL_ADC_ConvCpltCallback+0x34c>)
 8001220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001224:	f240 3225 	movw	r2, #805	; 0x325
 8001228:	fb02 f303 	mul.w	r3, r2, r3
 800122c:	461a      	mov	r2, r3
 800122e:	4b26      	ldr	r3, [pc, #152]	; (80012c8 <HAL_ADC_ConvCpltCallback+0x368>)
 8001230:	601a      	str	r2, [r3, #0]
						dripOff = 20;
 8001232:	4b23      	ldr	r3, [pc, #140]	; (80012c0 <HAL_ADC_ConvCpltCallback+0x360>)
 8001234:	2214      	movs	r2, #20
 8001236:	601a      	str	r2, [r3, #0]
					if(dripOff == 0)
 8001238:	e00f      	b.n	800125a <HAL_ADC_ConvCpltCallback+0x2fa>
					}
					else
					{
						peaks_buff2[gidxB] = 500;
 800123a:	4b19      	ldr	r3, [pc, #100]	; (80012a0 <HAL_ADC_ConvCpltCallback+0x340>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a21      	ldr	r2, [pc, #132]	; (80012c4 <HAL_ADC_ConvCpltCallback+0x364>)
 8001240:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001244:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					if(dripOff == 0)
 8001248:	e007      	b.n	800125a <HAL_ADC_ConvCpltCallback+0x2fa>
					}
				}
				else
				{
					peaks_buff2[gidxB] = 500;
 800124a:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <HAL_ADC_ConvCpltCallback+0x340>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a1d      	ldr	r2, [pc, #116]	; (80012c4 <HAL_ADC_ConvCpltCallback+0x364>)
 8001250:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001254:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				if(FindPeak(&kalman_buf2[gidxB-3]) && (kalman_buf2[gidxB-3] > midlineA))
 8001258:	e007      	b.n	800126a <HAL_ADC_ConvCpltCallback+0x30a>
 800125a:	e006      	b.n	800126a <HAL_ADC_ConvCpltCallback+0x30a>
				}
			}
			else
			{
				peaks_buff2[gidxB] = 500;
 800125c:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <HAL_ADC_ConvCpltCallback+0x340>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a18      	ldr	r2, [pc, #96]	; (80012c4 <HAL_ADC_ConvCpltCallback+0x364>)
 8001262:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001266:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}
		}
		gidxB++;
 800126a:	4b0d      	ldr	r3, [pc, #52]	; (80012a0 <HAL_ADC_ConvCpltCallback+0x340>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	3301      	adds	r3, #1
 8001270:	4a0b      	ldr	r2, [pc, #44]	; (80012a0 <HAL_ADC_ConvCpltCallback+0x340>)
 8001272:	6013      	str	r3, [r2, #0]
		if(dripOff > 0)
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <HAL_ADC_ConvCpltCallback+0x360>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	dd04      	ble.n	8001286 <HAL_ADC_ConvCpltCallback+0x326>
		{
			dripOff--;
 800127c:	4b10      	ldr	r3, [pc, #64]	; (80012c0 <HAL_ADC_ConvCpltCallback+0x360>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	3b01      	subs	r3, #1
 8001282:	4a0f      	ldr	r2, [pc, #60]	; (80012c0 <HAL_ADC_ConvCpltCallback+0x360>)
 8001284:	6013      	str	r3, [r2, #0]
		}
	}

	// HAL_ADC_Start_IT(&hadc1);
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adraw, adcChannelCount);
 8001286:	2302      	movs	r3, #2
 8001288:	461a      	mov	r2, r3
 800128a:	4910      	ldr	r1, [pc, #64]	; (80012cc <HAL_ADC_ConvCpltCallback+0x36c>)
 800128c:	4810      	ldr	r0, [pc, #64]	; (80012d0 <HAL_ADC_ConvCpltCallback+0x370>)
 800128e:	f001 f955 	bl	800253c <HAL_ADC_Start_DMA>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	200001e4 	.word	0x200001e4
 80012a0:	20001aec 	.word	0x20001aec
 80012a4:	20000b4c 	.word	0x20000b4c
 80012a8:	200001e8 	.word	0x200001e8
 80012ac:	2000050c 	.word	0x2000050c
 80012b0:	2000118c 	.word	0x2000118c
 80012b4:	20001b10 	.word	0x20001b10
 80012b8:	20001b0c 	.word	0x20001b0c
 80012bc:	20001b14 	.word	0x20001b14
 80012c0:	20001b18 	.word	0x20001b18
 80012c4:	200017cc 	.word	0x200017cc
 80012c8:	20001af0 	.word	0x20001af0
 80012cc:	200001c0 	.word	0x200001c0
 80012d0:	20000088 	.word	0x20000088

080012d4 <HAL_TIM_PeriodElapsedCallback>:
uint32_t __t2_cntr = 0;
uint32_t __dripA = 0;
uint32_t flag_saving_interval = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	if(htim == &htim1)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4a1a      	ldr	r2, [pc, #104]	; (8001348 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d12a      	bne.n	800133a <HAL_TIM_PeriodElapsedCallback+0x66>
	{
		if(__t2_cntr < 3)
 80012e4:	4b19      	ldr	r3, [pc, #100]	; (800134c <HAL_TIM_PeriodElapsedCallback+0x78>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d805      	bhi.n	80012f8 <HAL_TIM_PeriodElapsedCallback+0x24>
		{
			__t2_cntr++;
 80012ec:	4b17      	ldr	r3, [pc, #92]	; (800134c <HAL_TIM_PeriodElapsedCallback+0x78>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	3301      	adds	r3, #1
 80012f2:	4a16      	ldr	r2, [pc, #88]	; (800134c <HAL_TIM_PeriodElapsedCallback+0x78>)
 80012f4:	6013      	str	r3, [r2, #0]
 80012f6:	e002      	b.n	80012fe <HAL_TIM_PeriodElapsedCallback+0x2a>
		}
		else
		{
			__t2_cntr = 0;
 80012f8:	4b14      	ldr	r3, [pc, #80]	; (800134c <HAL_TIM_PeriodElapsedCallback+0x78>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
		}

		if(__dripA > 0)
 80012fe:	4b14      	ldr	r3, [pc, #80]	; (8001350 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d010      	beq.n	8001328 <HAL_TIM_PeriodElapsedCallback+0x54>
		{
			__dripA++;
 8001306:	4b12      	ldr	r3, [pc, #72]	; (8001350 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	3301      	adds	r3, #1
 800130c:	4a10      	ldr	r2, [pc, #64]	; (8001350 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800130e:	6013      	str	r3, [r2, #0]

			if(__dripA > 1500) // 500uS
 8001310:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001318:	4293      	cmp	r3, r2
 800131a:	d905      	bls.n	8001328 <HAL_TIM_PeriodElapsedCallback+0x54>
			{
				flag_FallingEdge = 0;
 800131c:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
				__dripA = 0;
 8001322:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
			}
		}

		if(flag_saving_interval > 0)
 8001328:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d004      	beq.n	800133a <HAL_TIM_PeriodElapsedCallback+0x66>
		{
			if(flag_saving_interval == 1)
			{
				//endWriting(&log_file);
			}
			flag_saving_interval--;
 8001330:	4b09      	ldr	r3, [pc, #36]	; (8001358 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	3b01      	subs	r3, #1
 8001336:	4a08      	ldr	r2, [pc, #32]	; (8001358 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001338:	6013      	str	r3, [r2, #0]
		}
	}
}
 800133a:	bf00      	nop
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	20000130 	.word	0x20000130
 800134c:	20001b1c 	.word	0x20001b1c
 8001350:	20001b20 	.word	0x20001b20
 8001354:	20001af4 	.word	0x20001af4
 8001358:	20001b24 	.word	0x20001b24

0800135c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4a0d      	ldr	r2, [pc, #52]	; (800139c <HAL_UART_RxCpltCallback+0x40>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d10d      	bne.n	8001388 <HAL_UART_RxCpltCallback+0x2c>
	{
		if(uart1_raw[0] == 'a')
 800136c:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <HAL_UART_RxCpltCallback+0x44>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b61      	cmp	r3, #97	; 0x61
 8001372:	d102      	bne.n	800137a <HAL_UART_RxCpltCallback+0x1e>
		{
			rx_flagA = 1;
 8001374:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <HAL_UART_RxCpltCallback+0x48>)
 8001376:	2201      	movs	r2, #1
 8001378:	601a      	str	r2, [r3, #0]
		}

		if(uart1_raw[0] == 'b')
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <HAL_UART_RxCpltCallback+0x44>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b62      	cmp	r3, #98	; 0x62
 8001380:	d102      	bne.n	8001388 <HAL_UART_RxCpltCallback+0x2c>
		{
			rx_flagB = 1;
 8001382:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <HAL_UART_RxCpltCallback+0x4c>)
 8001384:	2201      	movs	r2, #1
 8001386:	601a      	str	r2, [r3, #0]
		}
	}
	HAL_UART_Receive_IT(&huart1, uart1_raw, 1);
 8001388:	2201      	movs	r2, #1
 800138a:	4905      	ldr	r1, [pc, #20]	; (80013a0 <HAL_UART_RxCpltCallback+0x44>)
 800138c:	4803      	ldr	r0, [pc, #12]	; (800139c <HAL_UART_RxCpltCallback+0x40>)
 800138e:	f003 fdc8 	bl	8004f22 <HAL_UART_Receive_IT>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000178 	.word	0x20000178
 80013a0:	200001c4 	.word	0x200001c4
 80013a4:	200001d0 	.word	0x200001d0
 80013a8:	200001d4 	.word	0x200001d4

080013ac <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
	;
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013c0:	b590      	push	{r4, r7, lr}
 80013c2:	b089      	sub	sp, #36	; 0x24
 80013c4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	uint32_t a_shot = 0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]
	uint32_t b_shot = 0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]

	int lidxA = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	613b      	str	r3, [r7, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013d2:	f000 fec9 	bl	8002168 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013d6:	f000 f8fd 	bl	80015d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013da:	f000 fa65 	bl	80018a8 <MX_GPIO_Init>
  MX_DMA_Init();
 80013de:	f000 fa43 	bl	8001868 <MX_DMA_Init>
  MX_ADC1_Init();
 80013e2:	f000 f967 	bl	80016b4 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80013e6:	f000 fa15 	bl	8001814 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80013ea:	f000 f9c3 	bl	8001774 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adraw, adcChannelCount);
 80013ee:	2302      	movs	r3, #2
 80013f0:	461a      	mov	r2, r3
 80013f2:	495c      	ldr	r1, [pc, #368]	; (8001564 <main+0x1a4>)
 80013f4:	485c      	ldr	r0, [pc, #368]	; (8001568 <main+0x1a8>)
 80013f6:	f001 f8a1 	bl	800253c <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim1);
 80013fa:	485c      	ldr	r0, [pc, #368]	; (800156c <main+0x1ac>)
 80013fc:	f003 f898 	bl	8004530 <HAL_TIM_Base_Start>

  HAL_UART_Receive_IT(&huart1, uart1_raw, 1);
 8001400:	2201      	movs	r2, #1
 8001402:	495b      	ldr	r1, [pc, #364]	; (8001570 <main+0x1b0>)
 8001404:	485b      	ldr	r0, [pc, #364]	; (8001574 <main+0x1b4>)
 8001406:	f003 fd8c 	bl	8004f22 <HAL_UART_Receive_IT>

  HAL_Delay(500);
 800140a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800140e:	f000 ff1d 	bl	800224c <HAL_Delay>

  myprintf("Starting ... \r\n");
 8001412:	4859      	ldr	r0, [pc, #356]	; (8001578 <main+0x1b8>)
 8001414:	f7ff fce0 	bl	8000dd8 <myprintf>
  myprintf("... ... \r\n");
 8001418:	4858      	ldr	r0, [pc, #352]	; (800157c <main+0x1bc>)
 800141a:	f7ff fcdd 	bl	8000dd8 <myprintf>

  int rateA = 0;
 800141e:	2300      	movs	r3, #0
 8001420:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	millis = HAL_GetTick();
 8001422:	f000 ff07 	bl	8002234 <HAL_GetTick>
 8001426:	4603      	mov	r3, r0
 8001428:	4a55      	ldr	r2, [pc, #340]	; (8001580 <main+0x1c0>)
 800142a:	6013      	str	r3, [r2, #0]

	if(HAL_GetTick() > (a_shot + 500))
 800142c:	f000 ff02 	bl	8002234 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001438:	429a      	cmp	r2, r3
 800143a:	d9f2      	bls.n	8001422 <main+0x62>
	{
	  a_shot = HAL_GetTick();
 800143c:	f000 fefa 	bl	8002234 <HAL_GetTick>
 8001440:	6178      	str	r0, [r7, #20]
	  rateA = (conv_rate * 2);
 8001442:	4b50      	ldr	r3, [pc, #320]	; (8001584 <main+0x1c4>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	60bb      	str	r3, [r7, #8]
	  conv_rate = 0;
 800144a:	4b4e      	ldr	r3, [pc, #312]	; (8001584 <main+0x1c4>)
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]

	  float t = millis/1000.0;
 8001450:	4b4b      	ldr	r3, [pc, #300]	; (8001580 <main+0x1c0>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff f865 	bl	8000524 <__aeabi_ui2d>
 800145a:	f04f 0200 	mov.w	r2, #0
 800145e:	4b4a      	ldr	r3, [pc, #296]	; (8001588 <main+0x1c8>)
 8001460:	f7ff fa04 	bl	800086c <__aeabi_ddiv>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	4610      	mov	r0, r2
 800146a:	4619      	mov	r1, r3
 800146c:	f7ff fae6 	bl	8000a3c <__aeabi_d2f>
 8001470:	4603      	mov	r3, r0
 8001472:	607b      	str	r3, [r7, #4]
		  if(rx_flagA == 1)
 8001474:	4b45      	ldr	r3, [pc, #276]	; (800158c <main+0x1cc>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d153      	bne.n	8001524 <main+0x164>
		  {
			  if(adcConversionComplete == 1)
 800147c:	4b44      	ldr	r3, [pc, #272]	; (8001590 <main+0x1d0>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d142      	bne.n	800150a <main+0x14a>
			  {
				  adcConversionComplete = 0;
 8001484:	4b42      	ldr	r3, [pc, #264]	; (8001590 <main+0x1d0>)
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
				  for(lidxA=0;lidxA<200;lidxA++)
 800148a:	2300      	movs	r3, #0
 800148c:	613b      	str	r3, [r7, #16]
 800148e:	e039      	b.n	8001504 <main+0x144>
				  {
					  //myprintf("A0:%d, A1:%d\n", signal_buf[lidxA], sawtooth_buf[lidxA]);
					  if(signal_buffer_in_queue == 2)
 8001490:	4b40      	ldr	r3, [pc, #256]	; (8001594 <main+0x1d4>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b02      	cmp	r3, #2
 8001496:	d119      	bne.n	80014cc <main+0x10c>
					  {
						  //myprintf("A0:%d\n", signal_buf1[lidxA]);
						  myprintf("%d,%d,%d,%d,%d\r\n", signal_buf1[lidxA], sawtooth_buf1[lidxA], kalman_buf1[lidxA], peaks_buff1[lidxA], midlineA); //GetMidLine(kalman_buf1, 200));
 8001498:	4a3f      	ldr	r2, [pc, #252]	; (8001598 <main+0x1d8>)
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80014a0:	4a3e      	ldr	r2, [pc, #248]	; (800159c <main+0x1dc>)
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80014a8:	4a3d      	ldr	r2, [pc, #244]	; (80015a0 <main+0x1e0>)
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80014b0:	4a3c      	ldr	r2, [pc, #240]	; (80015a4 <main+0x1e4>)
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014b8:	4a3b      	ldr	r2, [pc, #236]	; (80015a8 <main+0x1e8>)
 80014ba:	6812      	ldr	r2, [r2, #0]
 80014bc:	9201      	str	r2, [sp, #4]
 80014be:	9300      	str	r3, [sp, #0]
 80014c0:	4623      	mov	r3, r4
 80014c2:	4602      	mov	r2, r0
 80014c4:	4839      	ldr	r0, [pc, #228]	; (80015ac <main+0x1ec>)
 80014c6:	f7ff fc87 	bl	8000dd8 <myprintf>
 80014ca:	e018      	b.n	80014fe <main+0x13e>
					  }
					  else
					  {
						  //myprintf("A0:%d\n", signal_buf2[lidxA]);
						  myprintf("%d,%d,%d,%d,%d\r\n", signal_buf2[lidxA], sawtooth_buf2[lidxA], kalman_buf2[lidxA], peaks_buff2[lidxA], midlineA); // GetMidLine(kalman_buf2, 200));
 80014cc:	4a38      	ldr	r2, [pc, #224]	; (80015b0 <main+0x1f0>)
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80014d4:	4a37      	ldr	r2, [pc, #220]	; (80015b4 <main+0x1f4>)
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80014dc:	4a36      	ldr	r2, [pc, #216]	; (80015b8 <main+0x1f8>)
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80014e4:	4a35      	ldr	r2, [pc, #212]	; (80015bc <main+0x1fc>)
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ec:	4a2e      	ldr	r2, [pc, #184]	; (80015a8 <main+0x1e8>)
 80014ee:	6812      	ldr	r2, [r2, #0]
 80014f0:	9201      	str	r2, [sp, #4]
 80014f2:	9300      	str	r3, [sp, #0]
 80014f4:	4623      	mov	r3, r4
 80014f6:	4602      	mov	r2, r0
 80014f8:	482c      	ldr	r0, [pc, #176]	; (80015ac <main+0x1ec>)
 80014fa:	f7ff fc6d 	bl	8000dd8 <myprintf>
				  for(lidxA=0;lidxA<200;lidxA++)
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	3301      	adds	r3, #1
 8001502:	613b      	str	r3, [r7, #16]
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	2bc7      	cmp	r3, #199	; 0xc7
 8001508:	ddc2      	ble.n	8001490 <main+0xd0>
					  }
				  }
			  }
			  HAL_Delay(2500);
 800150a:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800150e:	f000 fe9d 	bl	800224c <HAL_Delay>
			  gidxB = 0; // Fresh Copy of ADC
 8001512:	4b2b      	ldr	r3, [pc, #172]	; (80015c0 <main+0x200>)
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
			  rx_flagA = 0;
 8001518:	4b1c      	ldr	r3, [pc, #112]	; (800158c <main+0x1cc>)
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
			  rx_flagB = 0;
 800151e:	4b29      	ldr	r3, [pc, #164]	; (80015c4 <main+0x204>)
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
		  }

		  if(rx_flagB == 1)
 8001524:	4b27      	ldr	r3, [pc, #156]	; (80015c4 <main+0x204>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d10b      	bne.n	8001544 <main+0x184>
		  {
			  myprintf("Sawtooth Voltage : %d\r\n", relative_sawtooth_voltage);
 800152c:	4b26      	ldr	r3, [pc, #152]	; (80015c8 <main+0x208>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4619      	mov	r1, r3
 8001532:	4826      	ldr	r0, [pc, #152]	; (80015cc <main+0x20c>)
 8001534:	f7ff fc50 	bl	8000dd8 <myprintf>
			  HAL_Delay(100);
 8001538:	2064      	movs	r0, #100	; 0x64
 800153a:	f000 fe87 	bl	800224c <HAL_Delay>
			  rx_flagB = 0;
 800153e:	4b21      	ldr	r3, [pc, #132]	; (80015c4 <main+0x204>)
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
		  }
		  myprintf("Freq : %d  Rate: %d \r\n", ((relative_sawtooth_voltage * 4107) + 5500), rateA);
 8001544:	4b20      	ldr	r3, [pc, #128]	; (80015c8 <main+0x208>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f241 020b 	movw	r2, #4107	; 0x100b
 800154c:	fb02 f303 	mul.w	r3, r2, r3
 8001550:	f503 53ab 	add.w	r3, r3, #5472	; 0x1560
 8001554:	331c      	adds	r3, #28
 8001556:	68ba      	ldr	r2, [r7, #8]
 8001558:	4619      	mov	r1, r3
 800155a:	481d      	ldr	r0, [pc, #116]	; (80015d0 <main+0x210>)
 800155c:	f7ff fc3c 	bl	8000dd8 <myprintf>
	millis = HAL_GetTick();
 8001560:	e75f      	b.n	8001422 <main+0x62>
 8001562:	bf00      	nop
 8001564:	200001c0 	.word	0x200001c0
 8001568:	20000088 	.word	0x20000088
 800156c:	20000130 	.word	0x20000130
 8001570:	200001c4 	.word	0x200001c4
 8001574:	20000178 	.word	0x20000178
 8001578:	08006798 	.word	0x08006798
 800157c:	080067a8 	.word	0x080067a8
 8001580:	200001dc 	.word	0x200001dc
 8001584:	200001e0 	.word	0x200001e0
 8001588:	408f4000 	.word	0x408f4000
 800158c:	200001d0 	.word	0x200001d0
 8001590:	200001d8 	.word	0x200001d8
 8001594:	20000000 	.word	0x20000000
 8001598:	2000082c 	.word	0x2000082c
 800159c:	200001ec 	.word	0x200001ec
 80015a0:	20000e6c 	.word	0x20000e6c
 80015a4:	200014ac 	.word	0x200014ac
 80015a8:	20001b14 	.word	0x20001b14
 80015ac:	080067b4 	.word	0x080067b4
 80015b0:	20000b4c 	.word	0x20000b4c
 80015b4:	2000050c 	.word	0x2000050c
 80015b8:	2000118c 	.word	0x2000118c
 80015bc:	200017cc 	.word	0x200017cc
 80015c0:	20001aec 	.word	0x20001aec
 80015c4:	200001d4 	.word	0x200001d4
 80015c8:	20001af0 	.word	0x20001af0
 80015cc:	080067c8 	.word	0x080067c8
 80015d0:	080067e0 	.word	0x080067e0

080015d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b094      	sub	sp, #80	; 0x50
 80015d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015da:	f107 0320 	add.w	r3, r7, #32
 80015de:	2230      	movs	r2, #48	; 0x30
 80015e0:	2100      	movs	r1, #0
 80015e2:	4618      	mov	r0, r3
 80015e4:	f004 fc48 	bl	8005e78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015e8:	f107 030c 	add.w	r3, r7, #12
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015f8:	2300      	movs	r3, #0
 80015fa:	60bb      	str	r3, [r7, #8]
 80015fc:	4b2b      	ldr	r3, [pc, #172]	; (80016ac <SystemClock_Config+0xd8>)
 80015fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001600:	4a2a      	ldr	r2, [pc, #168]	; (80016ac <SystemClock_Config+0xd8>)
 8001602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001606:	6413      	str	r3, [r2, #64]	; 0x40
 8001608:	4b28      	ldr	r3, [pc, #160]	; (80016ac <SystemClock_Config+0xd8>)
 800160a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001610:	60bb      	str	r3, [r7, #8]
 8001612:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001614:	2300      	movs	r3, #0
 8001616:	607b      	str	r3, [r7, #4]
 8001618:	4b25      	ldr	r3, [pc, #148]	; (80016b0 <SystemClock_Config+0xdc>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a24      	ldr	r2, [pc, #144]	; (80016b0 <SystemClock_Config+0xdc>)
 800161e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001622:	6013      	str	r3, [r2, #0]
 8001624:	4b22      	ldr	r3, [pc, #136]	; (80016b0 <SystemClock_Config+0xdc>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800162c:	607b      	str	r3, [r7, #4]
 800162e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001630:	2302      	movs	r3, #2
 8001632:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001634:	2301      	movs	r3, #1
 8001636:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001638:	2310      	movs	r3, #16
 800163a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800163c:	2302      	movs	r3, #2
 800163e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001640:	2300      	movs	r3, #0
 8001642:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001644:	2308      	movs	r3, #8
 8001646:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001648:	23b4      	movs	r3, #180	; 0xb4
 800164a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800164c:	2302      	movs	r3, #2
 800164e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001650:	2307      	movs	r3, #7
 8001652:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001654:	f107 0320 	add.w	r3, r7, #32
 8001658:	4618      	mov	r0, r3
 800165a:	f002 fa81 	bl	8003b60 <HAL_RCC_OscConfig>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001664:	f000 fb7a 	bl	8001d5c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001668:	f002 fa2a 	bl	8003ac0 <HAL_PWREx_EnableOverDrive>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001672:	f000 fb73 	bl	8001d5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001676:	230f      	movs	r3, #15
 8001678:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800167a:	2302      	movs	r3, #2
 800167c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001682:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001686:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001688:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800168c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800168e:	f107 030c 	add.w	r3, r7, #12
 8001692:	2105      	movs	r1, #5
 8001694:	4618      	mov	r0, r3
 8001696:	f002 fcdb 	bl	8004050 <HAL_RCC_ClockConfig>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80016a0:	f000 fb5c 	bl	8001d5c <Error_Handler>
  }
}
 80016a4:	bf00      	nop
 80016a6:	3750      	adds	r7, #80	; 0x50
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40007000 	.word	0x40007000

080016b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016ba:	463b      	mov	r3, r7
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80016c6:	4b28      	ldr	r3, [pc, #160]	; (8001768 <MX_ADC1_Init+0xb4>)
 80016c8:	4a28      	ldr	r2, [pc, #160]	; (800176c <MX_ADC1_Init+0xb8>)
 80016ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80016cc:	4b26      	ldr	r3, [pc, #152]	; (8001768 <MX_ADC1_Init+0xb4>)
 80016ce:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80016d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016d4:	4b24      	ldr	r3, [pc, #144]	; (8001768 <MX_ADC1_Init+0xb4>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80016da:	4b23      	ldr	r3, [pc, #140]	; (8001768 <MX_ADC1_Init+0xb4>)
 80016dc:	2201      	movs	r2, #1
 80016de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80016e0:	4b21      	ldr	r3, [pc, #132]	; (8001768 <MX_ADC1_Init+0xb4>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016e6:	4b20      	ldr	r3, [pc, #128]	; (8001768 <MX_ADC1_Init+0xb4>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016ee:	4b1e      	ldr	r3, [pc, #120]	; (8001768 <MX_ADC1_Init+0xb4>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016f4:	4b1c      	ldr	r3, [pc, #112]	; (8001768 <MX_ADC1_Init+0xb4>)
 80016f6:	4a1e      	ldr	r2, [pc, #120]	; (8001770 <MX_ADC1_Init+0xbc>)
 80016f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016fa:	4b1b      	ldr	r3, [pc, #108]	; (8001768 <MX_ADC1_Init+0xb4>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001700:	4b19      	ldr	r3, [pc, #100]	; (8001768 <MX_ADC1_Init+0xb4>)
 8001702:	2202      	movs	r2, #2
 8001704:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001706:	4b18      	ldr	r3, [pc, #96]	; (8001768 <MX_ADC1_Init+0xb4>)
 8001708:	2201      	movs	r2, #1
 800170a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800170e:	4b16      	ldr	r3, [pc, #88]	; (8001768 <MX_ADC1_Init+0xb4>)
 8001710:	2201      	movs	r2, #1
 8001712:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001714:	4814      	ldr	r0, [pc, #80]	; (8001768 <MX_ADC1_Init+0xb4>)
 8001716:	f000 fdbd 	bl	8002294 <HAL_ADC_Init>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001720:	f000 fb1c 	bl	8001d5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001724:	230d      	movs	r3, #13
 8001726:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001728:	2301      	movs	r3, #1
 800172a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 800172c:	2302      	movs	r3, #2
 800172e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001730:	463b      	mov	r3, r7
 8001732:	4619      	mov	r1, r3
 8001734:	480c      	ldr	r0, [pc, #48]	; (8001768 <MX_ADC1_Init+0xb4>)
 8001736:	f001 f82f 	bl	8002798 <HAL_ADC_ConfigChannel>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001740:	f000 fb0c 	bl	8001d5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001744:	2305      	movs	r3, #5
 8001746:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001748:	2302      	movs	r3, #2
 800174a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800174c:	463b      	mov	r3, r7
 800174e:	4619      	mov	r1, r3
 8001750:	4805      	ldr	r0, [pc, #20]	; (8001768 <MX_ADC1_Init+0xb4>)
 8001752:	f001 f821 	bl	8002798 <HAL_ADC_ConfigChannel>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800175c:	f000 fafe 	bl	8001d5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001760:	bf00      	nop
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	20000088 	.word	0x20000088
 800176c:	40012000 	.word	0x40012000
 8001770:	0f000001 	.word	0x0f000001

08001774 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800177a:	f107 0308 	add.w	r3, r7, #8
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	605a      	str	r2, [r3, #4]
 8001784:	609a      	str	r2, [r3, #8]
 8001786:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001788:	463b      	mov	r3, r7
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001790:	4b1e      	ldr	r3, [pc, #120]	; (800180c <MX_TIM1_Init+0x98>)
 8001792:	4a1f      	ldr	r2, [pc, #124]	; (8001810 <MX_TIM1_Init+0x9c>)
 8001794:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6;
 8001796:	4b1d      	ldr	r3, [pc, #116]	; (800180c <MX_TIM1_Init+0x98>)
 8001798:	2206      	movs	r2, #6
 800179a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800179c:	4b1b      	ldr	r3, [pc, #108]	; (800180c <MX_TIM1_Init+0x98>)
 800179e:	2200      	movs	r2, #0
 80017a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10;
 80017a2:	4b1a      	ldr	r3, [pc, #104]	; (800180c <MX_TIM1_Init+0x98>)
 80017a4:	220a      	movs	r2, #10
 80017a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a8:	4b18      	ldr	r3, [pc, #96]	; (800180c <MX_TIM1_Init+0x98>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017ae:	4b17      	ldr	r3, [pc, #92]	; (800180c <MX_TIM1_Init+0x98>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017b4:	4b15      	ldr	r3, [pc, #84]	; (800180c <MX_TIM1_Init+0x98>)
 80017b6:	2280      	movs	r2, #128	; 0x80
 80017b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017ba:	4814      	ldr	r0, [pc, #80]	; (800180c <MX_TIM1_Init+0x98>)
 80017bc:	f002 fe68 	bl	8004490 <HAL_TIM_Base_Init>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 80017c6:	f000 fac9 	bl	8001d5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017d0:	f107 0308 	add.w	r3, r7, #8
 80017d4:	4619      	mov	r1, r3
 80017d6:	480d      	ldr	r0, [pc, #52]	; (800180c <MX_TIM1_Init+0x98>)
 80017d8:	f003 f802 	bl	80047e0 <HAL_TIM_ConfigClockSource>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 80017e2:	f000 fabb 	bl	8001d5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80017e6:	2320      	movs	r3, #32
 80017e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ea:	2300      	movs	r3, #0
 80017ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017ee:	463b      	mov	r3, r7
 80017f0:	4619      	mov	r1, r3
 80017f2:	4806      	ldr	r0, [pc, #24]	; (800180c <MX_TIM1_Init+0x98>)
 80017f4:	f003 fa2a 	bl	8004c4c <HAL_TIMEx_MasterConfigSynchronization>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80017fe:	f000 faad 	bl	8001d5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001802:	bf00      	nop
 8001804:	3718      	adds	r7, #24
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000130 	.word	0x20000130
 8001810:	40010000 	.word	0x40010000

08001814 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001818:	4b11      	ldr	r3, [pc, #68]	; (8001860 <MX_USART1_UART_Init+0x4c>)
 800181a:	4a12      	ldr	r2, [pc, #72]	; (8001864 <MX_USART1_UART_Init+0x50>)
 800181c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800181e:	4b10      	ldr	r3, [pc, #64]	; (8001860 <MX_USART1_UART_Init+0x4c>)
 8001820:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001824:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001826:	4b0e      	ldr	r3, [pc, #56]	; (8001860 <MX_USART1_UART_Init+0x4c>)
 8001828:	2200      	movs	r2, #0
 800182a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800182c:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <MX_USART1_UART_Init+0x4c>)
 800182e:	2200      	movs	r2, #0
 8001830:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001832:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <MX_USART1_UART_Init+0x4c>)
 8001834:	2200      	movs	r2, #0
 8001836:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001838:	4b09      	ldr	r3, [pc, #36]	; (8001860 <MX_USART1_UART_Init+0x4c>)
 800183a:	220c      	movs	r2, #12
 800183c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800183e:	4b08      	ldr	r3, [pc, #32]	; (8001860 <MX_USART1_UART_Init+0x4c>)
 8001840:	2200      	movs	r2, #0
 8001842:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <MX_USART1_UART_Init+0x4c>)
 8001846:	2200      	movs	r2, #0
 8001848:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800184a:	4805      	ldr	r0, [pc, #20]	; (8001860 <MX_USART1_UART_Init+0x4c>)
 800184c:	f003 fa8e 	bl	8004d6c <HAL_UART_Init>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001856:	f000 fa81 	bl	8001d5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000178 	.word	0x20000178
 8001864:	40011000 	.word	0x40011000

08001868 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	607b      	str	r3, [r7, #4]
 8001872:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <MX_DMA_Init+0x3c>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	4a0b      	ldr	r2, [pc, #44]	; (80018a4 <MX_DMA_Init+0x3c>)
 8001878:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800187c:	6313      	str	r3, [r2, #48]	; 0x30
 800187e:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <MX_DMA_Init+0x3c>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001886:	607b      	str	r3, [r7, #4]
 8001888:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800188a:	2200      	movs	r2, #0
 800188c:	2100      	movs	r1, #0
 800188e:	2038      	movs	r0, #56	; 0x38
 8001890:	f001 fb17 	bl	8002ec2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001894:	2038      	movs	r0, #56	; 0x38
 8001896:	f001 fb30 	bl	8002efa <HAL_NVIC_EnableIRQ>

}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40023800 	.word	0x40023800

080018a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08e      	sub	sp, #56	; 0x38
 80018ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	605a      	str	r2, [r3, #4]
 80018b8:	609a      	str	r2, [r3, #8]
 80018ba:	60da      	str	r2, [r3, #12]
 80018bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	623b      	str	r3, [r7, #32]
 80018c2:	4bb2      	ldr	r3, [pc, #712]	; (8001b8c <MX_GPIO_Init+0x2e4>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	4ab1      	ldr	r2, [pc, #708]	; (8001b8c <MX_GPIO_Init+0x2e4>)
 80018c8:	f043 0304 	orr.w	r3, r3, #4
 80018cc:	6313      	str	r3, [r2, #48]	; 0x30
 80018ce:	4baf      	ldr	r3, [pc, #700]	; (8001b8c <MX_GPIO_Init+0x2e4>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	f003 0304 	and.w	r3, r3, #4
 80018d6:	623b      	str	r3, [r7, #32]
 80018d8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]
 80018de:	4bab      	ldr	r3, [pc, #684]	; (8001b8c <MX_GPIO_Init+0x2e4>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	4aaa      	ldr	r2, [pc, #680]	; (8001b8c <MX_GPIO_Init+0x2e4>)
 80018e4:	f043 0320 	orr.w	r3, r3, #32
 80018e8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ea:	4ba8      	ldr	r3, [pc, #672]	; (8001b8c <MX_GPIO_Init+0x2e4>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	f003 0320 	and.w	r3, r3, #32
 80018f2:	61fb      	str	r3, [r7, #28]
 80018f4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	61bb      	str	r3, [r7, #24]
 80018fa:	4ba4      	ldr	r3, [pc, #656]	; (8001b8c <MX_GPIO_Init+0x2e4>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	4aa3      	ldr	r2, [pc, #652]	; (8001b8c <MX_GPIO_Init+0x2e4>)
 8001900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001904:	6313      	str	r3, [r2, #48]	; 0x30
 8001906:	4ba1      	ldr	r3, [pc, #644]	; (8001b8c <MX_GPIO_Init+0x2e4>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800190e:	61bb      	str	r3, [r7, #24]
 8001910:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	617b      	str	r3, [r7, #20]
 8001916:	4b9d      	ldr	r3, [pc, #628]	; (8001b8c <MX_GPIO_Init+0x2e4>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	4a9c      	ldr	r2, [pc, #624]	; (8001b8c <MX_GPIO_Init+0x2e4>)
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	6313      	str	r3, [r2, #48]	; 0x30
 8001922:	4b9a      	ldr	r3, [pc, #616]	; (8001b8c <MX_GPIO_Init+0x2e4>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	617b      	str	r3, [r7, #20]
 800192c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	613b      	str	r3, [r7, #16]
 8001932:	4b96      	ldr	r3, [pc, #600]	; (8001b8c <MX_GPIO_Init+0x2e4>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	4a95      	ldr	r2, [pc, #596]	; (8001b8c <MX_GPIO_Init+0x2e4>)
 8001938:	f043 0302 	orr.w	r3, r3, #2
 800193c:	6313      	str	r3, [r2, #48]	; 0x30
 800193e:	4b93      	ldr	r3, [pc, #588]	; (8001b8c <MX_GPIO_Init+0x2e4>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	613b      	str	r3, [r7, #16]
 8001948:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	4b8f      	ldr	r3, [pc, #572]	; (8001b8c <MX_GPIO_Init+0x2e4>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	4a8e      	ldr	r2, [pc, #568]	; (8001b8c <MX_GPIO_Init+0x2e4>)
 8001954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001958:	6313      	str	r3, [r2, #48]	; 0x30
 800195a:	4b8c      	ldr	r3, [pc, #560]	; (8001b8c <MX_GPIO_Init+0x2e4>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	60bb      	str	r3, [r7, #8]
 800196a:	4b88      	ldr	r3, [pc, #544]	; (8001b8c <MX_GPIO_Init+0x2e4>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	4a87      	ldr	r2, [pc, #540]	; (8001b8c <MX_GPIO_Init+0x2e4>)
 8001970:	f043 0310 	orr.w	r3, r3, #16
 8001974:	6313      	str	r3, [r2, #48]	; 0x30
 8001976:	4b85      	ldr	r3, [pc, #532]	; (8001b8c <MX_GPIO_Init+0x2e4>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	f003 0310 	and.w	r3, r3, #16
 800197e:	60bb      	str	r3, [r7, #8]
 8001980:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	607b      	str	r3, [r7, #4]
 8001986:	4b81      	ldr	r3, [pc, #516]	; (8001b8c <MX_GPIO_Init+0x2e4>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	4a80      	ldr	r2, [pc, #512]	; (8001b8c <MX_GPIO_Init+0x2e4>)
 800198c:	f043 0308 	orr.w	r3, r3, #8
 8001990:	6313      	str	r3, [r2, #48]	; 0x30
 8001992:	4b7e      	ldr	r3, [pc, #504]	; (8001b8c <MX_GPIO_Init+0x2e4>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	f003 0308 	and.w	r3, r3, #8
 800199a:	607b      	str	r3, [r7, #4]
 800199c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800199e:	2200      	movs	r2, #0
 80019a0:	2116      	movs	r1, #22
 80019a2:	487b      	ldr	r0, [pc, #492]	; (8001b90 <MX_GPIO_Init+0x2e8>)
 80019a4:	f002 f872 	bl	8003a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80019a8:	2200      	movs	r2, #0
 80019aa:	2180      	movs	r1, #128	; 0x80
 80019ac:	4879      	ldr	r0, [pc, #484]	; (8001b94 <MX_GPIO_Init+0x2ec>)
 80019ae:	f002 f86d 	bl	8003a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80019b2:	2200      	movs	r2, #0
 80019b4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80019b8:	4877      	ldr	r0, [pc, #476]	; (8001b98 <MX_GPIO_Init+0x2f0>)
 80019ba:	f002 f867 	bl	8003a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80019be:	2200      	movs	r2, #0
 80019c0:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80019c4:	4875      	ldr	r0, [pc, #468]	; (8001b9c <MX_GPIO_Init+0x2f4>)
 80019c6:	f002 f861 	bl	8003a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80019ca:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80019ce:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d0:	2302      	movs	r3, #2
 80019d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d8:	2303      	movs	r3, #3
 80019da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019dc:	230c      	movs	r3, #12
 80019de:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019e4:	4619      	mov	r1, r3
 80019e6:	486e      	ldr	r0, [pc, #440]	; (8001ba0 <MX_GPIO_Init+0x2f8>)
 80019e8:	f001 fea4 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80019ec:	f44f 7360 	mov.w	r3, #896	; 0x380
 80019f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f2:	2302      	movs	r3, #2
 80019f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fa:	2300      	movs	r3, #0
 80019fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80019fe:	2305      	movs	r3, #5
 8001a00:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a06:	4619      	mov	r1, r3
 8001a08:	4865      	ldr	r0, [pc, #404]	; (8001ba0 <MX_GPIO_Init+0x2f8>)
 8001a0a:	f001 fe93 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8001a0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a14:	2302      	movs	r3, #2
 8001a16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001a20:	230e      	movs	r3, #14
 8001a22:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a28:	4619      	mov	r1, r3
 8001a2a:	485d      	ldr	r0, [pc, #372]	; (8001ba0 <MX_GPIO_Init+0x2f8>)
 8001a2c:	f001 fe82 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001a30:	2301      	movs	r3, #1
 8001a32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a34:	2302      	movs	r3, #2
 8001a36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a40:	230c      	movs	r3, #12
 8001a42:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001a44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4851      	ldr	r0, [pc, #324]	; (8001b90 <MX_GPIO_Init+0x2e8>)
 8001a4c:	f001 fe72 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8001a50:	2316      	movs	r3, #22
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a54:	2301      	movs	r3, #1
 8001a56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a64:	4619      	mov	r1, r3
 8001a66:	484a      	ldr	r0, [pc, #296]	; (8001b90 <MX_GPIO_Init+0x2e8>)
 8001a68:	f001 fe64 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8001a6c:	f248 0307 	movw	r3, #32775	; 0x8007
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a72:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001a76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a80:	4619      	mov	r1, r3
 8001a82:	4844      	ldr	r0, [pc, #272]	; (8001b94 <MX_GPIO_Init+0x2ec>)
 8001a84:	f001 fe56 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001a88:	f641 0358 	movw	r3, #6232	; 0x1858
 8001a8c:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a92:	2300      	movs	r3, #0
 8001a94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a96:	2300      	movs	r3, #0
 8001a98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001a9a:	230e      	movs	r3, #14
 8001a9c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	483b      	ldr	r0, [pc, #236]	; (8001b94 <MX_GPIO_Init+0x2ec>)
 8001aa6:	f001 fe45 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001aaa:	2380      	movs	r3, #128	; 0x80
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001aba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4834      	ldr	r0, [pc, #208]	; (8001b94 <MX_GPIO_Init+0x2ec>)
 8001ac2:	f001 fe37 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001ac6:	2320      	movs	r3, #32
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001aca:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001ace:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001ad4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ad8:	4619      	mov	r1, r3
 8001ada:	482d      	ldr	r0, [pc, #180]	; (8001b90 <MX_GPIO_Init+0x2e8>)
 8001adc:	f001 fe2a 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aec:	2300      	movs	r3, #0
 8001aee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001af0:	2309      	movs	r3, #9
 8001af2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001af8:	4619      	mov	r1, r3
 8001afa:	482a      	ldr	r0, [pc, #168]	; (8001ba4 <MX_GPIO_Init+0x2fc>)
 8001afc:	f001 fe1a 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001b00:	2304      	movs	r3, #4
 8001b02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b04:	2300      	movs	r3, #0
 8001b06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001b0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b10:	4619      	mov	r1, r3
 8001b12:	4824      	ldr	r0, [pc, #144]	; (8001ba4 <MX_GPIO_Init+0x2fc>)
 8001b14:	f001 fe0e 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001b18:	f248 1333 	movw	r3, #33075	; 0x8133
 8001b1c:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b26:	2303      	movs	r3, #3
 8001b28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b2a:	230c      	movs	r3, #12
 8001b2c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b32:	4619      	mov	r1, r3
 8001b34:	4819      	ldr	r0, [pc, #100]	; (8001b9c <MX_GPIO_Init+0x2f4>)
 8001b36:	f001 fdfd 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001b3a:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001b3e:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b40:	2302      	movs	r3, #2
 8001b42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b4c:	230c      	movs	r3, #12
 8001b4e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b54:	4619      	mov	r1, r3
 8001b56:	4814      	ldr	r0, [pc, #80]	; (8001ba8 <MX_GPIO_Init+0x300>)
 8001b58:	f001 fdec 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001b5c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001b60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b62:	2302      	movs	r3, #2
 8001b64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b6e:	230e      	movs	r3, #14
 8001b70:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b76:	4619      	mov	r1, r3
 8001b78:	480a      	ldr	r0, [pc, #40]	; (8001ba4 <MX_GPIO_Init+0x2fc>)
 8001b7a:	f001 fddb 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001b7e:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8001b82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b84:	2302      	movs	r3, #2
 8001b86:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b88:	e010      	b.n	8001bac <MX_GPIO_Init+0x304>
 8001b8a:	bf00      	nop
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	40020800 	.word	0x40020800
 8001b94:	40020000 	.word	0x40020000
 8001b98:	40020c00 	.word	0x40020c00
 8001b9c:	40021800 	.word	0x40021800
 8001ba0:	40021400 	.word	0x40021400
 8001ba4:	40020400 	.word	0x40020400
 8001ba8:	40021000 	.word	0x40021000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001bb4:	230c      	movs	r3, #12
 8001bb6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4862      	ldr	r0, [pc, #392]	; (8001d48 <MX_GPIO_Init+0x4a0>)
 8001bc0:	f001 fdb8 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001bc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001bd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	485b      	ldr	r0, [pc, #364]	; (8001d48 <MX_GPIO_Init+0x4a0>)
 8001bda:	f001 fdab 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001bde:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be4:	2302      	movs	r3, #2
 8001be6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bec:	2303      	movs	r3, #3
 8001bee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001bf0:	230c      	movs	r3, #12
 8001bf2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4854      	ldr	r0, [pc, #336]	; (8001d4c <MX_GPIO_Init+0x4a4>)
 8001bfc:	f001 fd9a 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001c00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c06:	2300      	movs	r3, #0
 8001c08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001c0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c12:	4619      	mov	r1, r3
 8001c14:	484d      	ldr	r0, [pc, #308]	; (8001d4c <MX_GPIO_Init+0x4a4>)
 8001c16:	f001 fd8d 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001c1a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001c1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c20:	2301      	movs	r3, #1
 8001c22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c24:	2300      	movs	r3, #0
 8001c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c30:	4619      	mov	r1, r3
 8001c32:	4846      	ldr	r0, [pc, #280]	; (8001d4c <MX_GPIO_Init+0x4a4>)
 8001c34:	f001 fd7e 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001c38:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c46:	2300      	movs	r3, #0
 8001c48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c4a:	230e      	movs	r3, #14
 8001c4c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c52:	4619      	mov	r1, r3
 8001c54:	483e      	ldr	r0, [pc, #248]	; (8001d50 <MX_GPIO_Init+0x4a8>)
 8001c56:	f001 fd6d 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001c5a:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001c5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c60:	2302      	movs	r3, #2
 8001c62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c6c:	230e      	movs	r3, #14
 8001c6e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c74:	4619      	mov	r1, r3
 8001c76:	4837      	ldr	r0, [pc, #220]	; (8001d54 <MX_GPIO_Init+0x4ac>)
 8001c78:	f001 fd5c 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001c7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c82:	2312      	movs	r3, #18
 8001c84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001c8e:	2304      	movs	r3, #4
 8001c90:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001c92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c96:	4619      	mov	r1, r3
 8001c98:	482e      	ldr	r0, [pc, #184]	; (8001d54 <MX_GPIO_Init+0x4ac>)
 8001c9a:	f001 fd4b 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001c9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ca2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ca4:	2312      	movs	r3, #18
 8001ca6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cac:	2300      	movs	r3, #0
 8001cae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001cb0:	2304      	movs	r3, #4
 8001cb2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4827      	ldr	r0, [pc, #156]	; (8001d58 <MX_GPIO_Init+0x4b0>)
 8001cbc:	f001 fd3a 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001cc0:	2348      	movs	r3, #72	; 0x48
 8001cc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001cd0:	230e      	movs	r3, #14
 8001cd2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cd8:	4619      	mov	r1, r3
 8001cda:	481c      	ldr	r0, [pc, #112]	; (8001d4c <MX_GPIO_Init+0x4a4>)
 8001cdc:	f001 fd2a 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001ce0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ce4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001cf2:	2309      	movs	r3, #9
 8001cf4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001cf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4814      	ldr	r0, [pc, #80]	; (8001d50 <MX_GPIO_Init+0x4a8>)
 8001cfe:	f001 fd19 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001d02:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d10:	2300      	movs	r3, #0
 8001d12:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d18:	4619      	mov	r1, r3
 8001d1a:	480d      	ldr	r0, [pc, #52]	; (8001d50 <MX_GPIO_Init+0x4a8>)
 8001d1c:	f001 fd0a 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001d20:	2360      	movs	r3, #96	; 0x60
 8001d22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d24:	2302      	movs	r3, #2
 8001d26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d30:	230c      	movs	r3, #12
 8001d32:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4803      	ldr	r0, [pc, #12]	; (8001d48 <MX_GPIO_Init+0x4a0>)
 8001d3c:	f001 fcfa 	bl	8003734 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d40:	bf00      	nop
 8001d42:	3738      	adds	r7, #56	; 0x38
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40020400 	.word	0x40020400
 8001d4c:	40020c00 	.word	0x40020c00
 8001d50:	40021800 	.word	0x40021800
 8001d54:	40020800 	.word	0x40020800
 8001d58:	40020000 	.word	0x40020000

08001d5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d60:	b672      	cpsid	i
}
 8001d62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d64:	e7fe      	b.n	8001d64 <Error_Handler+0x8>
	...

08001d68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	607b      	str	r3, [r7, #4]
 8001d72:	4b10      	ldr	r3, [pc, #64]	; (8001db4 <HAL_MspInit+0x4c>)
 8001d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d76:	4a0f      	ldr	r2, [pc, #60]	; (8001db4 <HAL_MspInit+0x4c>)
 8001d78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d7e:	4b0d      	ldr	r3, [pc, #52]	; (8001db4 <HAL_MspInit+0x4c>)
 8001d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d86:	607b      	str	r3, [r7, #4]
 8001d88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	603b      	str	r3, [r7, #0]
 8001d8e:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <HAL_MspInit+0x4c>)
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	4a08      	ldr	r2, [pc, #32]	; (8001db4 <HAL_MspInit+0x4c>)
 8001d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d98:	6413      	str	r3, [r2, #64]	; 0x40
 8001d9a:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <HAL_MspInit+0x4c>)
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da2:	603b      	str	r3, [r7, #0]
 8001da4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001da6:	2007      	movs	r0, #7
 8001da8:	f001 f880 	bl	8002eac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dac:	bf00      	nop
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40023800 	.word	0x40023800

08001db8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b08a      	sub	sp, #40	; 0x28
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc0:	f107 0314 	add.w	r3, r7, #20
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	605a      	str	r2, [r3, #4]
 8001dca:	609a      	str	r2, [r3, #8]
 8001dcc:	60da      	str	r2, [r3, #12]
 8001dce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a40      	ldr	r2, [pc, #256]	; (8001ed8 <HAL_ADC_MspInit+0x120>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d179      	bne.n	8001ece <HAL_ADC_MspInit+0x116>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	613b      	str	r3, [r7, #16]
 8001dde:	4b3f      	ldr	r3, [pc, #252]	; (8001edc <HAL_ADC_MspInit+0x124>)
 8001de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de2:	4a3e      	ldr	r2, [pc, #248]	; (8001edc <HAL_ADC_MspInit+0x124>)
 8001de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dea:	4b3c      	ldr	r3, [pc, #240]	; (8001edc <HAL_ADC_MspInit+0x124>)
 8001dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df2:	613b      	str	r3, [r7, #16]
 8001df4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	60fb      	str	r3, [r7, #12]
 8001dfa:	4b38      	ldr	r3, [pc, #224]	; (8001edc <HAL_ADC_MspInit+0x124>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	4a37      	ldr	r2, [pc, #220]	; (8001edc <HAL_ADC_MspInit+0x124>)
 8001e00:	f043 0304 	orr.w	r3, r3, #4
 8001e04:	6313      	str	r3, [r2, #48]	; 0x30
 8001e06:	4b35      	ldr	r3, [pc, #212]	; (8001edc <HAL_ADC_MspInit+0x124>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	f003 0304 	and.w	r3, r3, #4
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	60bb      	str	r3, [r7, #8]
 8001e16:	4b31      	ldr	r3, [pc, #196]	; (8001edc <HAL_ADC_MspInit+0x124>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	4a30      	ldr	r2, [pc, #192]	; (8001edc <HAL_ADC_MspInit+0x124>)
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	6313      	str	r3, [r2, #48]	; 0x30
 8001e22:	4b2e      	ldr	r3, [pc, #184]	; (8001edc <HAL_ADC_MspInit+0x124>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	60bb      	str	r3, [r7, #8]
 8001e2c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e2e:	2308      	movs	r3, #8
 8001e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e32:	2303      	movs	r3, #3
 8001e34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e3a:	f107 0314 	add.w	r3, r7, #20
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4827      	ldr	r0, [pc, #156]	; (8001ee0 <HAL_ADC_MspInit+0x128>)
 8001e42:	f001 fc77 	bl	8003734 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e46:	2320      	movs	r3, #32
 8001e48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e52:	f107 0314 	add.w	r3, r7, #20
 8001e56:	4619      	mov	r1, r3
 8001e58:	4822      	ldr	r0, [pc, #136]	; (8001ee4 <HAL_ADC_MspInit+0x12c>)
 8001e5a:	f001 fc6b 	bl	8003734 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001e5e:	4b22      	ldr	r3, [pc, #136]	; (8001ee8 <HAL_ADC_MspInit+0x130>)
 8001e60:	4a22      	ldr	r2, [pc, #136]	; (8001eec <HAL_ADC_MspInit+0x134>)
 8001e62:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001e64:	4b20      	ldr	r3, [pc, #128]	; (8001ee8 <HAL_ADC_MspInit+0x130>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e6a:	4b1f      	ldr	r3, [pc, #124]	; (8001ee8 <HAL_ADC_MspInit+0x130>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e70:	4b1d      	ldr	r3, [pc, #116]	; (8001ee8 <HAL_ADC_MspInit+0x130>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e76:	4b1c      	ldr	r3, [pc, #112]	; (8001ee8 <HAL_ADC_MspInit+0x130>)
 8001e78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e7c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ee8 <HAL_ADC_MspInit+0x130>)
 8001e80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e84:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e86:	4b18      	ldr	r3, [pc, #96]	; (8001ee8 <HAL_ADC_MspInit+0x130>)
 8001e88:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e8c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e8e:	4b16      	ldr	r3, [pc, #88]	; (8001ee8 <HAL_ADC_MspInit+0x130>)
 8001e90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e94:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e96:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <HAL_ADC_MspInit+0x130>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e9c:	4b12      	ldr	r3, [pc, #72]	; (8001ee8 <HAL_ADC_MspInit+0x130>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ea2:	4811      	ldr	r0, [pc, #68]	; (8001ee8 <HAL_ADC_MspInit+0x130>)
 8001ea4:	f001 f844 	bl	8002f30 <HAL_DMA_Init>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8001eae:	f7ff ff55 	bl	8001d5c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a0c      	ldr	r2, [pc, #48]	; (8001ee8 <HAL_ADC_MspInit+0x130>)
 8001eb6:	639a      	str	r2, [r3, #56]	; 0x38
 8001eb8:	4a0b      	ldr	r2, [pc, #44]	; (8001ee8 <HAL_ADC_MspInit+0x130>)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	2012      	movs	r0, #18
 8001ec4:	f000 fffd 	bl	8002ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001ec8:	2012      	movs	r0, #18
 8001eca:	f001 f816 	bl	8002efa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ece:	bf00      	nop
 8001ed0:	3728      	adds	r7, #40	; 0x28
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40012000 	.word	0x40012000
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	40020800 	.word	0x40020800
 8001ee4:	40020000 	.word	0x40020000
 8001ee8:	200000d0 	.word	0x200000d0
 8001eec:	40026410 	.word	0x40026410

08001ef0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a0e      	ldr	r2, [pc, #56]	; (8001f38 <HAL_TIM_Base_MspInit+0x48>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d115      	bne.n	8001f2e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	4b0d      	ldr	r3, [pc, #52]	; (8001f3c <HAL_TIM_Base_MspInit+0x4c>)
 8001f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0a:	4a0c      	ldr	r2, [pc, #48]	; (8001f3c <HAL_TIM_Base_MspInit+0x4c>)
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	6453      	str	r3, [r2, #68]	; 0x44
 8001f12:	4b0a      	ldr	r3, [pc, #40]	; (8001f3c <HAL_TIM_Base_MspInit+0x4c>)
 8001f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001f1e:	2200      	movs	r2, #0
 8001f20:	2100      	movs	r1, #0
 8001f22:	2019      	movs	r0, #25
 8001f24:	f000 ffcd 	bl	8002ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001f28:	2019      	movs	r0, #25
 8001f2a:	f000 ffe6 	bl	8002efa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001f2e:	bf00      	nop
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40010000 	.word	0x40010000
 8001f3c:	40023800 	.word	0x40023800

08001f40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b08a      	sub	sp, #40	; 0x28
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f48:	f107 0314 	add.w	r3, r7, #20
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	60da      	str	r2, [r3, #12]
 8001f56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a1d      	ldr	r2, [pc, #116]	; (8001fd4 <HAL_UART_MspInit+0x94>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d134      	bne.n	8001fcc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	613b      	str	r3, [r7, #16]
 8001f66:	4b1c      	ldr	r3, [pc, #112]	; (8001fd8 <HAL_UART_MspInit+0x98>)
 8001f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6a:	4a1b      	ldr	r2, [pc, #108]	; (8001fd8 <HAL_UART_MspInit+0x98>)
 8001f6c:	f043 0310 	orr.w	r3, r3, #16
 8001f70:	6453      	str	r3, [r2, #68]	; 0x44
 8001f72:	4b19      	ldr	r3, [pc, #100]	; (8001fd8 <HAL_UART_MspInit+0x98>)
 8001f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f76:	f003 0310 	and.w	r3, r3, #16
 8001f7a:	613b      	str	r3, [r7, #16]
 8001f7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	4b15      	ldr	r3, [pc, #84]	; (8001fd8 <HAL_UART_MspInit+0x98>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	4a14      	ldr	r2, [pc, #80]	; (8001fd8 <HAL_UART_MspInit+0x98>)
 8001f88:	f043 0301 	orr.w	r3, r3, #1
 8001f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f8e:	4b12      	ldr	r3, [pc, #72]	; (8001fd8 <HAL_UART_MspInit+0x98>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001f9a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001f9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fac:	2307      	movs	r3, #7
 8001fae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb0:	f107 0314 	add.w	r3, r7, #20
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4809      	ldr	r0, [pc, #36]	; (8001fdc <HAL_UART_MspInit+0x9c>)
 8001fb8:	f001 fbbc 	bl	8003734 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	2025      	movs	r0, #37	; 0x25
 8001fc2:	f000 ff7e 	bl	8002ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001fc6:	2025      	movs	r0, #37	; 0x25
 8001fc8:	f000 ff97 	bl	8002efa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001fcc:	bf00      	nop
 8001fce:	3728      	adds	r7, #40	; 0x28
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40011000 	.word	0x40011000
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	40020000 	.word	0x40020000

08001fe0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fe4:	e7fe      	b.n	8001fe4 <NMI_Handler+0x4>

08001fe6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fea:	e7fe      	b.n	8001fea <HardFault_Handler+0x4>

08001fec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ff0:	e7fe      	b.n	8001ff0 <MemManage_Handler+0x4>

08001ff2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ff6:	e7fe      	b.n	8001ff6 <BusFault_Handler+0x4>

08001ff8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ffc:	e7fe      	b.n	8001ffc <UsageFault_Handler+0x4>

08001ffe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ffe:	b480      	push	{r7}
 8002000:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002002:	bf00      	nop
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800201a:	b480      	push	{r7}
 800201c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800202c:	f000 f8ee 	bl	800220c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002030:	bf00      	nop
 8002032:	bd80      	pop	{r7, pc}

08002034 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002038:	4802      	ldr	r0, [pc, #8]	; (8002044 <ADC_IRQHandler+0x10>)
 800203a:	f000 f96e 	bl	800231a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000088 	.word	0x20000088

08002048 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800204c:	4802      	ldr	r0, [pc, #8]	; (8002058 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800204e:	f002 fad7 	bl	8004600 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	20000130 	.word	0x20000130

0800205c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002060:	4802      	ldr	r0, [pc, #8]	; (800206c <USART1_IRQHandler+0x10>)
 8002062:	f002 ff83 	bl	8004f6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002066:	bf00      	nop
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	20000178 	.word	0x20000178

08002070 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002074:	4802      	ldr	r0, [pc, #8]	; (8002080 <DMA2_Stream0_IRQHandler+0x10>)
 8002076:	f001 f8f3 	bl	8003260 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800207a:	bf00      	nop
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	200000d0 	.word	0x200000d0

08002084 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800208c:	4a14      	ldr	r2, [pc, #80]	; (80020e0 <_sbrk+0x5c>)
 800208e:	4b15      	ldr	r3, [pc, #84]	; (80020e4 <_sbrk+0x60>)
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002098:	4b13      	ldr	r3, [pc, #76]	; (80020e8 <_sbrk+0x64>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d102      	bne.n	80020a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020a0:	4b11      	ldr	r3, [pc, #68]	; (80020e8 <_sbrk+0x64>)
 80020a2:	4a12      	ldr	r2, [pc, #72]	; (80020ec <_sbrk+0x68>)
 80020a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020a6:	4b10      	ldr	r3, [pc, #64]	; (80020e8 <_sbrk+0x64>)
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4413      	add	r3, r2
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d207      	bcs.n	80020c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020b4:	f003 fee8 	bl	8005e88 <__errno>
 80020b8:	4603      	mov	r3, r0
 80020ba:	220c      	movs	r2, #12
 80020bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020be:	f04f 33ff 	mov.w	r3, #4294967295
 80020c2:	e009      	b.n	80020d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020c4:	4b08      	ldr	r3, [pc, #32]	; (80020e8 <_sbrk+0x64>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020ca:	4b07      	ldr	r3, [pc, #28]	; (80020e8 <_sbrk+0x64>)
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4413      	add	r3, r2
 80020d2:	4a05      	ldr	r2, [pc, #20]	; (80020e8 <_sbrk+0x64>)
 80020d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020d6:	68fb      	ldr	r3, [r7, #12]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3718      	adds	r7, #24
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	20030000 	.word	0x20030000
 80020e4:	00000400 	.word	0x00000400
 80020e8:	20001b8c 	.word	0x20001b8c
 80020ec:	20001ce0 	.word	0x20001ce0

080020f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020f4:	4b06      	ldr	r3, [pc, #24]	; (8002110 <SystemInit+0x20>)
 80020f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020fa:	4a05      	ldr	r2, [pc, #20]	; (8002110 <SystemInit+0x20>)
 80020fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002100:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002104:	bf00      	nop
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	e000ed00 	.word	0xe000ed00

08002114 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002114:	f8df d034 	ldr.w	sp, [pc, #52]	; 800214c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002118:	f7ff ffea 	bl	80020f0 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800211c:	480c      	ldr	r0, [pc, #48]	; (8002150 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800211e:	490d      	ldr	r1, [pc, #52]	; (8002154 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002120:	4a0d      	ldr	r2, [pc, #52]	; (8002158 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002122:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002124:	e002      	b.n	800212c <LoopCopyDataInit>

08002126 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002126:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002128:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800212a:	3304      	adds	r3, #4

0800212c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800212c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800212e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002130:	d3f9      	bcc.n	8002126 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002132:	4a0a      	ldr	r2, [pc, #40]	; (800215c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002134:	4c0a      	ldr	r4, [pc, #40]	; (8002160 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002136:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002138:	e001      	b.n	800213e <LoopFillZerobss>

0800213a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800213a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800213c:	3204      	adds	r2, #4

0800213e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800213e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002140:	d3fb      	bcc.n	800213a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002142:	f003 fea7 	bl	8005e94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002146:	f7ff f93b 	bl	80013c0 <main>
  bx  lr    
 800214a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800214c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002150:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002154:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002158:	0800685c 	.word	0x0800685c
  ldr r2, =_sbss
 800215c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8002160:	20001cdc 	.word	0x20001cdc

08002164 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002164:	e7fe      	b.n	8002164 <CAN1_RX0_IRQHandler>
	...

08002168 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800216c:	4b0e      	ldr	r3, [pc, #56]	; (80021a8 <HAL_Init+0x40>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a0d      	ldr	r2, [pc, #52]	; (80021a8 <HAL_Init+0x40>)
 8002172:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002176:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002178:	4b0b      	ldr	r3, [pc, #44]	; (80021a8 <HAL_Init+0x40>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a0a      	ldr	r2, [pc, #40]	; (80021a8 <HAL_Init+0x40>)
 800217e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002182:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002184:	4b08      	ldr	r3, [pc, #32]	; (80021a8 <HAL_Init+0x40>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a07      	ldr	r2, [pc, #28]	; (80021a8 <HAL_Init+0x40>)
 800218a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800218e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002190:	2003      	movs	r0, #3
 8002192:	f000 fe8b 	bl	8002eac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002196:	2000      	movs	r0, #0
 8002198:	f000 f808 	bl	80021ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800219c:	f7ff fde4 	bl	8001d68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40023c00 	.word	0x40023c00

080021ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021b4:	4b12      	ldr	r3, [pc, #72]	; (8002200 <HAL_InitTick+0x54>)
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	4b12      	ldr	r3, [pc, #72]	; (8002204 <HAL_InitTick+0x58>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	4619      	mov	r1, r3
 80021be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80021c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ca:	4618      	mov	r0, r3
 80021cc:	f000 fea3 	bl	8002f16 <HAL_SYSTICK_Config>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e00e      	b.n	80021f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2b0f      	cmp	r3, #15
 80021de:	d80a      	bhi.n	80021f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021e0:	2200      	movs	r2, #0
 80021e2:	6879      	ldr	r1, [r7, #4]
 80021e4:	f04f 30ff 	mov.w	r0, #4294967295
 80021e8:	f000 fe6b 	bl	8002ec2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021ec:	4a06      	ldr	r2, [pc, #24]	; (8002208 <HAL_InitTick+0x5c>)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021f2:	2300      	movs	r3, #0
 80021f4:	e000      	b.n	80021f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	20000010 	.word	0x20000010
 8002204:	20000018 	.word	0x20000018
 8002208:	20000014 	.word	0x20000014

0800220c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002210:	4b06      	ldr	r3, [pc, #24]	; (800222c <HAL_IncTick+0x20>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	461a      	mov	r2, r3
 8002216:	4b06      	ldr	r3, [pc, #24]	; (8002230 <HAL_IncTick+0x24>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4413      	add	r3, r2
 800221c:	4a04      	ldr	r2, [pc, #16]	; (8002230 <HAL_IncTick+0x24>)
 800221e:	6013      	str	r3, [r2, #0]
}
 8002220:	bf00      	nop
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	20000018 	.word	0x20000018
 8002230:	20001b90 	.word	0x20001b90

08002234 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  return uwTick;
 8002238:	4b03      	ldr	r3, [pc, #12]	; (8002248 <HAL_GetTick+0x14>)
 800223a:	681b      	ldr	r3, [r3, #0]
}
 800223c:	4618      	mov	r0, r3
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	20001b90 	.word	0x20001b90

0800224c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002254:	f7ff ffee 	bl	8002234 <HAL_GetTick>
 8002258:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002264:	d005      	beq.n	8002272 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002266:	4b0a      	ldr	r3, [pc, #40]	; (8002290 <HAL_Delay+0x44>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	461a      	mov	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	4413      	add	r3, r2
 8002270:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002272:	bf00      	nop
 8002274:	f7ff ffde 	bl	8002234 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	429a      	cmp	r2, r3
 8002282:	d8f7      	bhi.n	8002274 <HAL_Delay+0x28>
  {
  }
}
 8002284:	bf00      	nop
 8002286:	bf00      	nop
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	20000018 	.word	0x20000018

08002294 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800229c:	2300      	movs	r3, #0
 800229e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e033      	b.n	8002312 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d109      	bne.n	80022c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7ff fd80 	bl	8001db8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	f003 0310 	and.w	r3, r3, #16
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d118      	bne.n	8002304 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022da:	f023 0302 	bic.w	r3, r3, #2
 80022de:	f043 0202 	orr.w	r2, r3, #2
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 fb88 	bl	80029fc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f6:	f023 0303 	bic.w	r3, r3, #3
 80022fa:	f043 0201 	orr.w	r2, r3, #1
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	641a      	str	r2, [r3, #64]	; 0x40
 8002302:	e001      	b.n	8002308 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002310:	7bfb      	ldrb	r3, [r7, #15]
}
 8002312:	4618      	mov	r0, r3
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b086      	sub	sp, #24
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002322:	2300      	movs	r3, #0
 8002324:	617b      	str	r3, [r7, #20]
 8002326:	2300      	movs	r3, #0
 8002328:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	f003 0320 	and.w	r3, r3, #32
 8002348:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d049      	beq.n	80023e4 <HAL_ADC_IRQHandler+0xca>
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d046      	beq.n	80023e4 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	f003 0310 	and.w	r3, r3, #16
 800235e:	2b00      	cmp	r3, #0
 8002360:	d105      	bne.n	800236e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d12b      	bne.n	80023d4 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002380:	2b00      	cmp	r3, #0
 8002382:	d127      	bne.n	80023d4 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800238e:	2b00      	cmp	r3, #0
 8002390:	d006      	beq.n	80023a0 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800239c:	2b00      	cmp	r3, #0
 800239e:	d119      	bne.n	80023d4 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	685a      	ldr	r2, [r3, #4]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f022 0220 	bic.w	r2, r2, #32
 80023ae:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d105      	bne.n	80023d4 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023cc:	f043 0201 	orr.w	r2, r3, #1
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f7fe fdc3 	bl	8000f60 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f06f 0212 	mvn.w	r2, #18
 80023e2:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f003 0304 	and.w	r3, r3, #4
 80023ea:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023f2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d057      	beq.n	80024aa <HAL_ADC_IRQHandler+0x190>
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d054      	beq.n	80024aa <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002404:	f003 0310 	and.w	r3, r3, #16
 8002408:	2b00      	cmp	r3, #0
 800240a:	d105      	bne.n	8002418 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002410:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d139      	bne.n	800249a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800242c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002430:	2b00      	cmp	r3, #0
 8002432:	d006      	beq.n	8002442 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800243e:	2b00      	cmp	r3, #0
 8002440:	d12b      	bne.n	800249a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800244c:	2b00      	cmp	r3, #0
 800244e:	d124      	bne.n	800249a <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800245a:	2b00      	cmp	r3, #0
 800245c:	d11d      	bne.n	800249a <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002462:	2b00      	cmp	r3, #0
 8002464:	d119      	bne.n	800249a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	685a      	ldr	r2, [r3, #4]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002474:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248a:	2b00      	cmp	r3, #0
 800248c:	d105      	bne.n	800249a <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002492:	f043 0201 	orr.w	r2, r3, #1
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 fc2c 	bl	8002cf8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f06f 020c 	mvn.w	r2, #12
 80024a8:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b8:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d017      	beq.n	80024f0 <HAL_ADC_IRQHandler+0x1d6>
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d014      	beq.n	80024f0 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d10d      	bne.n	80024f0 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f000 f945 	bl	8002770 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f06f 0201 	mvn.w	r2, #1
 80024ee:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f003 0320 	and.w	r3, r3, #32
 80024f6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024fe:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d015      	beq.n	8002532 <HAL_ADC_IRQHandler+0x218>
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d012      	beq.n	8002532 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002510:	f043 0202 	orr.w	r2, r3, #2
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f06f 0220 	mvn.w	r2, #32
 8002520:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 f92e 	bl	8002784 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f06f 0220 	mvn.w	r2, #32
 8002530:	601a      	str	r2, [r3, #0]
  }
}
 8002532:	bf00      	nop
 8002534:	3718      	adds	r7, #24
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
	...

0800253c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002548:	2300      	movs	r3, #0
 800254a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002552:	2b01      	cmp	r3, #1
 8002554:	d101      	bne.n	800255a <HAL_ADC_Start_DMA+0x1e>
 8002556:	2302      	movs	r3, #2
 8002558:	e0e9      	b.n	800272e <HAL_ADC_Start_DMA+0x1f2>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2201      	movs	r2, #1
 800255e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	2b01      	cmp	r3, #1
 800256e:	d018      	beq.n	80025a2 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	689a      	ldr	r2, [r3, #8]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f042 0201 	orr.w	r2, r2, #1
 800257e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002580:	4b6d      	ldr	r3, [pc, #436]	; (8002738 <HAL_ADC_Start_DMA+0x1fc>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a6d      	ldr	r2, [pc, #436]	; (800273c <HAL_ADC_Start_DMA+0x200>)
 8002586:	fba2 2303 	umull	r2, r3, r2, r3
 800258a:	0c9a      	lsrs	r2, r3, #18
 800258c:	4613      	mov	r3, r2
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	4413      	add	r3, r2
 8002592:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002594:	e002      	b.n	800259c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	3b01      	subs	r3, #1
 800259a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1f9      	bne.n	8002596 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025b0:	d107      	bne.n	80025c2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	689a      	ldr	r2, [r3, #8]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025c0:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	f040 80a1 	bne.w	8002714 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80025da:	f023 0301 	bic.w	r3, r3, #1
 80025de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d007      	beq.n	8002604 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025fc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002608:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800260c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002610:	d106      	bne.n	8002620 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002616:	f023 0206 	bic.w	r2, r3, #6
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	645a      	str	r2, [r3, #68]	; 0x44
 800261e:	e002      	b.n	8002626 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2200      	movs	r2, #0
 8002624:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800262e:	4b44      	ldr	r3, [pc, #272]	; (8002740 <HAL_ADC_Start_DMA+0x204>)
 8002630:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002636:	4a43      	ldr	r2, [pc, #268]	; (8002744 <HAL_ADC_Start_DMA+0x208>)
 8002638:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263e:	4a42      	ldr	r2, [pc, #264]	; (8002748 <HAL_ADC_Start_DMA+0x20c>)
 8002640:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002646:	4a41      	ldr	r2, [pc, #260]	; (800274c <HAL_ADC_Start_DMA+0x210>)
 8002648:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002652:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002662:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689a      	ldr	r2, [r3, #8]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002672:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	334c      	adds	r3, #76	; 0x4c
 800267e:	4619      	mov	r1, r3
 8002680:	68ba      	ldr	r2, [r7, #8]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f000 fd02 	bl	800308c <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f003 031f 	and.w	r3, r3, #31
 8002690:	2b00      	cmp	r3, #0
 8002692:	d12a      	bne.n	80026ea <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a2d      	ldr	r2, [pc, #180]	; (8002750 <HAL_ADC_Start_DMA+0x214>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d015      	beq.n	80026ca <HAL_ADC_Start_DMA+0x18e>
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a2c      	ldr	r2, [pc, #176]	; (8002754 <HAL_ADC_Start_DMA+0x218>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d105      	bne.n	80026b4 <HAL_ADC_Start_DMA+0x178>
 80026a8:	4b25      	ldr	r3, [pc, #148]	; (8002740 <HAL_ADC_Start_DMA+0x204>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f003 031f 	and.w	r3, r3, #31
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00a      	beq.n	80026ca <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a27      	ldr	r2, [pc, #156]	; (8002758 <HAL_ADC_Start_DMA+0x21c>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d136      	bne.n	800272c <HAL_ADC_Start_DMA+0x1f0>
 80026be:	4b20      	ldr	r3, [pc, #128]	; (8002740 <HAL_ADC_Start_DMA+0x204>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f003 0310 	and.w	r3, r3, #16
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d130      	bne.n	800272c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d129      	bne.n	800272c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689a      	ldr	r2, [r3, #8]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	e020      	b.n	800272c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a18      	ldr	r2, [pc, #96]	; (8002750 <HAL_ADC_Start_DMA+0x214>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d11b      	bne.n	800272c <HAL_ADC_Start_DMA+0x1f0>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d114      	bne.n	800272c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	689a      	ldr	r2, [r3, #8]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002710:	609a      	str	r2, [r3, #8]
 8002712:	e00b      	b.n	800272c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002718:	f043 0210 	orr.w	r2, r3, #16
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002724:	f043 0201 	orr.w	r2, r3, #1
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3718      	adds	r7, #24
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	20000010 	.word	0x20000010
 800273c:	431bde83 	.word	0x431bde83
 8002740:	40012300 	.word	0x40012300
 8002744:	08002bf5 	.word	0x08002bf5
 8002748:	08002caf 	.word	0x08002caf
 800274c:	08002ccb 	.word	0x08002ccb
 8002750:	40012000 	.word	0x40012000
 8002754:	40012100 	.word	0x40012100
 8002758:	40012200 	.word	0x40012200

0800275c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002764:	bf00      	nop
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80027a2:	2300      	movs	r3, #0
 80027a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d101      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x1c>
 80027b0:	2302      	movs	r3, #2
 80027b2:	e113      	b.n	80029dc <HAL_ADC_ConfigChannel+0x244>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2b09      	cmp	r3, #9
 80027c2:	d925      	bls.n	8002810 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68d9      	ldr	r1, [r3, #12]
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	461a      	mov	r2, r3
 80027d2:	4613      	mov	r3, r2
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	4413      	add	r3, r2
 80027d8:	3b1e      	subs	r3, #30
 80027da:	2207      	movs	r2, #7
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	43da      	mvns	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	400a      	ands	r2, r1
 80027e8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68d9      	ldr	r1, [r3, #12]
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	4618      	mov	r0, r3
 80027fc:	4603      	mov	r3, r0
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	4403      	add	r3, r0
 8002802:	3b1e      	subs	r3, #30
 8002804:	409a      	lsls	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	430a      	orrs	r2, r1
 800280c:	60da      	str	r2, [r3, #12]
 800280e:	e022      	b.n	8002856 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	6919      	ldr	r1, [r3, #16]
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	b29b      	uxth	r3, r3
 800281c:	461a      	mov	r2, r3
 800281e:	4613      	mov	r3, r2
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	4413      	add	r3, r2
 8002824:	2207      	movs	r2, #7
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	43da      	mvns	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	400a      	ands	r2, r1
 8002832:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6919      	ldr	r1, [r3, #16]
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	689a      	ldr	r2, [r3, #8]
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	b29b      	uxth	r3, r3
 8002844:	4618      	mov	r0, r3
 8002846:	4603      	mov	r3, r0
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	4403      	add	r3, r0
 800284c:	409a      	lsls	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	430a      	orrs	r2, r1
 8002854:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	2b06      	cmp	r3, #6
 800285c:	d824      	bhi.n	80028a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685a      	ldr	r2, [r3, #4]
 8002868:	4613      	mov	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4413      	add	r3, r2
 800286e:	3b05      	subs	r3, #5
 8002870:	221f      	movs	r2, #31
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	43da      	mvns	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	400a      	ands	r2, r1
 800287e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	b29b      	uxth	r3, r3
 800288c:	4618      	mov	r0, r3
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685a      	ldr	r2, [r3, #4]
 8002892:	4613      	mov	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	3b05      	subs	r3, #5
 800289a:	fa00 f203 	lsl.w	r2, r0, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	430a      	orrs	r2, r1
 80028a4:	635a      	str	r2, [r3, #52]	; 0x34
 80028a6:	e04c      	b.n	8002942 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	2b0c      	cmp	r3, #12
 80028ae:	d824      	bhi.n	80028fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	4613      	mov	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4413      	add	r3, r2
 80028c0:	3b23      	subs	r3, #35	; 0x23
 80028c2:	221f      	movs	r2, #31
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	43da      	mvns	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	400a      	ands	r2, r1
 80028d0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	b29b      	uxth	r3, r3
 80028de:	4618      	mov	r0, r3
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	4613      	mov	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4413      	add	r3, r2
 80028ea:	3b23      	subs	r3, #35	; 0x23
 80028ec:	fa00 f203 	lsl.w	r2, r0, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	631a      	str	r2, [r3, #48]	; 0x30
 80028f8:	e023      	b.n	8002942 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685a      	ldr	r2, [r3, #4]
 8002904:	4613      	mov	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	4413      	add	r3, r2
 800290a:	3b41      	subs	r3, #65	; 0x41
 800290c:	221f      	movs	r2, #31
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	43da      	mvns	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	400a      	ands	r2, r1
 800291a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	b29b      	uxth	r3, r3
 8002928:	4618      	mov	r0, r3
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	4613      	mov	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4413      	add	r3, r2
 8002934:	3b41      	subs	r3, #65	; 0x41
 8002936:	fa00 f203 	lsl.w	r2, r0, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	430a      	orrs	r2, r1
 8002940:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002942:	4b29      	ldr	r3, [pc, #164]	; (80029e8 <HAL_ADC_ConfigChannel+0x250>)
 8002944:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a28      	ldr	r2, [pc, #160]	; (80029ec <HAL_ADC_ConfigChannel+0x254>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d10f      	bne.n	8002970 <HAL_ADC_ConfigChannel+0x1d8>
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2b12      	cmp	r3, #18
 8002956:	d10b      	bne.n	8002970 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a1d      	ldr	r2, [pc, #116]	; (80029ec <HAL_ADC_ConfigChannel+0x254>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d12b      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x23a>
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a1c      	ldr	r2, [pc, #112]	; (80029f0 <HAL_ADC_ConfigChannel+0x258>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d003      	beq.n	800298c <HAL_ADC_ConfigChannel+0x1f4>
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2b11      	cmp	r3, #17
 800298a:	d122      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a11      	ldr	r2, [pc, #68]	; (80029f0 <HAL_ADC_ConfigChannel+0x258>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d111      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80029ae:	4b11      	ldr	r3, [pc, #68]	; (80029f4 <HAL_ADC_ConfigChannel+0x25c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a11      	ldr	r2, [pc, #68]	; (80029f8 <HAL_ADC_ConfigChannel+0x260>)
 80029b4:	fba2 2303 	umull	r2, r3, r2, r3
 80029b8:	0c9a      	lsrs	r2, r3, #18
 80029ba:	4613      	mov	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4413      	add	r3, r2
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80029c4:	e002      	b.n	80029cc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	3b01      	subs	r3, #1
 80029ca:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1f9      	bne.n	80029c6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3714      	adds	r7, #20
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	40012300 	.word	0x40012300
 80029ec:	40012000 	.word	0x40012000
 80029f0:	10000012 	.word	0x10000012
 80029f4:	20000010 	.word	0x20000010
 80029f8:	431bde83 	.word	0x431bde83

080029fc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a04:	4b79      	ldr	r3, [pc, #484]	; (8002bec <ADC_Init+0x1f0>)
 8002a06:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	685a      	ldr	r2, [r3, #4]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	431a      	orrs	r2, r3
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	685a      	ldr	r2, [r3, #4]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6859      	ldr	r1, [r3, #4]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	021a      	lsls	r2, r3, #8
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002a54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	6859      	ldr	r1, [r3, #4]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	430a      	orrs	r2, r1
 8002a66:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	689a      	ldr	r2, [r3, #8]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6899      	ldr	r1, [r3, #8]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	68da      	ldr	r2, [r3, #12]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a8e:	4a58      	ldr	r2, [pc, #352]	; (8002bf0 <ADC_Init+0x1f4>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d022      	beq.n	8002ada <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689a      	ldr	r2, [r3, #8]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002aa2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6899      	ldr	r1, [r3, #8]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ac4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	6899      	ldr	r1, [r3, #8]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	609a      	str	r2, [r3, #8]
 8002ad8:	e00f      	b.n	8002afa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ae8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002af8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	689a      	ldr	r2, [r3, #8]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f022 0202 	bic.w	r2, r2, #2
 8002b08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6899      	ldr	r1, [r3, #8]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	7e1b      	ldrb	r3, [r3, #24]
 8002b14:	005a      	lsls	r2, r3, #1
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d01b      	beq.n	8002b60 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	685a      	ldr	r2, [r3, #4]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b36:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	685a      	ldr	r2, [r3, #4]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002b46:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	6859      	ldr	r1, [r3, #4]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b52:	3b01      	subs	r3, #1
 8002b54:	035a      	lsls	r2, r3, #13
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	605a      	str	r2, [r3, #4]
 8002b5e:	e007      	b.n	8002b70 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	685a      	ldr	r2, [r3, #4]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b6e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002b7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	69db      	ldr	r3, [r3, #28]
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	051a      	lsls	r2, r3, #20
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689a      	ldr	r2, [r3, #8]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ba4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	6899      	ldr	r1, [r3, #8]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002bb2:	025a      	lsls	r2, r3, #9
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689a      	ldr	r2, [r3, #8]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6899      	ldr	r1, [r3, #8]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	029a      	lsls	r2, r3, #10
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	609a      	str	r2, [r3, #8]
}
 8002be0:	bf00      	nop
 8002be2:	3714      	adds	r7, #20
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	40012300 	.word	0x40012300
 8002bf0:	0f000001 	.word	0x0f000001

08002bf4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c00:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d13c      	bne.n	8002c88 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c12:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d12b      	bne.n	8002c80 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d127      	bne.n	8002c80 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c36:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d006      	beq.n	8002c4c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d119      	bne.n	8002c80 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	685a      	ldr	r2, [r3, #4]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f022 0220 	bic.w	r2, r2, #32
 8002c5a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d105      	bne.n	8002c80 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c78:	f043 0201 	orr.w	r2, r3, #1
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f7fe f96d 	bl	8000f60 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002c86:	e00e      	b.n	8002ca6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8c:	f003 0310 	and.w	r3, r3, #16
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d003      	beq.n	8002c9c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f7ff fd75 	bl	8002784 <HAL_ADC_ErrorCallback>
}
 8002c9a:	e004      	b.n	8002ca6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	4798      	blx	r3
}
 8002ca6:	bf00      	nop
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b084      	sub	sp, #16
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cba:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f7ff fd4d 	bl	800275c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cc2:	bf00      	nop
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b084      	sub	sp, #16
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd6:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2240      	movs	r2, #64	; 0x40
 8002cdc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce2:	f043 0204 	orr.w	r2, r3, #4
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f7ff fd4a 	bl	8002784 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cf0:	bf00      	nop
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f003 0307 	and.w	r3, r3, #7
 8002d1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d1c:	4b0c      	ldr	r3, [pc, #48]	; (8002d50 <__NVIC_SetPriorityGrouping+0x44>)
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d22:	68ba      	ldr	r2, [r7, #8]
 8002d24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d28:	4013      	ands	r3, r2
 8002d2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d3e:	4a04      	ldr	r2, [pc, #16]	; (8002d50 <__NVIC_SetPriorityGrouping+0x44>)
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	60d3      	str	r3, [r2, #12]
}
 8002d44:	bf00      	nop
 8002d46:	3714      	adds	r7, #20
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	e000ed00 	.word	0xe000ed00

08002d54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d58:	4b04      	ldr	r3, [pc, #16]	; (8002d6c <__NVIC_GetPriorityGrouping+0x18>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	0a1b      	lsrs	r3, r3, #8
 8002d5e:	f003 0307 	and.w	r3, r3, #7
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr
 8002d6c:	e000ed00 	.word	0xe000ed00

08002d70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	4603      	mov	r3, r0
 8002d78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	db0b      	blt.n	8002d9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d82:	79fb      	ldrb	r3, [r7, #7]
 8002d84:	f003 021f 	and.w	r2, r3, #31
 8002d88:	4907      	ldr	r1, [pc, #28]	; (8002da8 <__NVIC_EnableIRQ+0x38>)
 8002d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8e:	095b      	lsrs	r3, r3, #5
 8002d90:	2001      	movs	r0, #1
 8002d92:	fa00 f202 	lsl.w	r2, r0, r2
 8002d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d9a:	bf00      	nop
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	e000e100 	.word	0xe000e100

08002dac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	4603      	mov	r3, r0
 8002db4:	6039      	str	r1, [r7, #0]
 8002db6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	db0a      	blt.n	8002dd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	b2da      	uxtb	r2, r3
 8002dc4:	490c      	ldr	r1, [pc, #48]	; (8002df8 <__NVIC_SetPriority+0x4c>)
 8002dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dca:	0112      	lsls	r2, r2, #4
 8002dcc:	b2d2      	uxtb	r2, r2
 8002dce:	440b      	add	r3, r1
 8002dd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dd4:	e00a      	b.n	8002dec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	4908      	ldr	r1, [pc, #32]	; (8002dfc <__NVIC_SetPriority+0x50>)
 8002ddc:	79fb      	ldrb	r3, [r7, #7]
 8002dde:	f003 030f 	and.w	r3, r3, #15
 8002de2:	3b04      	subs	r3, #4
 8002de4:	0112      	lsls	r2, r2, #4
 8002de6:	b2d2      	uxtb	r2, r2
 8002de8:	440b      	add	r3, r1
 8002dea:	761a      	strb	r2, [r3, #24]
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr
 8002df8:	e000e100 	.word	0xe000e100
 8002dfc:	e000ed00 	.word	0xe000ed00

08002e00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b089      	sub	sp, #36	; 0x24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f003 0307 	and.w	r3, r3, #7
 8002e12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	f1c3 0307 	rsb	r3, r3, #7
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	bf28      	it	cs
 8002e1e:	2304      	movcs	r3, #4
 8002e20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	3304      	adds	r3, #4
 8002e26:	2b06      	cmp	r3, #6
 8002e28:	d902      	bls.n	8002e30 <NVIC_EncodePriority+0x30>
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	3b03      	subs	r3, #3
 8002e2e:	e000      	b.n	8002e32 <NVIC_EncodePriority+0x32>
 8002e30:	2300      	movs	r3, #0
 8002e32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e34:	f04f 32ff 	mov.w	r2, #4294967295
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3e:	43da      	mvns	r2, r3
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	401a      	ands	r2, r3
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e48:	f04f 31ff 	mov.w	r1, #4294967295
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e52:	43d9      	mvns	r1, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e58:	4313      	orrs	r3, r2
         );
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3724      	adds	r7, #36	; 0x24
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
	...

08002e68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3b01      	subs	r3, #1
 8002e74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e78:	d301      	bcc.n	8002e7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e00f      	b.n	8002e9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e7e:	4a0a      	ldr	r2, [pc, #40]	; (8002ea8 <SysTick_Config+0x40>)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	3b01      	subs	r3, #1
 8002e84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e86:	210f      	movs	r1, #15
 8002e88:	f04f 30ff 	mov.w	r0, #4294967295
 8002e8c:	f7ff ff8e 	bl	8002dac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e90:	4b05      	ldr	r3, [pc, #20]	; (8002ea8 <SysTick_Config+0x40>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e96:	4b04      	ldr	r3, [pc, #16]	; (8002ea8 <SysTick_Config+0x40>)
 8002e98:	2207      	movs	r2, #7
 8002e9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	e000e010 	.word	0xe000e010

08002eac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f7ff ff29 	bl	8002d0c <__NVIC_SetPriorityGrouping>
}
 8002eba:	bf00      	nop
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b086      	sub	sp, #24
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	4603      	mov	r3, r0
 8002eca:	60b9      	str	r1, [r7, #8]
 8002ecc:	607a      	str	r2, [r7, #4]
 8002ece:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ed4:	f7ff ff3e 	bl	8002d54 <__NVIC_GetPriorityGrouping>
 8002ed8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	68b9      	ldr	r1, [r7, #8]
 8002ede:	6978      	ldr	r0, [r7, #20]
 8002ee0:	f7ff ff8e 	bl	8002e00 <NVIC_EncodePriority>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eea:	4611      	mov	r1, r2
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff ff5d 	bl	8002dac <__NVIC_SetPriority>
}
 8002ef2:	bf00      	nop
 8002ef4:	3718      	adds	r7, #24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b082      	sub	sp, #8
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	4603      	mov	r3, r0
 8002f02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7ff ff31 	bl	8002d70 <__NVIC_EnableIRQ>
}
 8002f0e:	bf00      	nop
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b082      	sub	sp, #8
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f7ff ffa2 	bl	8002e68 <SysTick_Config>
 8002f24:	4603      	mov	r3, r0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
	...

08002f30 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f3c:	f7ff f97a 	bl	8002234 <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d101      	bne.n	8002f4c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e099      	b.n	8003080 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2202      	movs	r2, #2
 8002f50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 0201 	bic.w	r2, r2, #1
 8002f6a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f6c:	e00f      	b.n	8002f8e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f6e:	f7ff f961 	bl	8002234 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b05      	cmp	r3, #5
 8002f7a:	d908      	bls.n	8002f8e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2220      	movs	r2, #32
 8002f80:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2203      	movs	r2, #3
 8002f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e078      	b.n	8003080 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1e8      	bne.n	8002f6e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	4b38      	ldr	r3, [pc, #224]	; (8003088 <HAL_DMA_Init+0x158>)
 8002fa8:	4013      	ands	r3, r2
 8002faa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
 8002fd8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe4:	2b04      	cmp	r3, #4
 8002fe6:	d107      	bne.n	8002ff8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	697a      	ldr	r2, [r7, #20]
 8002ffe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	f023 0307 	bic.w	r3, r3, #7
 800300e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003014:	697a      	ldr	r2, [r7, #20]
 8003016:	4313      	orrs	r3, r2
 8003018:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301e:	2b04      	cmp	r3, #4
 8003020:	d117      	bne.n	8003052 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	4313      	orrs	r3, r2
 800302a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00e      	beq.n	8003052 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f000 fb01 	bl	800363c <DMA_CheckFifoParam>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d008      	beq.n	8003052 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2240      	movs	r2, #64	; 0x40
 8003044:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2201      	movs	r2, #1
 800304a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800304e:	2301      	movs	r3, #1
 8003050:	e016      	b.n	8003080 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 fab8 	bl	80035d0 <DMA_CalcBaseAndBitshift>
 8003060:	4603      	mov	r3, r0
 8003062:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003068:	223f      	movs	r2, #63	; 0x3f
 800306a:	409a      	lsls	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3718      	adds	r7, #24
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	f010803f 	.word	0xf010803f

0800308c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
 8003098:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800309a:	2300      	movs	r3, #0
 800309c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d101      	bne.n	80030b2 <HAL_DMA_Start_IT+0x26>
 80030ae:	2302      	movs	r3, #2
 80030b0:	e040      	b.n	8003134 <HAL_DMA_Start_IT+0xa8>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2201      	movs	r2, #1
 80030b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d12f      	bne.n	8003126 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2202      	movs	r2, #2
 80030ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	68b9      	ldr	r1, [r7, #8]
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f000 fa4a 	bl	8003574 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e4:	223f      	movs	r2, #63	; 0x3f
 80030e6:	409a      	lsls	r2, r3
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f042 0216 	orr.w	r2, r2, #22
 80030fa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003100:	2b00      	cmp	r3, #0
 8003102:	d007      	beq.n	8003114 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f042 0208 	orr.w	r2, r2, #8
 8003112:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f042 0201 	orr.w	r2, r2, #1
 8003122:	601a      	str	r2, [r3, #0]
 8003124:	e005      	b.n	8003132 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800312e:	2302      	movs	r3, #2
 8003130:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003132:	7dfb      	ldrb	r3, [r7, #23]
}
 8003134:	4618      	mov	r0, r3
 8003136:	3718      	adds	r7, #24
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003148:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800314a:	f7ff f873 	bl	8002234 <HAL_GetTick>
 800314e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003156:	b2db      	uxtb	r3, r3
 8003158:	2b02      	cmp	r3, #2
 800315a:	d008      	beq.n	800316e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2280      	movs	r2, #128	; 0x80
 8003160:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e052      	b.n	8003214 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f022 0216 	bic.w	r2, r2, #22
 800317c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	695a      	ldr	r2, [r3, #20]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800318c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	2b00      	cmp	r3, #0
 8003194:	d103      	bne.n	800319e <HAL_DMA_Abort+0x62>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800319a:	2b00      	cmp	r3, #0
 800319c:	d007      	beq.n	80031ae <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 0208 	bic.w	r2, r2, #8
 80031ac:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f022 0201 	bic.w	r2, r2, #1
 80031bc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031be:	e013      	b.n	80031e8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031c0:	f7ff f838 	bl	8002234 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b05      	cmp	r3, #5
 80031cc:	d90c      	bls.n	80031e8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2220      	movs	r2, #32
 80031d2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2203      	movs	r2, #3
 80031d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e015      	b.n	8003214 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1e4      	bne.n	80031c0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031fa:	223f      	movs	r2, #63	; 0x3f
 80031fc:	409a      	lsls	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d004      	beq.n	800323a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2280      	movs	r2, #128	; 0x80
 8003234:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e00c      	b.n	8003254 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2205      	movs	r2, #5
 800323e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 0201 	bic.w	r2, r2, #1
 8003250:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003268:	2300      	movs	r3, #0
 800326a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800326c:	4b8e      	ldr	r3, [pc, #568]	; (80034a8 <HAL_DMA_IRQHandler+0x248>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a8e      	ldr	r2, [pc, #568]	; (80034ac <HAL_DMA_IRQHandler+0x24c>)
 8003272:	fba2 2303 	umull	r2, r3, r2, r3
 8003276:	0a9b      	lsrs	r3, r3, #10
 8003278:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800327e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800328a:	2208      	movs	r2, #8
 800328c:	409a      	lsls	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	4013      	ands	r3, r2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d01a      	beq.n	80032cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d013      	beq.n	80032cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f022 0204 	bic.w	r2, r2, #4
 80032b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b8:	2208      	movs	r2, #8
 80032ba:	409a      	lsls	r2, r3
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c4:	f043 0201 	orr.w	r2, r3, #1
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d0:	2201      	movs	r2, #1
 80032d2:	409a      	lsls	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	4013      	ands	r3, r2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d012      	beq.n	8003302 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00b      	beq.n	8003302 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ee:	2201      	movs	r2, #1
 80032f0:	409a      	lsls	r2, r3
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032fa:	f043 0202 	orr.w	r2, r3, #2
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003306:	2204      	movs	r2, #4
 8003308:	409a      	lsls	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	4013      	ands	r3, r2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d012      	beq.n	8003338 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00b      	beq.n	8003338 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003324:	2204      	movs	r2, #4
 8003326:	409a      	lsls	r2, r3
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003330:	f043 0204 	orr.w	r2, r3, #4
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333c:	2210      	movs	r2, #16
 800333e:	409a      	lsls	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	4013      	ands	r3, r2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d043      	beq.n	80033d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0308 	and.w	r3, r3, #8
 8003352:	2b00      	cmp	r3, #0
 8003354:	d03c      	beq.n	80033d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800335a:	2210      	movs	r2, #16
 800335c:	409a      	lsls	r2, r3
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d018      	beq.n	80033a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d108      	bne.n	8003390 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	2b00      	cmp	r3, #0
 8003384:	d024      	beq.n	80033d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	4798      	blx	r3
 800338e:	e01f      	b.n	80033d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003394:	2b00      	cmp	r3, #0
 8003396:	d01b      	beq.n	80033d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	4798      	blx	r3
 80033a0:	e016      	b.n	80033d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d107      	bne.n	80033c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f022 0208 	bic.w	r2, r2, #8
 80033be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d003      	beq.n	80033d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d4:	2220      	movs	r2, #32
 80033d6:	409a      	lsls	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	4013      	ands	r3, r2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f000 808f 	beq.w	8003500 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0310 	and.w	r3, r3, #16
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f000 8087 	beq.w	8003500 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f6:	2220      	movs	r2, #32
 80033f8:	409a      	lsls	r2, r3
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b05      	cmp	r3, #5
 8003408:	d136      	bne.n	8003478 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 0216 	bic.w	r2, r2, #22
 8003418:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	695a      	ldr	r2, [r3, #20]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003428:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	2b00      	cmp	r3, #0
 8003430:	d103      	bne.n	800343a <HAL_DMA_IRQHandler+0x1da>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003436:	2b00      	cmp	r3, #0
 8003438:	d007      	beq.n	800344a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f022 0208 	bic.w	r2, r2, #8
 8003448:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800344e:	223f      	movs	r2, #63	; 0x3f
 8003450:	409a      	lsls	r2, r3
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800346a:	2b00      	cmp	r3, #0
 800346c:	d07e      	beq.n	800356c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	4798      	blx	r3
        }
        return;
 8003476:	e079      	b.n	800356c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d01d      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10d      	bne.n	80034b0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003498:	2b00      	cmp	r3, #0
 800349a:	d031      	beq.n	8003500 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	4798      	blx	r3
 80034a4:	e02c      	b.n	8003500 <HAL_DMA_IRQHandler+0x2a0>
 80034a6:	bf00      	nop
 80034a8:	20000010 	.word	0x20000010
 80034ac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d023      	beq.n	8003500 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	4798      	blx	r3
 80034c0:	e01e      	b.n	8003500 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d10f      	bne.n	80034f0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0210 	bic.w	r2, r2, #16
 80034de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d003      	beq.n	8003500 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003504:	2b00      	cmp	r3, #0
 8003506:	d032      	beq.n	800356e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	2b00      	cmp	r3, #0
 8003512:	d022      	beq.n	800355a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2205      	movs	r2, #5
 8003518:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 0201 	bic.w	r2, r2, #1
 800352a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	3301      	adds	r3, #1
 8003530:	60bb      	str	r3, [r7, #8]
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	429a      	cmp	r2, r3
 8003536:	d307      	bcc.n	8003548 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1f2      	bne.n	800352c <HAL_DMA_IRQHandler+0x2cc>
 8003546:	e000      	b.n	800354a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003548:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800355e:	2b00      	cmp	r3, #0
 8003560:	d005      	beq.n	800356e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	4798      	blx	r3
 800356a:	e000      	b.n	800356e <HAL_DMA_IRQHandler+0x30e>
        return;
 800356c:	bf00      	nop
    }
  }
}
 800356e:	3718      	adds	r7, #24
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
 8003580:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003590:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	683a      	ldr	r2, [r7, #0]
 8003598:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	2b40      	cmp	r3, #64	; 0x40
 80035a0:	d108      	bne.n	80035b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68ba      	ldr	r2, [r7, #8]
 80035b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80035b2:	e007      	b.n	80035c4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68ba      	ldr	r2, [r7, #8]
 80035ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	60da      	str	r2, [r3, #12]
}
 80035c4:	bf00      	nop
 80035c6:	3714      	adds	r7, #20
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	3b10      	subs	r3, #16
 80035e0:	4a14      	ldr	r2, [pc, #80]	; (8003634 <DMA_CalcBaseAndBitshift+0x64>)
 80035e2:	fba2 2303 	umull	r2, r3, r2, r3
 80035e6:	091b      	lsrs	r3, r3, #4
 80035e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80035ea:	4a13      	ldr	r2, [pc, #76]	; (8003638 <DMA_CalcBaseAndBitshift+0x68>)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	4413      	add	r3, r2
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	461a      	mov	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2b03      	cmp	r3, #3
 80035fc:	d909      	bls.n	8003612 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003606:	f023 0303 	bic.w	r3, r3, #3
 800360a:	1d1a      	adds	r2, r3, #4
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	659a      	str	r2, [r3, #88]	; 0x58
 8003610:	e007      	b.n	8003622 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800361a:	f023 0303 	bic.w	r3, r3, #3
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003626:	4618      	mov	r0, r3
 8003628:	3714      	adds	r7, #20
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	aaaaaaab 	.word	0xaaaaaaab
 8003638:	08006810 	.word	0x08006810

0800363c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003644:	2300      	movs	r3, #0
 8003646:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d11f      	bne.n	8003696 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	2b03      	cmp	r3, #3
 800365a:	d856      	bhi.n	800370a <DMA_CheckFifoParam+0xce>
 800365c:	a201      	add	r2, pc, #4	; (adr r2, 8003664 <DMA_CheckFifoParam+0x28>)
 800365e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003662:	bf00      	nop
 8003664:	08003675 	.word	0x08003675
 8003668:	08003687 	.word	0x08003687
 800366c:	08003675 	.word	0x08003675
 8003670:	0800370b 	.word	0x0800370b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003678:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d046      	beq.n	800370e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003684:	e043      	b.n	800370e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800368e:	d140      	bne.n	8003712 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003694:	e03d      	b.n	8003712 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800369e:	d121      	bne.n	80036e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	2b03      	cmp	r3, #3
 80036a4:	d837      	bhi.n	8003716 <DMA_CheckFifoParam+0xda>
 80036a6:	a201      	add	r2, pc, #4	; (adr r2, 80036ac <DMA_CheckFifoParam+0x70>)
 80036a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ac:	080036bd 	.word	0x080036bd
 80036b0:	080036c3 	.word	0x080036c3
 80036b4:	080036bd 	.word	0x080036bd
 80036b8:	080036d5 	.word	0x080036d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	73fb      	strb	r3, [r7, #15]
      break;
 80036c0:	e030      	b.n	8003724 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d025      	beq.n	800371a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036d2:	e022      	b.n	800371a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036dc:	d11f      	bne.n	800371e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80036e2:	e01c      	b.n	800371e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d903      	bls.n	80036f2 <DMA_CheckFifoParam+0xb6>
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	2b03      	cmp	r3, #3
 80036ee:	d003      	beq.n	80036f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80036f0:	e018      	b.n	8003724 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	73fb      	strb	r3, [r7, #15]
      break;
 80036f6:	e015      	b.n	8003724 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00e      	beq.n	8003722 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	73fb      	strb	r3, [r7, #15]
      break;
 8003708:	e00b      	b.n	8003722 <DMA_CheckFifoParam+0xe6>
      break;
 800370a:	bf00      	nop
 800370c:	e00a      	b.n	8003724 <DMA_CheckFifoParam+0xe8>
      break;
 800370e:	bf00      	nop
 8003710:	e008      	b.n	8003724 <DMA_CheckFifoParam+0xe8>
      break;
 8003712:	bf00      	nop
 8003714:	e006      	b.n	8003724 <DMA_CheckFifoParam+0xe8>
      break;
 8003716:	bf00      	nop
 8003718:	e004      	b.n	8003724 <DMA_CheckFifoParam+0xe8>
      break;
 800371a:	bf00      	nop
 800371c:	e002      	b.n	8003724 <DMA_CheckFifoParam+0xe8>
      break;   
 800371e:	bf00      	nop
 8003720:	e000      	b.n	8003724 <DMA_CheckFifoParam+0xe8>
      break;
 8003722:	bf00      	nop
    }
  } 
  
  return status; 
 8003724:	7bfb      	ldrb	r3, [r7, #15]
}
 8003726:	4618      	mov	r0, r3
 8003728:	3714      	adds	r7, #20
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop

08003734 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003734:	b480      	push	{r7}
 8003736:	b089      	sub	sp, #36	; 0x24
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800373e:	2300      	movs	r3, #0
 8003740:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003742:	2300      	movs	r3, #0
 8003744:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003746:	2300      	movs	r3, #0
 8003748:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800374a:	2300      	movs	r3, #0
 800374c:	61fb      	str	r3, [r7, #28]
 800374e:	e177      	b.n	8003a40 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003750:	2201      	movs	r2, #1
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	fa02 f303 	lsl.w	r3, r2, r3
 8003758:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	4013      	ands	r3, r2
 8003762:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	429a      	cmp	r2, r3
 800376a:	f040 8166 	bne.w	8003a3a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f003 0303 	and.w	r3, r3, #3
 8003776:	2b01      	cmp	r3, #1
 8003778:	d005      	beq.n	8003786 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003782:	2b02      	cmp	r3, #2
 8003784:	d130      	bne.n	80037e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	2203      	movs	r2, #3
 8003792:	fa02 f303 	lsl.w	r3, r2, r3
 8003796:	43db      	mvns	r3, r3
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	4013      	ands	r3, r2
 800379c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	68da      	ldr	r2, [r3, #12]
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	fa02 f303 	lsl.w	r3, r2, r3
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	69ba      	ldr	r2, [r7, #24]
 80037b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037bc:	2201      	movs	r2, #1
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	43db      	mvns	r3, r3
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	4013      	ands	r3, r2
 80037ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	091b      	lsrs	r3, r3, #4
 80037d2:	f003 0201 	and.w	r2, r3, #1
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	4313      	orrs	r3, r2
 80037e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f003 0303 	and.w	r3, r3, #3
 80037f0:	2b03      	cmp	r3, #3
 80037f2:	d017      	beq.n	8003824 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	2203      	movs	r2, #3
 8003800:	fa02 f303 	lsl.w	r3, r2, r3
 8003804:	43db      	mvns	r3, r3
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	4013      	ands	r3, r2
 800380a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	fa02 f303 	lsl.w	r3, r2, r3
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	4313      	orrs	r3, r2
 800381c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f003 0303 	and.w	r3, r3, #3
 800382c:	2b02      	cmp	r3, #2
 800382e:	d123      	bne.n	8003878 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	08da      	lsrs	r2, r3, #3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	3208      	adds	r2, #8
 8003838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800383c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	f003 0307 	and.w	r3, r3, #7
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	220f      	movs	r2, #15
 8003848:	fa02 f303 	lsl.w	r3, r2, r3
 800384c:	43db      	mvns	r3, r3
 800384e:	69ba      	ldr	r2, [r7, #24]
 8003850:	4013      	ands	r3, r2
 8003852:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	691a      	ldr	r2, [r3, #16]
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	f003 0307 	and.w	r3, r3, #7
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	4313      	orrs	r3, r2
 8003868:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	08da      	lsrs	r2, r3, #3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	3208      	adds	r2, #8
 8003872:	69b9      	ldr	r1, [r7, #24]
 8003874:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	005b      	lsls	r3, r3, #1
 8003882:	2203      	movs	r2, #3
 8003884:	fa02 f303 	lsl.w	r3, r2, r3
 8003888:	43db      	mvns	r3, r3
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	4013      	ands	r3, r2
 800388e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f003 0203 	and.w	r2, r3, #3
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	fa02 f303 	lsl.w	r3, r2, r3
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f000 80c0 	beq.w	8003a3a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038ba:	2300      	movs	r3, #0
 80038bc:	60fb      	str	r3, [r7, #12]
 80038be:	4b66      	ldr	r3, [pc, #408]	; (8003a58 <HAL_GPIO_Init+0x324>)
 80038c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c2:	4a65      	ldr	r2, [pc, #404]	; (8003a58 <HAL_GPIO_Init+0x324>)
 80038c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038c8:	6453      	str	r3, [r2, #68]	; 0x44
 80038ca:	4b63      	ldr	r3, [pc, #396]	; (8003a58 <HAL_GPIO_Init+0x324>)
 80038cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038d2:	60fb      	str	r3, [r7, #12]
 80038d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038d6:	4a61      	ldr	r2, [pc, #388]	; (8003a5c <HAL_GPIO_Init+0x328>)
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	089b      	lsrs	r3, r3, #2
 80038dc:	3302      	adds	r3, #2
 80038de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	f003 0303 	and.w	r3, r3, #3
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	220f      	movs	r2, #15
 80038ee:	fa02 f303 	lsl.w	r3, r2, r3
 80038f2:	43db      	mvns	r3, r3
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	4013      	ands	r3, r2
 80038f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a58      	ldr	r2, [pc, #352]	; (8003a60 <HAL_GPIO_Init+0x32c>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d037      	beq.n	8003972 <HAL_GPIO_Init+0x23e>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a57      	ldr	r2, [pc, #348]	; (8003a64 <HAL_GPIO_Init+0x330>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d031      	beq.n	800396e <HAL_GPIO_Init+0x23a>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a56      	ldr	r2, [pc, #344]	; (8003a68 <HAL_GPIO_Init+0x334>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d02b      	beq.n	800396a <HAL_GPIO_Init+0x236>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a55      	ldr	r2, [pc, #340]	; (8003a6c <HAL_GPIO_Init+0x338>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d025      	beq.n	8003966 <HAL_GPIO_Init+0x232>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a54      	ldr	r2, [pc, #336]	; (8003a70 <HAL_GPIO_Init+0x33c>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d01f      	beq.n	8003962 <HAL_GPIO_Init+0x22e>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a53      	ldr	r2, [pc, #332]	; (8003a74 <HAL_GPIO_Init+0x340>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d019      	beq.n	800395e <HAL_GPIO_Init+0x22a>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a52      	ldr	r2, [pc, #328]	; (8003a78 <HAL_GPIO_Init+0x344>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d013      	beq.n	800395a <HAL_GPIO_Init+0x226>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a51      	ldr	r2, [pc, #324]	; (8003a7c <HAL_GPIO_Init+0x348>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d00d      	beq.n	8003956 <HAL_GPIO_Init+0x222>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a50      	ldr	r2, [pc, #320]	; (8003a80 <HAL_GPIO_Init+0x34c>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d007      	beq.n	8003952 <HAL_GPIO_Init+0x21e>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a4f      	ldr	r2, [pc, #316]	; (8003a84 <HAL_GPIO_Init+0x350>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d101      	bne.n	800394e <HAL_GPIO_Init+0x21a>
 800394a:	2309      	movs	r3, #9
 800394c:	e012      	b.n	8003974 <HAL_GPIO_Init+0x240>
 800394e:	230a      	movs	r3, #10
 8003950:	e010      	b.n	8003974 <HAL_GPIO_Init+0x240>
 8003952:	2308      	movs	r3, #8
 8003954:	e00e      	b.n	8003974 <HAL_GPIO_Init+0x240>
 8003956:	2307      	movs	r3, #7
 8003958:	e00c      	b.n	8003974 <HAL_GPIO_Init+0x240>
 800395a:	2306      	movs	r3, #6
 800395c:	e00a      	b.n	8003974 <HAL_GPIO_Init+0x240>
 800395e:	2305      	movs	r3, #5
 8003960:	e008      	b.n	8003974 <HAL_GPIO_Init+0x240>
 8003962:	2304      	movs	r3, #4
 8003964:	e006      	b.n	8003974 <HAL_GPIO_Init+0x240>
 8003966:	2303      	movs	r3, #3
 8003968:	e004      	b.n	8003974 <HAL_GPIO_Init+0x240>
 800396a:	2302      	movs	r3, #2
 800396c:	e002      	b.n	8003974 <HAL_GPIO_Init+0x240>
 800396e:	2301      	movs	r3, #1
 8003970:	e000      	b.n	8003974 <HAL_GPIO_Init+0x240>
 8003972:	2300      	movs	r3, #0
 8003974:	69fa      	ldr	r2, [r7, #28]
 8003976:	f002 0203 	and.w	r2, r2, #3
 800397a:	0092      	lsls	r2, r2, #2
 800397c:	4093      	lsls	r3, r2
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	4313      	orrs	r3, r2
 8003982:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003984:	4935      	ldr	r1, [pc, #212]	; (8003a5c <HAL_GPIO_Init+0x328>)
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	089b      	lsrs	r3, r3, #2
 800398a:	3302      	adds	r3, #2
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003992:	4b3d      	ldr	r3, [pc, #244]	; (8003a88 <HAL_GPIO_Init+0x354>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	43db      	mvns	r3, r3
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	4013      	ands	r3, r2
 80039a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d003      	beq.n	80039b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039b6:	4a34      	ldr	r2, [pc, #208]	; (8003a88 <HAL_GPIO_Init+0x354>)
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039bc:	4b32      	ldr	r3, [pc, #200]	; (8003a88 <HAL_GPIO_Init+0x354>)
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	43db      	mvns	r3, r3
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	4013      	ands	r3, r2
 80039ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d003      	beq.n	80039e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80039d8:	69ba      	ldr	r2, [r7, #24]
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	4313      	orrs	r3, r2
 80039de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039e0:	4a29      	ldr	r2, [pc, #164]	; (8003a88 <HAL_GPIO_Init+0x354>)
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80039e6:	4b28      	ldr	r3, [pc, #160]	; (8003a88 <HAL_GPIO_Init+0x354>)
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	43db      	mvns	r3, r3
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	4013      	ands	r3, r2
 80039f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d003      	beq.n	8003a0a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a0a:	4a1f      	ldr	r2, [pc, #124]	; (8003a88 <HAL_GPIO_Init+0x354>)
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a10:	4b1d      	ldr	r3, [pc, #116]	; (8003a88 <HAL_GPIO_Init+0x354>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	43db      	mvns	r3, r3
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d003      	beq.n	8003a34 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a34:	4a14      	ldr	r2, [pc, #80]	; (8003a88 <HAL_GPIO_Init+0x354>)
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	61fb      	str	r3, [r7, #28]
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	2b0f      	cmp	r3, #15
 8003a44:	f67f ae84 	bls.w	8003750 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a48:	bf00      	nop
 8003a4a:	bf00      	nop
 8003a4c:	3724      	adds	r7, #36	; 0x24
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	40023800 	.word	0x40023800
 8003a5c:	40013800 	.word	0x40013800
 8003a60:	40020000 	.word	0x40020000
 8003a64:	40020400 	.word	0x40020400
 8003a68:	40020800 	.word	0x40020800
 8003a6c:	40020c00 	.word	0x40020c00
 8003a70:	40021000 	.word	0x40021000
 8003a74:	40021400 	.word	0x40021400
 8003a78:	40021800 	.word	0x40021800
 8003a7c:	40021c00 	.word	0x40021c00
 8003a80:	40022000 	.word	0x40022000
 8003a84:	40022400 	.word	0x40022400
 8003a88:	40013c00 	.word	0x40013c00

08003a8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	460b      	mov	r3, r1
 8003a96:	807b      	strh	r3, [r7, #2]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a9c:	787b      	ldrb	r3, [r7, #1]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d003      	beq.n	8003aaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003aa2:	887a      	ldrh	r2, [r7, #2]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003aa8:	e003      	b.n	8003ab2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003aaa:	887b      	ldrh	r3, [r7, #2]
 8003aac:	041a      	lsls	r2, r3, #16
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	619a      	str	r2, [r3, #24]
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
	...

08003ac0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003aca:	2300      	movs	r3, #0
 8003acc:	603b      	str	r3, [r7, #0]
 8003ace:	4b20      	ldr	r3, [pc, #128]	; (8003b50 <HAL_PWREx_EnableOverDrive+0x90>)
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad2:	4a1f      	ldr	r2, [pc, #124]	; (8003b50 <HAL_PWREx_EnableOverDrive+0x90>)
 8003ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8003ada:	4b1d      	ldr	r3, [pc, #116]	; (8003b50 <HAL_PWREx_EnableOverDrive+0x90>)
 8003adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ae2:	603b      	str	r3, [r7, #0]
 8003ae4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003ae6:	4b1b      	ldr	r3, [pc, #108]	; (8003b54 <HAL_PWREx_EnableOverDrive+0x94>)
 8003ae8:	2201      	movs	r2, #1
 8003aea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003aec:	f7fe fba2 	bl	8002234 <HAL_GetTick>
 8003af0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003af2:	e009      	b.n	8003b08 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003af4:	f7fe fb9e 	bl	8002234 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b02:	d901      	bls.n	8003b08 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e01f      	b.n	8003b48 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b08:	4b13      	ldr	r3, [pc, #76]	; (8003b58 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b14:	d1ee      	bne.n	8003af4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003b16:	4b11      	ldr	r3, [pc, #68]	; (8003b5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b18:	2201      	movs	r2, #1
 8003b1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b1c:	f7fe fb8a 	bl	8002234 <HAL_GetTick>
 8003b20:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b22:	e009      	b.n	8003b38 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b24:	f7fe fb86 	bl	8002234 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b32:	d901      	bls.n	8003b38 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e007      	b.n	8003b48 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b38:	4b07      	ldr	r3, [pc, #28]	; (8003b58 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b44:	d1ee      	bne.n	8003b24 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3708      	adds	r7, #8
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	40023800 	.word	0x40023800
 8003b54:	420e0040 	.word	0x420e0040
 8003b58:	40007000 	.word	0x40007000
 8003b5c:	420e0044 	.word	0x420e0044

08003b60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d101      	bne.n	8003b72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e267      	b.n	8004042 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d075      	beq.n	8003c6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b7e:	4b88      	ldr	r3, [pc, #544]	; (8003da0 <HAL_RCC_OscConfig+0x240>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f003 030c 	and.w	r3, r3, #12
 8003b86:	2b04      	cmp	r3, #4
 8003b88:	d00c      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b8a:	4b85      	ldr	r3, [pc, #532]	; (8003da0 <HAL_RCC_OscConfig+0x240>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b92:	2b08      	cmp	r3, #8
 8003b94:	d112      	bne.n	8003bbc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b96:	4b82      	ldr	r3, [pc, #520]	; (8003da0 <HAL_RCC_OscConfig+0x240>)
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ba2:	d10b      	bne.n	8003bbc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ba4:	4b7e      	ldr	r3, [pc, #504]	; (8003da0 <HAL_RCC_OscConfig+0x240>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d05b      	beq.n	8003c68 <HAL_RCC_OscConfig+0x108>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d157      	bne.n	8003c68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e242      	b.n	8004042 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bc4:	d106      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x74>
 8003bc6:	4b76      	ldr	r3, [pc, #472]	; (8003da0 <HAL_RCC_OscConfig+0x240>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a75      	ldr	r2, [pc, #468]	; (8003da0 <HAL_RCC_OscConfig+0x240>)
 8003bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bd0:	6013      	str	r3, [r2, #0]
 8003bd2:	e01d      	b.n	8003c10 <HAL_RCC_OscConfig+0xb0>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bdc:	d10c      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x98>
 8003bde:	4b70      	ldr	r3, [pc, #448]	; (8003da0 <HAL_RCC_OscConfig+0x240>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a6f      	ldr	r2, [pc, #444]	; (8003da0 <HAL_RCC_OscConfig+0x240>)
 8003be4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003be8:	6013      	str	r3, [r2, #0]
 8003bea:	4b6d      	ldr	r3, [pc, #436]	; (8003da0 <HAL_RCC_OscConfig+0x240>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a6c      	ldr	r2, [pc, #432]	; (8003da0 <HAL_RCC_OscConfig+0x240>)
 8003bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bf4:	6013      	str	r3, [r2, #0]
 8003bf6:	e00b      	b.n	8003c10 <HAL_RCC_OscConfig+0xb0>
 8003bf8:	4b69      	ldr	r3, [pc, #420]	; (8003da0 <HAL_RCC_OscConfig+0x240>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a68      	ldr	r2, [pc, #416]	; (8003da0 <HAL_RCC_OscConfig+0x240>)
 8003bfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c02:	6013      	str	r3, [r2, #0]
 8003c04:	4b66      	ldr	r3, [pc, #408]	; (8003da0 <HAL_RCC_OscConfig+0x240>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a65      	ldr	r2, [pc, #404]	; (8003da0 <HAL_RCC_OscConfig+0x240>)
 8003c0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d013      	beq.n	8003c40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c18:	f7fe fb0c 	bl	8002234 <HAL_GetTick>
 8003c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c1e:	e008      	b.n	8003c32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c20:	f7fe fb08 	bl	8002234 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b64      	cmp	r3, #100	; 0x64
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e207      	b.n	8004042 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c32:	4b5b      	ldr	r3, [pc, #364]	; (8003da0 <HAL_RCC_OscConfig+0x240>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d0f0      	beq.n	8003c20 <HAL_RCC_OscConfig+0xc0>
 8003c3e:	e014      	b.n	8003c6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c40:	f7fe faf8 	bl	8002234 <HAL_GetTick>
 8003c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c46:	e008      	b.n	8003c5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c48:	f7fe faf4 	bl	8002234 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b64      	cmp	r3, #100	; 0x64
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e1f3      	b.n	8004042 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c5a:	4b51      	ldr	r3, [pc, #324]	; (8003da0 <HAL_RCC_OscConfig+0x240>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1f0      	bne.n	8003c48 <HAL_RCC_OscConfig+0xe8>
 8003c66:	e000      	b.n	8003c6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d063      	beq.n	8003d3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c76:	4b4a      	ldr	r3, [pc, #296]	; (8003da0 <HAL_RCC_OscConfig+0x240>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f003 030c 	and.w	r3, r3, #12
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00b      	beq.n	8003c9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c82:	4b47      	ldr	r3, [pc, #284]	; (8003da0 <HAL_RCC_OscConfig+0x240>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c8a:	2b08      	cmp	r3, #8
 8003c8c:	d11c      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c8e:	4b44      	ldr	r3, [pc, #272]	; (8003da0 <HAL_RCC_OscConfig+0x240>)
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d116      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c9a:	4b41      	ldr	r3, [pc, #260]	; (8003da0 <HAL_RCC_OscConfig+0x240>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d005      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x152>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d001      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e1c7      	b.n	8004042 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cb2:	4b3b      	ldr	r3, [pc, #236]	; (8003da0 <HAL_RCC_OscConfig+0x240>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	00db      	lsls	r3, r3, #3
 8003cc0:	4937      	ldr	r1, [pc, #220]	; (8003da0 <HAL_RCC_OscConfig+0x240>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cc6:	e03a      	b.n	8003d3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d020      	beq.n	8003d12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cd0:	4b34      	ldr	r3, [pc, #208]	; (8003da4 <HAL_RCC_OscConfig+0x244>)
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd6:	f7fe faad 	bl	8002234 <HAL_GetTick>
 8003cda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cdc:	e008      	b.n	8003cf0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cde:	f7fe faa9 	bl	8002234 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d901      	bls.n	8003cf0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e1a8      	b.n	8004042 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cf0:	4b2b      	ldr	r3, [pc, #172]	; (8003da0 <HAL_RCC_OscConfig+0x240>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d0f0      	beq.n	8003cde <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cfc:	4b28      	ldr	r3, [pc, #160]	; (8003da0 <HAL_RCC_OscConfig+0x240>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	4925      	ldr	r1, [pc, #148]	; (8003da0 <HAL_RCC_OscConfig+0x240>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	600b      	str	r3, [r1, #0]
 8003d10:	e015      	b.n	8003d3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d12:	4b24      	ldr	r3, [pc, #144]	; (8003da4 <HAL_RCC_OscConfig+0x244>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d18:	f7fe fa8c 	bl	8002234 <HAL_GetTick>
 8003d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d1e:	e008      	b.n	8003d32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d20:	f7fe fa88 	bl	8002234 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e187      	b.n	8004042 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d32:	4b1b      	ldr	r3, [pc, #108]	; (8003da0 <HAL_RCC_OscConfig+0x240>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1f0      	bne.n	8003d20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0308 	and.w	r3, r3, #8
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d036      	beq.n	8003db8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d016      	beq.n	8003d80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d52:	4b15      	ldr	r3, [pc, #84]	; (8003da8 <HAL_RCC_OscConfig+0x248>)
 8003d54:	2201      	movs	r2, #1
 8003d56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d58:	f7fe fa6c 	bl	8002234 <HAL_GetTick>
 8003d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d5e:	e008      	b.n	8003d72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d60:	f7fe fa68 	bl	8002234 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e167      	b.n	8004042 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d72:	4b0b      	ldr	r3, [pc, #44]	; (8003da0 <HAL_RCC_OscConfig+0x240>)
 8003d74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d0f0      	beq.n	8003d60 <HAL_RCC_OscConfig+0x200>
 8003d7e:	e01b      	b.n	8003db8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d80:	4b09      	ldr	r3, [pc, #36]	; (8003da8 <HAL_RCC_OscConfig+0x248>)
 8003d82:	2200      	movs	r2, #0
 8003d84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d86:	f7fe fa55 	bl	8002234 <HAL_GetTick>
 8003d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d8c:	e00e      	b.n	8003dac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d8e:	f7fe fa51 	bl	8002234 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d907      	bls.n	8003dac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e150      	b.n	8004042 <HAL_RCC_OscConfig+0x4e2>
 8003da0:	40023800 	.word	0x40023800
 8003da4:	42470000 	.word	0x42470000
 8003da8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dac:	4b88      	ldr	r3, [pc, #544]	; (8003fd0 <HAL_RCC_OscConfig+0x470>)
 8003dae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1ea      	bne.n	8003d8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0304 	and.w	r3, r3, #4
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f000 8097 	beq.w	8003ef4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dca:	4b81      	ldr	r3, [pc, #516]	; (8003fd0 <HAL_RCC_OscConfig+0x470>)
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d10f      	bne.n	8003df6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	60bb      	str	r3, [r7, #8]
 8003dda:	4b7d      	ldr	r3, [pc, #500]	; (8003fd0 <HAL_RCC_OscConfig+0x470>)
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dde:	4a7c      	ldr	r2, [pc, #496]	; (8003fd0 <HAL_RCC_OscConfig+0x470>)
 8003de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003de4:	6413      	str	r3, [r2, #64]	; 0x40
 8003de6:	4b7a      	ldr	r3, [pc, #488]	; (8003fd0 <HAL_RCC_OscConfig+0x470>)
 8003de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dee:	60bb      	str	r3, [r7, #8]
 8003df0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003df2:	2301      	movs	r3, #1
 8003df4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003df6:	4b77      	ldr	r3, [pc, #476]	; (8003fd4 <HAL_RCC_OscConfig+0x474>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d118      	bne.n	8003e34 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e02:	4b74      	ldr	r3, [pc, #464]	; (8003fd4 <HAL_RCC_OscConfig+0x474>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a73      	ldr	r2, [pc, #460]	; (8003fd4 <HAL_RCC_OscConfig+0x474>)
 8003e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e0e:	f7fe fa11 	bl	8002234 <HAL_GetTick>
 8003e12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e14:	e008      	b.n	8003e28 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e16:	f7fe fa0d 	bl	8002234 <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d901      	bls.n	8003e28 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e10c      	b.n	8004042 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e28:	4b6a      	ldr	r3, [pc, #424]	; (8003fd4 <HAL_RCC_OscConfig+0x474>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d0f0      	beq.n	8003e16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d106      	bne.n	8003e4a <HAL_RCC_OscConfig+0x2ea>
 8003e3c:	4b64      	ldr	r3, [pc, #400]	; (8003fd0 <HAL_RCC_OscConfig+0x470>)
 8003e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e40:	4a63      	ldr	r2, [pc, #396]	; (8003fd0 <HAL_RCC_OscConfig+0x470>)
 8003e42:	f043 0301 	orr.w	r3, r3, #1
 8003e46:	6713      	str	r3, [r2, #112]	; 0x70
 8003e48:	e01c      	b.n	8003e84 <HAL_RCC_OscConfig+0x324>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	2b05      	cmp	r3, #5
 8003e50:	d10c      	bne.n	8003e6c <HAL_RCC_OscConfig+0x30c>
 8003e52:	4b5f      	ldr	r3, [pc, #380]	; (8003fd0 <HAL_RCC_OscConfig+0x470>)
 8003e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e56:	4a5e      	ldr	r2, [pc, #376]	; (8003fd0 <HAL_RCC_OscConfig+0x470>)
 8003e58:	f043 0304 	orr.w	r3, r3, #4
 8003e5c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e5e:	4b5c      	ldr	r3, [pc, #368]	; (8003fd0 <HAL_RCC_OscConfig+0x470>)
 8003e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e62:	4a5b      	ldr	r2, [pc, #364]	; (8003fd0 <HAL_RCC_OscConfig+0x470>)
 8003e64:	f043 0301 	orr.w	r3, r3, #1
 8003e68:	6713      	str	r3, [r2, #112]	; 0x70
 8003e6a:	e00b      	b.n	8003e84 <HAL_RCC_OscConfig+0x324>
 8003e6c:	4b58      	ldr	r3, [pc, #352]	; (8003fd0 <HAL_RCC_OscConfig+0x470>)
 8003e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e70:	4a57      	ldr	r2, [pc, #348]	; (8003fd0 <HAL_RCC_OscConfig+0x470>)
 8003e72:	f023 0301 	bic.w	r3, r3, #1
 8003e76:	6713      	str	r3, [r2, #112]	; 0x70
 8003e78:	4b55      	ldr	r3, [pc, #340]	; (8003fd0 <HAL_RCC_OscConfig+0x470>)
 8003e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7c:	4a54      	ldr	r2, [pc, #336]	; (8003fd0 <HAL_RCC_OscConfig+0x470>)
 8003e7e:	f023 0304 	bic.w	r3, r3, #4
 8003e82:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d015      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e8c:	f7fe f9d2 	bl	8002234 <HAL_GetTick>
 8003e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e92:	e00a      	b.n	8003eaa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e94:	f7fe f9ce 	bl	8002234 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e0cb      	b.n	8004042 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eaa:	4b49      	ldr	r3, [pc, #292]	; (8003fd0 <HAL_RCC_OscConfig+0x470>)
 8003eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d0ee      	beq.n	8003e94 <HAL_RCC_OscConfig+0x334>
 8003eb6:	e014      	b.n	8003ee2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eb8:	f7fe f9bc 	bl	8002234 <HAL_GetTick>
 8003ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ebe:	e00a      	b.n	8003ed6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ec0:	f7fe f9b8 	bl	8002234 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e0b5      	b.n	8004042 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ed6:	4b3e      	ldr	r3, [pc, #248]	; (8003fd0 <HAL_RCC_OscConfig+0x470>)
 8003ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1ee      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ee2:	7dfb      	ldrb	r3, [r7, #23]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d105      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ee8:	4b39      	ldr	r3, [pc, #228]	; (8003fd0 <HAL_RCC_OscConfig+0x470>)
 8003eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eec:	4a38      	ldr	r2, [pc, #224]	; (8003fd0 <HAL_RCC_OscConfig+0x470>)
 8003eee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ef2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f000 80a1 	beq.w	8004040 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003efe:	4b34      	ldr	r3, [pc, #208]	; (8003fd0 <HAL_RCC_OscConfig+0x470>)
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f003 030c 	and.w	r3, r3, #12
 8003f06:	2b08      	cmp	r3, #8
 8003f08:	d05c      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d141      	bne.n	8003f96 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f12:	4b31      	ldr	r3, [pc, #196]	; (8003fd8 <HAL_RCC_OscConfig+0x478>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f18:	f7fe f98c 	bl	8002234 <HAL_GetTick>
 8003f1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f1e:	e008      	b.n	8003f32 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f20:	f7fe f988 	bl	8002234 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e087      	b.n	8004042 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f32:	4b27      	ldr	r3, [pc, #156]	; (8003fd0 <HAL_RCC_OscConfig+0x470>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1f0      	bne.n	8003f20 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	69da      	ldr	r2, [r3, #28]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	431a      	orrs	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4c:	019b      	lsls	r3, r3, #6
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f54:	085b      	lsrs	r3, r3, #1
 8003f56:	3b01      	subs	r3, #1
 8003f58:	041b      	lsls	r3, r3, #16
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f60:	061b      	lsls	r3, r3, #24
 8003f62:	491b      	ldr	r1, [pc, #108]	; (8003fd0 <HAL_RCC_OscConfig+0x470>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f68:	4b1b      	ldr	r3, [pc, #108]	; (8003fd8 <HAL_RCC_OscConfig+0x478>)
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f6e:	f7fe f961 	bl	8002234 <HAL_GetTick>
 8003f72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f74:	e008      	b.n	8003f88 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f76:	f7fe f95d 	bl	8002234 <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d901      	bls.n	8003f88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e05c      	b.n	8004042 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f88:	4b11      	ldr	r3, [pc, #68]	; (8003fd0 <HAL_RCC_OscConfig+0x470>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d0f0      	beq.n	8003f76 <HAL_RCC_OscConfig+0x416>
 8003f94:	e054      	b.n	8004040 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f96:	4b10      	ldr	r3, [pc, #64]	; (8003fd8 <HAL_RCC_OscConfig+0x478>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f9c:	f7fe f94a 	bl	8002234 <HAL_GetTick>
 8003fa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fa2:	e008      	b.n	8003fb6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fa4:	f7fe f946 	bl	8002234 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e045      	b.n	8004042 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fb6:	4b06      	ldr	r3, [pc, #24]	; (8003fd0 <HAL_RCC_OscConfig+0x470>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1f0      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x444>
 8003fc2:	e03d      	b.n	8004040 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d107      	bne.n	8003fdc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e038      	b.n	8004042 <HAL_RCC_OscConfig+0x4e2>
 8003fd0:	40023800 	.word	0x40023800
 8003fd4:	40007000 	.word	0x40007000
 8003fd8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fdc:	4b1b      	ldr	r3, [pc, #108]	; (800404c <HAL_RCC_OscConfig+0x4ec>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d028      	beq.n	800403c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d121      	bne.n	800403c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004002:	429a      	cmp	r2, r3
 8004004:	d11a      	bne.n	800403c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800400c:	4013      	ands	r3, r2
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004012:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004014:	4293      	cmp	r3, r2
 8004016:	d111      	bne.n	800403c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004022:	085b      	lsrs	r3, r3, #1
 8004024:	3b01      	subs	r3, #1
 8004026:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004028:	429a      	cmp	r2, r3
 800402a:	d107      	bne.n	800403c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004036:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004038:	429a      	cmp	r2, r3
 800403a:	d001      	beq.n	8004040 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e000      	b.n	8004042 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3718      	adds	r7, #24
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	40023800 	.word	0x40023800

08004050 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d101      	bne.n	8004064 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e0cc      	b.n	80041fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004064:	4b68      	ldr	r3, [pc, #416]	; (8004208 <HAL_RCC_ClockConfig+0x1b8>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 030f 	and.w	r3, r3, #15
 800406c:	683a      	ldr	r2, [r7, #0]
 800406e:	429a      	cmp	r2, r3
 8004070:	d90c      	bls.n	800408c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004072:	4b65      	ldr	r3, [pc, #404]	; (8004208 <HAL_RCC_ClockConfig+0x1b8>)
 8004074:	683a      	ldr	r2, [r7, #0]
 8004076:	b2d2      	uxtb	r2, r2
 8004078:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800407a:	4b63      	ldr	r3, [pc, #396]	; (8004208 <HAL_RCC_ClockConfig+0x1b8>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 030f 	and.w	r3, r3, #15
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	429a      	cmp	r2, r3
 8004086:	d001      	beq.n	800408c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e0b8      	b.n	80041fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0302 	and.w	r3, r3, #2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d020      	beq.n	80040da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0304 	and.w	r3, r3, #4
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d005      	beq.n	80040b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040a4:	4b59      	ldr	r3, [pc, #356]	; (800420c <HAL_RCC_ClockConfig+0x1bc>)
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	4a58      	ldr	r2, [pc, #352]	; (800420c <HAL_RCC_ClockConfig+0x1bc>)
 80040aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0308 	and.w	r3, r3, #8
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d005      	beq.n	80040c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040bc:	4b53      	ldr	r3, [pc, #332]	; (800420c <HAL_RCC_ClockConfig+0x1bc>)
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	4a52      	ldr	r2, [pc, #328]	; (800420c <HAL_RCC_ClockConfig+0x1bc>)
 80040c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040c8:	4b50      	ldr	r3, [pc, #320]	; (800420c <HAL_RCC_ClockConfig+0x1bc>)
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	494d      	ldr	r1, [pc, #308]	; (800420c <HAL_RCC_ClockConfig+0x1bc>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0301 	and.w	r3, r3, #1
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d044      	beq.n	8004170 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d107      	bne.n	80040fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ee:	4b47      	ldr	r3, [pc, #284]	; (800420c <HAL_RCC_ClockConfig+0x1bc>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d119      	bne.n	800412e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e07f      	b.n	80041fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	2b02      	cmp	r3, #2
 8004104:	d003      	beq.n	800410e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800410a:	2b03      	cmp	r3, #3
 800410c:	d107      	bne.n	800411e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800410e:	4b3f      	ldr	r3, [pc, #252]	; (800420c <HAL_RCC_ClockConfig+0x1bc>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d109      	bne.n	800412e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e06f      	b.n	80041fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800411e:	4b3b      	ldr	r3, [pc, #236]	; (800420c <HAL_RCC_ClockConfig+0x1bc>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e067      	b.n	80041fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800412e:	4b37      	ldr	r3, [pc, #220]	; (800420c <HAL_RCC_ClockConfig+0x1bc>)
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f023 0203 	bic.w	r2, r3, #3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	4934      	ldr	r1, [pc, #208]	; (800420c <HAL_RCC_ClockConfig+0x1bc>)
 800413c:	4313      	orrs	r3, r2
 800413e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004140:	f7fe f878 	bl	8002234 <HAL_GetTick>
 8004144:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004146:	e00a      	b.n	800415e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004148:	f7fe f874 	bl	8002234 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	f241 3288 	movw	r2, #5000	; 0x1388
 8004156:	4293      	cmp	r3, r2
 8004158:	d901      	bls.n	800415e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e04f      	b.n	80041fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800415e:	4b2b      	ldr	r3, [pc, #172]	; (800420c <HAL_RCC_ClockConfig+0x1bc>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f003 020c 	and.w	r2, r3, #12
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	429a      	cmp	r2, r3
 800416e:	d1eb      	bne.n	8004148 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004170:	4b25      	ldr	r3, [pc, #148]	; (8004208 <HAL_RCC_ClockConfig+0x1b8>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 030f 	and.w	r3, r3, #15
 8004178:	683a      	ldr	r2, [r7, #0]
 800417a:	429a      	cmp	r2, r3
 800417c:	d20c      	bcs.n	8004198 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800417e:	4b22      	ldr	r3, [pc, #136]	; (8004208 <HAL_RCC_ClockConfig+0x1b8>)
 8004180:	683a      	ldr	r2, [r7, #0]
 8004182:	b2d2      	uxtb	r2, r2
 8004184:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004186:	4b20      	ldr	r3, [pc, #128]	; (8004208 <HAL_RCC_ClockConfig+0x1b8>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 030f 	and.w	r3, r3, #15
 800418e:	683a      	ldr	r2, [r7, #0]
 8004190:	429a      	cmp	r2, r3
 8004192:	d001      	beq.n	8004198 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e032      	b.n	80041fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0304 	and.w	r3, r3, #4
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d008      	beq.n	80041b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041a4:	4b19      	ldr	r3, [pc, #100]	; (800420c <HAL_RCC_ClockConfig+0x1bc>)
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	4916      	ldr	r1, [pc, #88]	; (800420c <HAL_RCC_ClockConfig+0x1bc>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0308 	and.w	r3, r3, #8
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d009      	beq.n	80041d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041c2:	4b12      	ldr	r3, [pc, #72]	; (800420c <HAL_RCC_ClockConfig+0x1bc>)
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	00db      	lsls	r3, r3, #3
 80041d0:	490e      	ldr	r1, [pc, #56]	; (800420c <HAL_RCC_ClockConfig+0x1bc>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041d6:	f000 f821 	bl	800421c <HAL_RCC_GetSysClockFreq>
 80041da:	4602      	mov	r2, r0
 80041dc:	4b0b      	ldr	r3, [pc, #44]	; (800420c <HAL_RCC_ClockConfig+0x1bc>)
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	091b      	lsrs	r3, r3, #4
 80041e2:	f003 030f 	and.w	r3, r3, #15
 80041e6:	490a      	ldr	r1, [pc, #40]	; (8004210 <HAL_RCC_ClockConfig+0x1c0>)
 80041e8:	5ccb      	ldrb	r3, [r1, r3]
 80041ea:	fa22 f303 	lsr.w	r3, r2, r3
 80041ee:	4a09      	ldr	r2, [pc, #36]	; (8004214 <HAL_RCC_ClockConfig+0x1c4>)
 80041f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80041f2:	4b09      	ldr	r3, [pc, #36]	; (8004218 <HAL_RCC_ClockConfig+0x1c8>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7fd ffd8 	bl	80021ac <HAL_InitTick>

  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3710      	adds	r7, #16
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	40023c00 	.word	0x40023c00
 800420c:	40023800 	.word	0x40023800
 8004210:	080067f8 	.word	0x080067f8
 8004214:	20000010 	.word	0x20000010
 8004218:	20000014 	.word	0x20000014

0800421c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800421c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004220:	b094      	sub	sp, #80	; 0x50
 8004222:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004224:	2300      	movs	r3, #0
 8004226:	647b      	str	r3, [r7, #68]	; 0x44
 8004228:	2300      	movs	r3, #0
 800422a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800422c:	2300      	movs	r3, #0
 800422e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004230:	2300      	movs	r3, #0
 8004232:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004234:	4b79      	ldr	r3, [pc, #484]	; (800441c <HAL_RCC_GetSysClockFreq+0x200>)
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f003 030c 	and.w	r3, r3, #12
 800423c:	2b08      	cmp	r3, #8
 800423e:	d00d      	beq.n	800425c <HAL_RCC_GetSysClockFreq+0x40>
 8004240:	2b08      	cmp	r3, #8
 8004242:	f200 80e1 	bhi.w	8004408 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004246:	2b00      	cmp	r3, #0
 8004248:	d002      	beq.n	8004250 <HAL_RCC_GetSysClockFreq+0x34>
 800424a:	2b04      	cmp	r3, #4
 800424c:	d003      	beq.n	8004256 <HAL_RCC_GetSysClockFreq+0x3a>
 800424e:	e0db      	b.n	8004408 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004250:	4b73      	ldr	r3, [pc, #460]	; (8004420 <HAL_RCC_GetSysClockFreq+0x204>)
 8004252:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004254:	e0db      	b.n	800440e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004256:	4b73      	ldr	r3, [pc, #460]	; (8004424 <HAL_RCC_GetSysClockFreq+0x208>)
 8004258:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800425a:	e0d8      	b.n	800440e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800425c:	4b6f      	ldr	r3, [pc, #444]	; (800441c <HAL_RCC_GetSysClockFreq+0x200>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004264:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004266:	4b6d      	ldr	r3, [pc, #436]	; (800441c <HAL_RCC_GetSysClockFreq+0x200>)
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d063      	beq.n	800433a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004272:	4b6a      	ldr	r3, [pc, #424]	; (800441c <HAL_RCC_GetSysClockFreq+0x200>)
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	099b      	lsrs	r3, r3, #6
 8004278:	2200      	movs	r2, #0
 800427a:	63bb      	str	r3, [r7, #56]	; 0x38
 800427c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800427e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004280:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004284:	633b      	str	r3, [r7, #48]	; 0x30
 8004286:	2300      	movs	r3, #0
 8004288:	637b      	str	r3, [r7, #52]	; 0x34
 800428a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800428e:	4622      	mov	r2, r4
 8004290:	462b      	mov	r3, r5
 8004292:	f04f 0000 	mov.w	r0, #0
 8004296:	f04f 0100 	mov.w	r1, #0
 800429a:	0159      	lsls	r1, r3, #5
 800429c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042a0:	0150      	lsls	r0, r2, #5
 80042a2:	4602      	mov	r2, r0
 80042a4:	460b      	mov	r3, r1
 80042a6:	4621      	mov	r1, r4
 80042a8:	1a51      	subs	r1, r2, r1
 80042aa:	6139      	str	r1, [r7, #16]
 80042ac:	4629      	mov	r1, r5
 80042ae:	eb63 0301 	sbc.w	r3, r3, r1
 80042b2:	617b      	str	r3, [r7, #20]
 80042b4:	f04f 0200 	mov.w	r2, #0
 80042b8:	f04f 0300 	mov.w	r3, #0
 80042bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042c0:	4659      	mov	r1, fp
 80042c2:	018b      	lsls	r3, r1, #6
 80042c4:	4651      	mov	r1, sl
 80042c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042ca:	4651      	mov	r1, sl
 80042cc:	018a      	lsls	r2, r1, #6
 80042ce:	4651      	mov	r1, sl
 80042d0:	ebb2 0801 	subs.w	r8, r2, r1
 80042d4:	4659      	mov	r1, fp
 80042d6:	eb63 0901 	sbc.w	r9, r3, r1
 80042da:	f04f 0200 	mov.w	r2, #0
 80042de:	f04f 0300 	mov.w	r3, #0
 80042e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042ee:	4690      	mov	r8, r2
 80042f0:	4699      	mov	r9, r3
 80042f2:	4623      	mov	r3, r4
 80042f4:	eb18 0303 	adds.w	r3, r8, r3
 80042f8:	60bb      	str	r3, [r7, #8]
 80042fa:	462b      	mov	r3, r5
 80042fc:	eb49 0303 	adc.w	r3, r9, r3
 8004300:	60fb      	str	r3, [r7, #12]
 8004302:	f04f 0200 	mov.w	r2, #0
 8004306:	f04f 0300 	mov.w	r3, #0
 800430a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800430e:	4629      	mov	r1, r5
 8004310:	024b      	lsls	r3, r1, #9
 8004312:	4621      	mov	r1, r4
 8004314:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004318:	4621      	mov	r1, r4
 800431a:	024a      	lsls	r2, r1, #9
 800431c:	4610      	mov	r0, r2
 800431e:	4619      	mov	r1, r3
 8004320:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004322:	2200      	movs	r2, #0
 8004324:	62bb      	str	r3, [r7, #40]	; 0x28
 8004326:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004328:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800432c:	f7fc fbd6 	bl	8000adc <__aeabi_uldivmod>
 8004330:	4602      	mov	r2, r0
 8004332:	460b      	mov	r3, r1
 8004334:	4613      	mov	r3, r2
 8004336:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004338:	e058      	b.n	80043ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800433a:	4b38      	ldr	r3, [pc, #224]	; (800441c <HAL_RCC_GetSysClockFreq+0x200>)
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	099b      	lsrs	r3, r3, #6
 8004340:	2200      	movs	r2, #0
 8004342:	4618      	mov	r0, r3
 8004344:	4611      	mov	r1, r2
 8004346:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800434a:	623b      	str	r3, [r7, #32]
 800434c:	2300      	movs	r3, #0
 800434e:	627b      	str	r3, [r7, #36]	; 0x24
 8004350:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004354:	4642      	mov	r2, r8
 8004356:	464b      	mov	r3, r9
 8004358:	f04f 0000 	mov.w	r0, #0
 800435c:	f04f 0100 	mov.w	r1, #0
 8004360:	0159      	lsls	r1, r3, #5
 8004362:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004366:	0150      	lsls	r0, r2, #5
 8004368:	4602      	mov	r2, r0
 800436a:	460b      	mov	r3, r1
 800436c:	4641      	mov	r1, r8
 800436e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004372:	4649      	mov	r1, r9
 8004374:	eb63 0b01 	sbc.w	fp, r3, r1
 8004378:	f04f 0200 	mov.w	r2, #0
 800437c:	f04f 0300 	mov.w	r3, #0
 8004380:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004384:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004388:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800438c:	ebb2 040a 	subs.w	r4, r2, sl
 8004390:	eb63 050b 	sbc.w	r5, r3, fp
 8004394:	f04f 0200 	mov.w	r2, #0
 8004398:	f04f 0300 	mov.w	r3, #0
 800439c:	00eb      	lsls	r3, r5, #3
 800439e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043a2:	00e2      	lsls	r2, r4, #3
 80043a4:	4614      	mov	r4, r2
 80043a6:	461d      	mov	r5, r3
 80043a8:	4643      	mov	r3, r8
 80043aa:	18e3      	adds	r3, r4, r3
 80043ac:	603b      	str	r3, [r7, #0]
 80043ae:	464b      	mov	r3, r9
 80043b0:	eb45 0303 	adc.w	r3, r5, r3
 80043b4:	607b      	str	r3, [r7, #4]
 80043b6:	f04f 0200 	mov.w	r2, #0
 80043ba:	f04f 0300 	mov.w	r3, #0
 80043be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043c2:	4629      	mov	r1, r5
 80043c4:	028b      	lsls	r3, r1, #10
 80043c6:	4621      	mov	r1, r4
 80043c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043cc:	4621      	mov	r1, r4
 80043ce:	028a      	lsls	r2, r1, #10
 80043d0:	4610      	mov	r0, r2
 80043d2:	4619      	mov	r1, r3
 80043d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043d6:	2200      	movs	r2, #0
 80043d8:	61bb      	str	r3, [r7, #24]
 80043da:	61fa      	str	r2, [r7, #28]
 80043dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043e0:	f7fc fb7c 	bl	8000adc <__aeabi_uldivmod>
 80043e4:	4602      	mov	r2, r0
 80043e6:	460b      	mov	r3, r1
 80043e8:	4613      	mov	r3, r2
 80043ea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043ec:	4b0b      	ldr	r3, [pc, #44]	; (800441c <HAL_RCC_GetSysClockFreq+0x200>)
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	0c1b      	lsrs	r3, r3, #16
 80043f2:	f003 0303 	and.w	r3, r3, #3
 80043f6:	3301      	adds	r3, #1
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80043fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004400:	fbb2 f3f3 	udiv	r3, r2, r3
 8004404:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004406:	e002      	b.n	800440e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004408:	4b05      	ldr	r3, [pc, #20]	; (8004420 <HAL_RCC_GetSysClockFreq+0x204>)
 800440a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800440c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800440e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004410:	4618      	mov	r0, r3
 8004412:	3750      	adds	r7, #80	; 0x50
 8004414:	46bd      	mov	sp, r7
 8004416:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800441a:	bf00      	nop
 800441c:	40023800 	.word	0x40023800
 8004420:	00f42400 	.word	0x00f42400
 8004424:	007a1200 	.word	0x007a1200

08004428 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004428:	b480      	push	{r7}
 800442a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800442c:	4b03      	ldr	r3, [pc, #12]	; (800443c <HAL_RCC_GetHCLKFreq+0x14>)
 800442e:	681b      	ldr	r3, [r3, #0]
}
 8004430:	4618      	mov	r0, r3
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	20000010 	.word	0x20000010

08004440 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004444:	f7ff fff0 	bl	8004428 <HAL_RCC_GetHCLKFreq>
 8004448:	4602      	mov	r2, r0
 800444a:	4b05      	ldr	r3, [pc, #20]	; (8004460 <HAL_RCC_GetPCLK1Freq+0x20>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	0a9b      	lsrs	r3, r3, #10
 8004450:	f003 0307 	and.w	r3, r3, #7
 8004454:	4903      	ldr	r1, [pc, #12]	; (8004464 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004456:	5ccb      	ldrb	r3, [r1, r3]
 8004458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800445c:	4618      	mov	r0, r3
 800445e:	bd80      	pop	{r7, pc}
 8004460:	40023800 	.word	0x40023800
 8004464:	08006808 	.word	0x08006808

08004468 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800446c:	f7ff ffdc 	bl	8004428 <HAL_RCC_GetHCLKFreq>
 8004470:	4602      	mov	r2, r0
 8004472:	4b05      	ldr	r3, [pc, #20]	; (8004488 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	0b5b      	lsrs	r3, r3, #13
 8004478:	f003 0307 	and.w	r3, r3, #7
 800447c:	4903      	ldr	r1, [pc, #12]	; (800448c <HAL_RCC_GetPCLK2Freq+0x24>)
 800447e:	5ccb      	ldrb	r3, [r1, r3]
 8004480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004484:	4618      	mov	r0, r3
 8004486:	bd80      	pop	{r7, pc}
 8004488:	40023800 	.word	0x40023800
 800448c:	08006808 	.word	0x08006808

08004490 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d101      	bne.n	80044a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e041      	b.n	8004526 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d106      	bne.n	80044bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f7fd fd1a 	bl	8001ef0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2202      	movs	r2, #2
 80044c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	3304      	adds	r3, #4
 80044cc:	4619      	mov	r1, r3
 80044ce:	4610      	mov	r0, r2
 80044d0:	f000 fa76 	bl	80049c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3708      	adds	r7, #8
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
	...

08004530 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004530:	b480      	push	{r7}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800453e:	b2db      	uxtb	r3, r3
 8004540:	2b01      	cmp	r3, #1
 8004542:	d001      	beq.n	8004548 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e046      	b.n	80045d6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2202      	movs	r2, #2
 800454c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a23      	ldr	r2, [pc, #140]	; (80045e4 <HAL_TIM_Base_Start+0xb4>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d022      	beq.n	80045a0 <HAL_TIM_Base_Start+0x70>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004562:	d01d      	beq.n	80045a0 <HAL_TIM_Base_Start+0x70>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a1f      	ldr	r2, [pc, #124]	; (80045e8 <HAL_TIM_Base_Start+0xb8>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d018      	beq.n	80045a0 <HAL_TIM_Base_Start+0x70>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a1e      	ldr	r2, [pc, #120]	; (80045ec <HAL_TIM_Base_Start+0xbc>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d013      	beq.n	80045a0 <HAL_TIM_Base_Start+0x70>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a1c      	ldr	r2, [pc, #112]	; (80045f0 <HAL_TIM_Base_Start+0xc0>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d00e      	beq.n	80045a0 <HAL_TIM_Base_Start+0x70>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a1b      	ldr	r2, [pc, #108]	; (80045f4 <HAL_TIM_Base_Start+0xc4>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d009      	beq.n	80045a0 <HAL_TIM_Base_Start+0x70>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a19      	ldr	r2, [pc, #100]	; (80045f8 <HAL_TIM_Base_Start+0xc8>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d004      	beq.n	80045a0 <HAL_TIM_Base_Start+0x70>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a18      	ldr	r2, [pc, #96]	; (80045fc <HAL_TIM_Base_Start+0xcc>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d111      	bne.n	80045c4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f003 0307 	and.w	r3, r3, #7
 80045aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2b06      	cmp	r3, #6
 80045b0:	d010      	beq.n	80045d4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f042 0201 	orr.w	r2, r2, #1
 80045c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045c2:	e007      	b.n	80045d4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f042 0201 	orr.w	r2, r2, #1
 80045d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3714      	adds	r7, #20
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	40010000 	.word	0x40010000
 80045e8:	40000400 	.word	0x40000400
 80045ec:	40000800 	.word	0x40000800
 80045f0:	40000c00 	.word	0x40000c00
 80045f4:	40010400 	.word	0x40010400
 80045f8:	40014000 	.word	0x40014000
 80045fc:	40001800 	.word	0x40001800

08004600 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d020      	beq.n	8004664 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f003 0302 	and.w	r3, r3, #2
 8004628:	2b00      	cmp	r3, #0
 800462a:	d01b      	beq.n	8004664 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f06f 0202 	mvn.w	r2, #2
 8004634:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2201      	movs	r2, #1
 800463a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	f003 0303 	and.w	r3, r3, #3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d003      	beq.n	8004652 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 f999 	bl	8004982 <HAL_TIM_IC_CaptureCallback>
 8004650:	e005      	b.n	800465e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f98b 	bl	800496e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 f99c 	bl	8004996 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	f003 0304 	and.w	r3, r3, #4
 800466a:	2b00      	cmp	r3, #0
 800466c:	d020      	beq.n	80046b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f003 0304 	and.w	r3, r3, #4
 8004674:	2b00      	cmp	r3, #0
 8004676:	d01b      	beq.n	80046b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f06f 0204 	mvn.w	r2, #4
 8004680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2202      	movs	r2, #2
 8004686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004692:	2b00      	cmp	r3, #0
 8004694:	d003      	beq.n	800469e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 f973 	bl	8004982 <HAL_TIM_IC_CaptureCallback>
 800469c:	e005      	b.n	80046aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 f965 	bl	800496e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f000 f976 	bl	8004996 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	f003 0308 	and.w	r3, r3, #8
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d020      	beq.n	80046fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f003 0308 	and.w	r3, r3, #8
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d01b      	beq.n	80046fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f06f 0208 	mvn.w	r2, #8
 80046cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2204      	movs	r2, #4
 80046d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	f003 0303 	and.w	r3, r3, #3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d003      	beq.n	80046ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 f94d 	bl	8004982 <HAL_TIM_IC_CaptureCallback>
 80046e8:	e005      	b.n	80046f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 f93f 	bl	800496e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 f950 	bl	8004996 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	f003 0310 	and.w	r3, r3, #16
 8004702:	2b00      	cmp	r3, #0
 8004704:	d020      	beq.n	8004748 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f003 0310 	and.w	r3, r3, #16
 800470c:	2b00      	cmp	r3, #0
 800470e:	d01b      	beq.n	8004748 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f06f 0210 	mvn.w	r2, #16
 8004718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2208      	movs	r2, #8
 800471e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	69db      	ldr	r3, [r3, #28]
 8004726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800472a:	2b00      	cmp	r3, #0
 800472c:	d003      	beq.n	8004736 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 f927 	bl	8004982 <HAL_TIM_IC_CaptureCallback>
 8004734:	e005      	b.n	8004742 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f919 	bl	800496e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 f92a 	bl	8004996 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00c      	beq.n	800476c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f003 0301 	and.w	r3, r3, #1
 8004758:	2b00      	cmp	r3, #0
 800475a:	d007      	beq.n	800476c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f06f 0201 	mvn.w	r2, #1
 8004764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f7fc fdb4 	bl	80012d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00c      	beq.n	8004790 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800477c:	2b00      	cmp	r3, #0
 800477e:	d007      	beq.n	8004790 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 fae4 	bl	8004d58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00c      	beq.n	80047b4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d007      	beq.n	80047b4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80047ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 f8fb 	bl	80049aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	f003 0320 	and.w	r3, r3, #32
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00c      	beq.n	80047d8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f003 0320 	and.w	r3, r3, #32
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d007      	beq.n	80047d8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f06f 0220 	mvn.w	r2, #32
 80047d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 fab6 	bl	8004d44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047d8:	bf00      	nop
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047ea:	2300      	movs	r3, #0
 80047ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d101      	bne.n	80047fc <HAL_TIM_ConfigClockSource+0x1c>
 80047f8:	2302      	movs	r3, #2
 80047fa:	e0b4      	b.n	8004966 <HAL_TIM_ConfigClockSource+0x186>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2202      	movs	r2, #2
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800481a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004822:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68ba      	ldr	r2, [r7, #8]
 800482a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004834:	d03e      	beq.n	80048b4 <HAL_TIM_ConfigClockSource+0xd4>
 8004836:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800483a:	f200 8087 	bhi.w	800494c <HAL_TIM_ConfigClockSource+0x16c>
 800483e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004842:	f000 8086 	beq.w	8004952 <HAL_TIM_ConfigClockSource+0x172>
 8004846:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800484a:	d87f      	bhi.n	800494c <HAL_TIM_ConfigClockSource+0x16c>
 800484c:	2b70      	cmp	r3, #112	; 0x70
 800484e:	d01a      	beq.n	8004886 <HAL_TIM_ConfigClockSource+0xa6>
 8004850:	2b70      	cmp	r3, #112	; 0x70
 8004852:	d87b      	bhi.n	800494c <HAL_TIM_ConfigClockSource+0x16c>
 8004854:	2b60      	cmp	r3, #96	; 0x60
 8004856:	d050      	beq.n	80048fa <HAL_TIM_ConfigClockSource+0x11a>
 8004858:	2b60      	cmp	r3, #96	; 0x60
 800485a:	d877      	bhi.n	800494c <HAL_TIM_ConfigClockSource+0x16c>
 800485c:	2b50      	cmp	r3, #80	; 0x50
 800485e:	d03c      	beq.n	80048da <HAL_TIM_ConfigClockSource+0xfa>
 8004860:	2b50      	cmp	r3, #80	; 0x50
 8004862:	d873      	bhi.n	800494c <HAL_TIM_ConfigClockSource+0x16c>
 8004864:	2b40      	cmp	r3, #64	; 0x40
 8004866:	d058      	beq.n	800491a <HAL_TIM_ConfigClockSource+0x13a>
 8004868:	2b40      	cmp	r3, #64	; 0x40
 800486a:	d86f      	bhi.n	800494c <HAL_TIM_ConfigClockSource+0x16c>
 800486c:	2b30      	cmp	r3, #48	; 0x30
 800486e:	d064      	beq.n	800493a <HAL_TIM_ConfigClockSource+0x15a>
 8004870:	2b30      	cmp	r3, #48	; 0x30
 8004872:	d86b      	bhi.n	800494c <HAL_TIM_ConfigClockSource+0x16c>
 8004874:	2b20      	cmp	r3, #32
 8004876:	d060      	beq.n	800493a <HAL_TIM_ConfigClockSource+0x15a>
 8004878:	2b20      	cmp	r3, #32
 800487a:	d867      	bhi.n	800494c <HAL_TIM_ConfigClockSource+0x16c>
 800487c:	2b00      	cmp	r3, #0
 800487e:	d05c      	beq.n	800493a <HAL_TIM_ConfigClockSource+0x15a>
 8004880:	2b10      	cmp	r3, #16
 8004882:	d05a      	beq.n	800493a <HAL_TIM_ConfigClockSource+0x15a>
 8004884:	e062      	b.n	800494c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004896:	f000 f9b9 	bl	8004c0c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80048a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68ba      	ldr	r2, [r7, #8]
 80048b0:	609a      	str	r2, [r3, #8]
      break;
 80048b2:	e04f      	b.n	8004954 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048c4:	f000 f9a2 	bl	8004c0c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	689a      	ldr	r2, [r3, #8]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048d6:	609a      	str	r2, [r3, #8]
      break;
 80048d8:	e03c      	b.n	8004954 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048e6:	461a      	mov	r2, r3
 80048e8:	f000 f916 	bl	8004b18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2150      	movs	r1, #80	; 0x50
 80048f2:	4618      	mov	r0, r3
 80048f4:	f000 f96f 	bl	8004bd6 <TIM_ITRx_SetConfig>
      break;
 80048f8:	e02c      	b.n	8004954 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004906:	461a      	mov	r2, r3
 8004908:	f000 f935 	bl	8004b76 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2160      	movs	r1, #96	; 0x60
 8004912:	4618      	mov	r0, r3
 8004914:	f000 f95f 	bl	8004bd6 <TIM_ITRx_SetConfig>
      break;
 8004918:	e01c      	b.n	8004954 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004926:	461a      	mov	r2, r3
 8004928:	f000 f8f6 	bl	8004b18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2140      	movs	r1, #64	; 0x40
 8004932:	4618      	mov	r0, r3
 8004934:	f000 f94f 	bl	8004bd6 <TIM_ITRx_SetConfig>
      break;
 8004938:	e00c      	b.n	8004954 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4619      	mov	r1, r3
 8004944:	4610      	mov	r0, r2
 8004946:	f000 f946 	bl	8004bd6 <TIM_ITRx_SetConfig>
      break;
 800494a:	e003      	b.n	8004954 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	73fb      	strb	r3, [r7, #15]
      break;
 8004950:	e000      	b.n	8004954 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004952:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004964:	7bfb      	ldrb	r3, [r7, #15]
}
 8004966:	4618      	mov	r0, r3
 8004968:	3710      	adds	r7, #16
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800496e:	b480      	push	{r7}
 8004970:	b083      	sub	sp, #12
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004976:	bf00      	nop
 8004978:	370c      	adds	r7, #12
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr

08004982 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004982:	b480      	push	{r7}
 8004984:	b083      	sub	sp, #12
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800498a:	bf00      	nop
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004996:	b480      	push	{r7}
 8004998:	b083      	sub	sp, #12
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800499e:	bf00      	nop
 80049a0:	370c      	adds	r7, #12
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr

080049aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049aa:	b480      	push	{r7}
 80049ac:	b083      	sub	sp, #12
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049b2:	bf00      	nop
 80049b4:	370c      	adds	r7, #12
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
	...

080049c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a46      	ldr	r2, [pc, #280]	; (8004aec <TIM_Base_SetConfig+0x12c>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d013      	beq.n	8004a00 <TIM_Base_SetConfig+0x40>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049de:	d00f      	beq.n	8004a00 <TIM_Base_SetConfig+0x40>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a43      	ldr	r2, [pc, #268]	; (8004af0 <TIM_Base_SetConfig+0x130>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d00b      	beq.n	8004a00 <TIM_Base_SetConfig+0x40>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a42      	ldr	r2, [pc, #264]	; (8004af4 <TIM_Base_SetConfig+0x134>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d007      	beq.n	8004a00 <TIM_Base_SetConfig+0x40>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a41      	ldr	r2, [pc, #260]	; (8004af8 <TIM_Base_SetConfig+0x138>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d003      	beq.n	8004a00 <TIM_Base_SetConfig+0x40>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a40      	ldr	r2, [pc, #256]	; (8004afc <TIM_Base_SetConfig+0x13c>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d108      	bne.n	8004a12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a35      	ldr	r2, [pc, #212]	; (8004aec <TIM_Base_SetConfig+0x12c>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d02b      	beq.n	8004a72 <TIM_Base_SetConfig+0xb2>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a20:	d027      	beq.n	8004a72 <TIM_Base_SetConfig+0xb2>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a32      	ldr	r2, [pc, #200]	; (8004af0 <TIM_Base_SetConfig+0x130>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d023      	beq.n	8004a72 <TIM_Base_SetConfig+0xb2>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a31      	ldr	r2, [pc, #196]	; (8004af4 <TIM_Base_SetConfig+0x134>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d01f      	beq.n	8004a72 <TIM_Base_SetConfig+0xb2>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a30      	ldr	r2, [pc, #192]	; (8004af8 <TIM_Base_SetConfig+0x138>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d01b      	beq.n	8004a72 <TIM_Base_SetConfig+0xb2>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a2f      	ldr	r2, [pc, #188]	; (8004afc <TIM_Base_SetConfig+0x13c>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d017      	beq.n	8004a72 <TIM_Base_SetConfig+0xb2>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a2e      	ldr	r2, [pc, #184]	; (8004b00 <TIM_Base_SetConfig+0x140>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d013      	beq.n	8004a72 <TIM_Base_SetConfig+0xb2>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a2d      	ldr	r2, [pc, #180]	; (8004b04 <TIM_Base_SetConfig+0x144>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d00f      	beq.n	8004a72 <TIM_Base_SetConfig+0xb2>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a2c      	ldr	r2, [pc, #176]	; (8004b08 <TIM_Base_SetConfig+0x148>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d00b      	beq.n	8004a72 <TIM_Base_SetConfig+0xb2>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a2b      	ldr	r2, [pc, #172]	; (8004b0c <TIM_Base_SetConfig+0x14c>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d007      	beq.n	8004a72 <TIM_Base_SetConfig+0xb2>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a2a      	ldr	r2, [pc, #168]	; (8004b10 <TIM_Base_SetConfig+0x150>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d003      	beq.n	8004a72 <TIM_Base_SetConfig+0xb2>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a29      	ldr	r2, [pc, #164]	; (8004b14 <TIM_Base_SetConfig+0x154>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d108      	bne.n	8004a84 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	689a      	ldr	r2, [r3, #8]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a10      	ldr	r2, [pc, #64]	; (8004aec <TIM_Base_SetConfig+0x12c>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d003      	beq.n	8004ab8 <TIM_Base_SetConfig+0xf8>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4a12      	ldr	r2, [pc, #72]	; (8004afc <TIM_Base_SetConfig+0x13c>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d103      	bne.n	8004ac0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	691a      	ldr	r2, [r3, #16]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	f003 0301 	and.w	r3, r3, #1
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d105      	bne.n	8004ade <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	f023 0201 	bic.w	r2, r3, #1
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	611a      	str	r2, [r3, #16]
  }
}
 8004ade:	bf00      	nop
 8004ae0:	3714      	adds	r7, #20
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	40010000 	.word	0x40010000
 8004af0:	40000400 	.word	0x40000400
 8004af4:	40000800 	.word	0x40000800
 8004af8:	40000c00 	.word	0x40000c00
 8004afc:	40010400 	.word	0x40010400
 8004b00:	40014000 	.word	0x40014000
 8004b04:	40014400 	.word	0x40014400
 8004b08:	40014800 	.word	0x40014800
 8004b0c:	40001800 	.word	0x40001800
 8004b10:	40001c00 	.word	0x40001c00
 8004b14:	40002000 	.word	0x40002000

08004b18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b087      	sub	sp, #28
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
 8004b2e:	f023 0201 	bic.w	r2, r3, #1
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	011b      	lsls	r3, r3, #4
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	f023 030a 	bic.w	r3, r3, #10
 8004b54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	693a      	ldr	r2, [r7, #16]
 8004b62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	621a      	str	r2, [r3, #32]
}
 8004b6a:	bf00      	nop
 8004b6c:	371c      	adds	r7, #28
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr

08004b76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b76:	b480      	push	{r7}
 8004b78:	b087      	sub	sp, #28
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	60f8      	str	r0, [r7, #12]
 8004b7e:	60b9      	str	r1, [r7, #8]
 8004b80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6a1b      	ldr	r3, [r3, #32]
 8004b86:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6a1b      	ldr	r3, [r3, #32]
 8004b8c:	f023 0210 	bic.w	r2, r3, #16
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ba0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	031b      	lsls	r3, r3, #12
 8004ba6:	693a      	ldr	r2, [r7, #16]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004bb2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	011b      	lsls	r3, r3, #4
 8004bb8:	697a      	ldr	r2, [r7, #20]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	693a      	ldr	r2, [r7, #16]
 8004bc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	697a      	ldr	r2, [r7, #20]
 8004bc8:	621a      	str	r2, [r3, #32]
}
 8004bca:	bf00      	nop
 8004bcc:	371c      	adds	r7, #28
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b085      	sub	sp, #20
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
 8004bde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bee:	683a      	ldr	r2, [r7, #0]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	f043 0307 	orr.w	r3, r3, #7
 8004bf8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	609a      	str	r2, [r3, #8]
}
 8004c00:	bf00      	nop
 8004c02:	3714      	adds	r7, #20
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b087      	sub	sp, #28
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	607a      	str	r2, [r7, #4]
 8004c18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	021a      	lsls	r2, r3, #8
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	431a      	orrs	r2, r3
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	609a      	str	r2, [r3, #8]
}
 8004c40:	bf00      	nop
 8004c42:	371c      	adds	r7, #28
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d101      	bne.n	8004c64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c60:	2302      	movs	r3, #2
 8004c62:	e05a      	b.n	8004d1a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2202      	movs	r2, #2
 8004c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a21      	ldr	r2, [pc, #132]	; (8004d28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d022      	beq.n	8004cee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cb0:	d01d      	beq.n	8004cee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a1d      	ldr	r2, [pc, #116]	; (8004d2c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d018      	beq.n	8004cee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a1b      	ldr	r2, [pc, #108]	; (8004d30 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d013      	beq.n	8004cee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a1a      	ldr	r2, [pc, #104]	; (8004d34 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d00e      	beq.n	8004cee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a18      	ldr	r2, [pc, #96]	; (8004d38 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d009      	beq.n	8004cee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a17      	ldr	r2, [pc, #92]	; (8004d3c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d004      	beq.n	8004cee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a15      	ldr	r2, [pc, #84]	; (8004d40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d10c      	bne.n	8004d08 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cf4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	68ba      	ldr	r2, [r7, #8]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68ba      	ldr	r2, [r7, #8]
 8004d06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3714      	adds	r7, #20
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop
 8004d28:	40010000 	.word	0x40010000
 8004d2c:	40000400 	.word	0x40000400
 8004d30:	40000800 	.word	0x40000800
 8004d34:	40000c00 	.word	0x40000c00
 8004d38:	40010400 	.word	0x40010400
 8004d3c:	40014000 	.word	0x40014000
 8004d40:	40001800 	.word	0x40001800

08004d44 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d4c:	bf00      	nop
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d101      	bne.n	8004d7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e042      	b.n	8004e04 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d106      	bne.n	8004d98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f7fd f8d4 	bl	8001f40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2224      	movs	r2, #36	; 0x24
 8004d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68da      	ldr	r2, [r3, #12]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004dae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 fdb3 	bl	800591c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	691a      	ldr	r2, [r3, #16]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004dc4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	695a      	ldr	r2, [r3, #20]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004dd4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68da      	ldr	r2, [r3, #12]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004de4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2220      	movs	r2, #32
 8004df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2220      	movs	r2, #32
 8004df8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3708      	adds	r7, #8
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b08a      	sub	sp, #40	; 0x28
 8004e10:	af02      	add	r7, sp, #8
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	603b      	str	r3, [r7, #0]
 8004e18:	4613      	mov	r3, r2
 8004e1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	2b20      	cmp	r3, #32
 8004e2a:	d175      	bne.n	8004f18 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d002      	beq.n	8004e38 <HAL_UART_Transmit+0x2c>
 8004e32:	88fb      	ldrh	r3, [r7, #6]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d101      	bne.n	8004e3c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e06e      	b.n	8004f1a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2221      	movs	r2, #33	; 0x21
 8004e46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e4a:	f7fd f9f3 	bl	8002234 <HAL_GetTick>
 8004e4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	88fa      	ldrh	r2, [r7, #6]
 8004e54:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	88fa      	ldrh	r2, [r7, #6]
 8004e5a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e64:	d108      	bne.n	8004e78 <HAL_UART_Transmit+0x6c>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d104      	bne.n	8004e78 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	61bb      	str	r3, [r7, #24]
 8004e76:	e003      	b.n	8004e80 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e80:	e02e      	b.n	8004ee0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	9300      	str	r3, [sp, #0]
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	2180      	movs	r1, #128	; 0x80
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	f000 fb15 	bl	80054bc <UART_WaitOnFlagUntilTimeout>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d005      	beq.n	8004ea4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2220      	movs	r2, #32
 8004e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e03a      	b.n	8004f1a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d10b      	bne.n	8004ec2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	881b      	ldrh	r3, [r3, #0]
 8004eae:	461a      	mov	r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004eb8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	3302      	adds	r3, #2
 8004ebe:	61bb      	str	r3, [r7, #24]
 8004ec0:	e007      	b.n	8004ed2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	781a      	ldrb	r2, [r3, #0]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	3301      	adds	r3, #1
 8004ed0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	b29a      	uxth	r2, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1cb      	bne.n	8004e82 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	9300      	str	r3, [sp, #0]
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	2140      	movs	r1, #64	; 0x40
 8004ef4:	68f8      	ldr	r0, [r7, #12]
 8004ef6:	f000 fae1 	bl	80054bc <UART_WaitOnFlagUntilTimeout>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d005      	beq.n	8004f0c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2220      	movs	r2, #32
 8004f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e006      	b.n	8004f1a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2220      	movs	r2, #32
 8004f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004f14:	2300      	movs	r3, #0
 8004f16:	e000      	b.n	8004f1a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004f18:	2302      	movs	r3, #2
  }
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3720      	adds	r7, #32
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}

08004f22 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f22:	b580      	push	{r7, lr}
 8004f24:	b084      	sub	sp, #16
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	60f8      	str	r0, [r7, #12]
 8004f2a:	60b9      	str	r1, [r7, #8]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	2b20      	cmp	r3, #32
 8004f3a:	d112      	bne.n	8004f62 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d002      	beq.n	8004f48 <HAL_UART_Receive_IT+0x26>
 8004f42:	88fb      	ldrh	r3, [r7, #6]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d101      	bne.n	8004f4c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e00b      	b.n	8004f64 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004f52:	88fb      	ldrh	r3, [r7, #6]
 8004f54:	461a      	mov	r2, r3
 8004f56:	68b9      	ldr	r1, [r7, #8]
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f000 fb08 	bl	800556e <UART_Start_Receive_IT>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	e000      	b.n	8004f64 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004f62:	2302      	movs	r3, #2
  }
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3710      	adds	r7, #16
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b0ba      	sub	sp, #232	; 0xe8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004f92:	2300      	movs	r3, #0
 8004f94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fa2:	f003 030f 	and.w	r3, r3, #15
 8004fa6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004faa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10f      	bne.n	8004fd2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fb6:	f003 0320 	and.w	r3, r3, #32
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d009      	beq.n	8004fd2 <HAL_UART_IRQHandler+0x66>
 8004fbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fc2:	f003 0320 	and.w	r3, r3, #32
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d003      	beq.n	8004fd2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 fbe8 	bl	80057a0 <UART_Receive_IT>
      return;
 8004fd0:	e25b      	b.n	800548a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004fd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f000 80de 	beq.w	8005198 <HAL_UART_IRQHandler+0x22c>
 8004fdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fe0:	f003 0301 	and.w	r3, r3, #1
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d106      	bne.n	8004ff6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004fe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f000 80d1 	beq.w	8005198 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ffa:	f003 0301 	and.w	r3, r3, #1
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00b      	beq.n	800501a <HAL_UART_IRQHandler+0xae>
 8005002:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800500a:	2b00      	cmp	r3, #0
 800500c:	d005      	beq.n	800501a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005012:	f043 0201 	orr.w	r2, r3, #1
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800501a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800501e:	f003 0304 	and.w	r3, r3, #4
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00b      	beq.n	800503e <HAL_UART_IRQHandler+0xd2>
 8005026:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800502a:	f003 0301 	and.w	r3, r3, #1
 800502e:	2b00      	cmp	r3, #0
 8005030:	d005      	beq.n	800503e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005036:	f043 0202 	orr.w	r2, r3, #2
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800503e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005042:	f003 0302 	and.w	r3, r3, #2
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00b      	beq.n	8005062 <HAL_UART_IRQHandler+0xf6>
 800504a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	2b00      	cmp	r3, #0
 8005054:	d005      	beq.n	8005062 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800505a:	f043 0204 	orr.w	r2, r3, #4
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005066:	f003 0308 	and.w	r3, r3, #8
 800506a:	2b00      	cmp	r3, #0
 800506c:	d011      	beq.n	8005092 <HAL_UART_IRQHandler+0x126>
 800506e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005072:	f003 0320 	and.w	r3, r3, #32
 8005076:	2b00      	cmp	r3, #0
 8005078:	d105      	bne.n	8005086 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800507a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800507e:	f003 0301 	and.w	r3, r3, #1
 8005082:	2b00      	cmp	r3, #0
 8005084:	d005      	beq.n	8005092 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800508a:	f043 0208 	orr.w	r2, r3, #8
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005096:	2b00      	cmp	r3, #0
 8005098:	f000 81f2 	beq.w	8005480 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800509c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050a0:	f003 0320 	and.w	r3, r3, #32
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d008      	beq.n	80050ba <HAL_UART_IRQHandler+0x14e>
 80050a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050ac:	f003 0320 	and.w	r3, r3, #32
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d002      	beq.n	80050ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 fb73 	bl	80057a0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	695b      	ldr	r3, [r3, #20]
 80050c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c4:	2b40      	cmp	r3, #64	; 0x40
 80050c6:	bf0c      	ite	eq
 80050c8:	2301      	moveq	r3, #1
 80050ca:	2300      	movne	r3, #0
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d6:	f003 0308 	and.w	r3, r3, #8
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d103      	bne.n	80050e6 <HAL_UART_IRQHandler+0x17a>
 80050de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d04f      	beq.n	8005186 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 fa7b 	bl	80055e2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f6:	2b40      	cmp	r3, #64	; 0x40
 80050f8:	d141      	bne.n	800517e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	3314      	adds	r3, #20
 8005100:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005104:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005108:	e853 3f00 	ldrex	r3, [r3]
 800510c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005110:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005114:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005118:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	3314      	adds	r3, #20
 8005122:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005126:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800512a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005132:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005136:	e841 2300 	strex	r3, r2, [r1]
 800513a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800513e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d1d9      	bne.n	80050fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800514a:	2b00      	cmp	r3, #0
 800514c:	d013      	beq.n	8005176 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005152:	4a7e      	ldr	r2, [pc, #504]	; (800534c <HAL_UART_IRQHandler+0x3e0>)
 8005154:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800515a:	4618      	mov	r0, r3
 800515c:	f7fe f85e 	bl	800321c <HAL_DMA_Abort_IT>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d016      	beq.n	8005194 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800516a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005170:	4610      	mov	r0, r2
 8005172:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005174:	e00e      	b.n	8005194 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 f98a 	bl	8005490 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800517c:	e00a      	b.n	8005194 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 f986 	bl	8005490 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005184:	e006      	b.n	8005194 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f982 	bl	8005490 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005192:	e175      	b.n	8005480 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005194:	bf00      	nop
    return;
 8005196:	e173      	b.n	8005480 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519c:	2b01      	cmp	r3, #1
 800519e:	f040 814f 	bne.w	8005440 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80051a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051a6:	f003 0310 	and.w	r3, r3, #16
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	f000 8148 	beq.w	8005440 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80051b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051b4:	f003 0310 	and.w	r3, r3, #16
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	f000 8141 	beq.w	8005440 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051be:	2300      	movs	r3, #0
 80051c0:	60bb      	str	r3, [r7, #8]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	60bb      	str	r3, [r7, #8]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	60bb      	str	r3, [r7, #8]
 80051d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051de:	2b40      	cmp	r3, #64	; 0x40
 80051e0:	f040 80b6 	bne.w	8005350 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80051f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f000 8145 	beq.w	8005484 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80051fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005202:	429a      	cmp	r2, r3
 8005204:	f080 813e 	bcs.w	8005484 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800520e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005214:	69db      	ldr	r3, [r3, #28]
 8005216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800521a:	f000 8088 	beq.w	800532e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	330c      	adds	r3, #12
 8005224:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005228:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800522c:	e853 3f00 	ldrex	r3, [r3]
 8005230:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005234:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005238:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800523c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	330c      	adds	r3, #12
 8005246:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800524a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800524e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005252:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005256:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800525a:	e841 2300 	strex	r3, r2, [r1]
 800525e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005262:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1d9      	bne.n	800521e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	3314      	adds	r3, #20
 8005270:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005272:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005274:	e853 3f00 	ldrex	r3, [r3]
 8005278:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800527a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800527c:	f023 0301 	bic.w	r3, r3, #1
 8005280:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	3314      	adds	r3, #20
 800528a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800528e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005292:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005294:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005296:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800529a:	e841 2300 	strex	r3, r2, [r1]
 800529e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80052a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1e1      	bne.n	800526a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	3314      	adds	r3, #20
 80052ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052b0:	e853 3f00 	ldrex	r3, [r3]
 80052b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80052b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	3314      	adds	r3, #20
 80052c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80052ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80052cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80052d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80052d2:	e841 2300 	strex	r3, r2, [r1]
 80052d6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80052d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1e3      	bne.n	80052a6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2220      	movs	r2, #32
 80052e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	330c      	adds	r3, #12
 80052f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052f6:	e853 3f00 	ldrex	r3, [r3]
 80052fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80052fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052fe:	f023 0310 	bic.w	r3, r3, #16
 8005302:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	330c      	adds	r3, #12
 800530c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005310:	65ba      	str	r2, [r7, #88]	; 0x58
 8005312:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005314:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005316:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005318:	e841 2300 	strex	r3, r2, [r1]
 800531c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800531e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005320:	2b00      	cmp	r3, #0
 8005322:	d1e3      	bne.n	80052ec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005328:	4618      	mov	r0, r3
 800532a:	f7fd ff07 	bl	800313c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2202      	movs	r2, #2
 8005332:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800533c:	b29b      	uxth	r3, r3
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	b29b      	uxth	r3, r3
 8005342:	4619      	mov	r1, r3
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f000 f8ad 	bl	80054a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800534a:	e09b      	b.n	8005484 <HAL_UART_IRQHandler+0x518>
 800534c:	080056a9 	.word	0x080056a9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005358:	b29b      	uxth	r3, r3
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005364:	b29b      	uxth	r3, r3
 8005366:	2b00      	cmp	r3, #0
 8005368:	f000 808e 	beq.w	8005488 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800536c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005370:	2b00      	cmp	r3, #0
 8005372:	f000 8089 	beq.w	8005488 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	330c      	adds	r3, #12
 800537c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005380:	e853 3f00 	ldrex	r3, [r3]
 8005384:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005388:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800538c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	330c      	adds	r3, #12
 8005396:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800539a:	647a      	str	r2, [r7, #68]	; 0x44
 800539c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800539e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80053a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053a2:	e841 2300 	strex	r3, r2, [r1]
 80053a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80053a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d1e3      	bne.n	8005376 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	3314      	adds	r3, #20
 80053b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b8:	e853 3f00 	ldrex	r3, [r3]
 80053bc:	623b      	str	r3, [r7, #32]
   return(result);
 80053be:	6a3b      	ldr	r3, [r7, #32]
 80053c0:	f023 0301 	bic.w	r3, r3, #1
 80053c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	3314      	adds	r3, #20
 80053ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80053d2:	633a      	str	r2, [r7, #48]	; 0x30
 80053d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053da:	e841 2300 	strex	r3, r2, [r1]
 80053de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80053e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1e3      	bne.n	80053ae <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2220      	movs	r2, #32
 80053ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	330c      	adds	r3, #12
 80053fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	e853 3f00 	ldrex	r3, [r3]
 8005402:	60fb      	str	r3, [r7, #12]
   return(result);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f023 0310 	bic.w	r3, r3, #16
 800540a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	330c      	adds	r3, #12
 8005414:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005418:	61fa      	str	r2, [r7, #28]
 800541a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541c:	69b9      	ldr	r1, [r7, #24]
 800541e:	69fa      	ldr	r2, [r7, #28]
 8005420:	e841 2300 	strex	r3, r2, [r1]
 8005424:	617b      	str	r3, [r7, #20]
   return(result);
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1e3      	bne.n	80053f4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2202      	movs	r2, #2
 8005430:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005432:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005436:	4619      	mov	r1, r3
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f000 f833 	bl	80054a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800543e:	e023      	b.n	8005488 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005448:	2b00      	cmp	r3, #0
 800544a:	d009      	beq.n	8005460 <HAL_UART_IRQHandler+0x4f4>
 800544c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005454:	2b00      	cmp	r3, #0
 8005456:	d003      	beq.n	8005460 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 f939 	bl	80056d0 <UART_Transmit_IT>
    return;
 800545e:	e014      	b.n	800548a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00e      	beq.n	800548a <HAL_UART_IRQHandler+0x51e>
 800546c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005474:	2b00      	cmp	r3, #0
 8005476:	d008      	beq.n	800548a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 f979 	bl	8005770 <UART_EndTransmit_IT>
    return;
 800547e:	e004      	b.n	800548a <HAL_UART_IRQHandler+0x51e>
    return;
 8005480:	bf00      	nop
 8005482:	e002      	b.n	800548a <HAL_UART_IRQHandler+0x51e>
      return;
 8005484:	bf00      	nop
 8005486:	e000      	b.n	800548a <HAL_UART_IRQHandler+0x51e>
      return;
 8005488:	bf00      	nop
  }
}
 800548a:	37e8      	adds	r7, #232	; 0xe8
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005498:	bf00      	nop
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	460b      	mov	r3, r1
 80054ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80054b0:	bf00      	nop
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b086      	sub	sp, #24
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	603b      	str	r3, [r7, #0]
 80054c8:	4613      	mov	r3, r2
 80054ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054cc:	e03b      	b.n	8005546 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054ce:	6a3b      	ldr	r3, [r7, #32]
 80054d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d4:	d037      	beq.n	8005546 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054d6:	f7fc fead 	bl	8002234 <HAL_GetTick>
 80054da:	4602      	mov	r2, r0
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	6a3a      	ldr	r2, [r7, #32]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d302      	bcc.n	80054ec <UART_WaitOnFlagUntilTimeout+0x30>
 80054e6:	6a3b      	ldr	r3, [r7, #32]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d101      	bne.n	80054f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e03a      	b.n	8005566 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	f003 0304 	and.w	r3, r3, #4
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d023      	beq.n	8005546 <UART_WaitOnFlagUntilTimeout+0x8a>
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	2b80      	cmp	r3, #128	; 0x80
 8005502:	d020      	beq.n	8005546 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	2b40      	cmp	r3, #64	; 0x40
 8005508:	d01d      	beq.n	8005546 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0308 	and.w	r3, r3, #8
 8005514:	2b08      	cmp	r3, #8
 8005516:	d116      	bne.n	8005546 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005518:	2300      	movs	r3, #0
 800551a:	617b      	str	r3, [r7, #20]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	617b      	str	r3, [r7, #20]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	617b      	str	r3, [r7, #20]
 800552c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	f000 f857 	bl	80055e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2208      	movs	r2, #8
 8005538:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e00f      	b.n	8005566 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	4013      	ands	r3, r2
 8005550:	68ba      	ldr	r2, [r7, #8]
 8005552:	429a      	cmp	r2, r3
 8005554:	bf0c      	ite	eq
 8005556:	2301      	moveq	r3, #1
 8005558:	2300      	movne	r3, #0
 800555a:	b2db      	uxtb	r3, r3
 800555c:	461a      	mov	r2, r3
 800555e:	79fb      	ldrb	r3, [r7, #7]
 8005560:	429a      	cmp	r2, r3
 8005562:	d0b4      	beq.n	80054ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	4618      	mov	r0, r3
 8005568:	3718      	adds	r7, #24
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}

0800556e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800556e:	b480      	push	{r7}
 8005570:	b085      	sub	sp, #20
 8005572:	af00      	add	r7, sp, #0
 8005574:	60f8      	str	r0, [r7, #12]
 8005576:	60b9      	str	r1, [r7, #8]
 8005578:	4613      	mov	r3, r2
 800557a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	68ba      	ldr	r2, [r7, #8]
 8005580:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	88fa      	ldrh	r2, [r7, #6]
 8005586:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	88fa      	ldrh	r2, [r7, #6]
 800558c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2222      	movs	r2, #34	; 0x22
 8005598:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d007      	beq.n	80055b4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68da      	ldr	r2, [r3, #12]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055b2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	695a      	ldr	r2, [r3, #20]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f042 0201 	orr.w	r2, r2, #1
 80055c2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68da      	ldr	r2, [r3, #12]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f042 0220 	orr.w	r2, r2, #32
 80055d2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3714      	adds	r7, #20
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr

080055e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055e2:	b480      	push	{r7}
 80055e4:	b095      	sub	sp, #84	; 0x54
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	330c      	adds	r3, #12
 80055f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055f4:	e853 3f00 	ldrex	r3, [r3]
 80055f8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80055fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005600:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	330c      	adds	r3, #12
 8005608:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800560a:	643a      	str	r2, [r7, #64]	; 0x40
 800560c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005610:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005612:	e841 2300 	strex	r3, r2, [r1]
 8005616:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800561a:	2b00      	cmp	r3, #0
 800561c:	d1e5      	bne.n	80055ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	3314      	adds	r3, #20
 8005624:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005626:	6a3b      	ldr	r3, [r7, #32]
 8005628:	e853 3f00 	ldrex	r3, [r3]
 800562c:	61fb      	str	r3, [r7, #28]
   return(result);
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	f023 0301 	bic.w	r3, r3, #1
 8005634:	64bb      	str	r3, [r7, #72]	; 0x48
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	3314      	adds	r3, #20
 800563c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800563e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005640:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005642:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005644:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005646:	e841 2300 	strex	r3, r2, [r1]
 800564a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800564c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564e:	2b00      	cmp	r3, #0
 8005650:	d1e5      	bne.n	800561e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005656:	2b01      	cmp	r3, #1
 8005658:	d119      	bne.n	800568e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	330c      	adds	r3, #12
 8005660:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	e853 3f00 	ldrex	r3, [r3]
 8005668:	60bb      	str	r3, [r7, #8]
   return(result);
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	f023 0310 	bic.w	r3, r3, #16
 8005670:	647b      	str	r3, [r7, #68]	; 0x44
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	330c      	adds	r3, #12
 8005678:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800567a:	61ba      	str	r2, [r7, #24]
 800567c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567e:	6979      	ldr	r1, [r7, #20]
 8005680:	69ba      	ldr	r2, [r7, #24]
 8005682:	e841 2300 	strex	r3, r2, [r1]
 8005686:	613b      	str	r3, [r7, #16]
   return(result);
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1e5      	bne.n	800565a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2220      	movs	r2, #32
 8005692:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800569c:	bf00      	nop
 800569e:	3754      	adds	r7, #84	; 0x54
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056c2:	68f8      	ldr	r0, [r7, #12]
 80056c4:	f7ff fee4 	bl	8005490 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056c8:	bf00      	nop
 80056ca:	3710      	adds	r7, #16
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b085      	sub	sp, #20
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	2b21      	cmp	r3, #33	; 0x21
 80056e2:	d13e      	bne.n	8005762 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056ec:	d114      	bne.n	8005718 <UART_Transmit_IT+0x48>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d110      	bne.n	8005718 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a1b      	ldr	r3, [r3, #32]
 80056fa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	881b      	ldrh	r3, [r3, #0]
 8005700:	461a      	mov	r2, r3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800570a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6a1b      	ldr	r3, [r3, #32]
 8005710:	1c9a      	adds	r2, r3, #2
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	621a      	str	r2, [r3, #32]
 8005716:	e008      	b.n	800572a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6a1b      	ldr	r3, [r3, #32]
 800571c:	1c59      	adds	r1, r3, #1
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	6211      	str	r1, [r2, #32]
 8005722:	781a      	ldrb	r2, [r3, #0]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800572e:	b29b      	uxth	r3, r3
 8005730:	3b01      	subs	r3, #1
 8005732:	b29b      	uxth	r3, r3
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	4619      	mov	r1, r3
 8005738:	84d1      	strh	r1, [r2, #38]	; 0x26
 800573a:	2b00      	cmp	r3, #0
 800573c:	d10f      	bne.n	800575e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68da      	ldr	r2, [r3, #12]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800574c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68da      	ldr	r2, [r3, #12]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800575c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800575e:	2300      	movs	r3, #0
 8005760:	e000      	b.n	8005764 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005762:	2302      	movs	r3, #2
  }
}
 8005764:	4618      	mov	r0, r3
 8005766:	3714      	adds	r7, #20
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b082      	sub	sp, #8
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68da      	ldr	r2, [r3, #12]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005786:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2220      	movs	r2, #32
 800578c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f7fb fe0b 	bl	80013ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	3708      	adds	r7, #8
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b08c      	sub	sp, #48	; 0x30
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	2b22      	cmp	r3, #34	; 0x22
 80057b2:	f040 80ae 	bne.w	8005912 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057be:	d117      	bne.n	80057f0 <UART_Receive_IT+0x50>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d113      	bne.n	80057f0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80057c8:	2300      	movs	r3, #0
 80057ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d0:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	b29b      	uxth	r3, r3
 80057da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057de:	b29a      	uxth	r2, r3
 80057e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e8:	1c9a      	adds	r2, r3, #2
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	629a      	str	r2, [r3, #40]	; 0x28
 80057ee:	e026      	b.n	800583e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80057f6:	2300      	movs	r3, #0
 80057f8:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005802:	d007      	beq.n	8005814 <UART_Receive_IT+0x74>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d10a      	bne.n	8005822 <UART_Receive_IT+0x82>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	691b      	ldr	r3, [r3, #16]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d106      	bne.n	8005822 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	b2da      	uxtb	r2, r3
 800581c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800581e:	701a      	strb	r2, [r3, #0]
 8005820:	e008      	b.n	8005834 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	b2db      	uxtb	r3, r3
 800582a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800582e:	b2da      	uxtb	r2, r3
 8005830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005832:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005838:	1c5a      	adds	r2, r3, #1
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005842:	b29b      	uxth	r3, r3
 8005844:	3b01      	subs	r3, #1
 8005846:	b29b      	uxth	r3, r3
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	4619      	mov	r1, r3
 800584c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800584e:	2b00      	cmp	r3, #0
 8005850:	d15d      	bne.n	800590e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68da      	ldr	r2, [r3, #12]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f022 0220 	bic.w	r2, r2, #32
 8005860:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68da      	ldr	r2, [r3, #12]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005870:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	695a      	ldr	r2, [r3, #20]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f022 0201 	bic.w	r2, r2, #1
 8005880:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2220      	movs	r2, #32
 8005886:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005894:	2b01      	cmp	r3, #1
 8005896:	d135      	bne.n	8005904 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	330c      	adds	r3, #12
 80058a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	e853 3f00 	ldrex	r3, [r3]
 80058ac:	613b      	str	r3, [r7, #16]
   return(result);
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	f023 0310 	bic.w	r3, r3, #16
 80058b4:	627b      	str	r3, [r7, #36]	; 0x24
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	330c      	adds	r3, #12
 80058bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058be:	623a      	str	r2, [r7, #32]
 80058c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c2:	69f9      	ldr	r1, [r7, #28]
 80058c4:	6a3a      	ldr	r2, [r7, #32]
 80058c6:	e841 2300 	strex	r3, r2, [r1]
 80058ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1e5      	bne.n	800589e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0310 	and.w	r3, r3, #16
 80058dc:	2b10      	cmp	r3, #16
 80058de:	d10a      	bne.n	80058f6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80058e0:	2300      	movs	r3, #0
 80058e2:	60fb      	str	r3, [r7, #12]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	60fb      	str	r3, [r7, #12]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	60fb      	str	r3, [r7, #12]
 80058f4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80058fa:	4619      	mov	r1, r3
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f7ff fdd1 	bl	80054a4 <HAL_UARTEx_RxEventCallback>
 8005902:	e002      	b.n	800590a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f7fb fd29 	bl	800135c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800590a:	2300      	movs	r3, #0
 800590c:	e002      	b.n	8005914 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800590e:	2300      	movs	r3, #0
 8005910:	e000      	b.n	8005914 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005912:	2302      	movs	r3, #2
  }
}
 8005914:	4618      	mov	r0, r3
 8005916:	3730      	adds	r7, #48	; 0x30
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800591c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005920:	b0c0      	sub	sp, #256	; 0x100
 8005922:	af00      	add	r7, sp, #0
 8005924:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	691b      	ldr	r3, [r3, #16]
 8005930:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005938:	68d9      	ldr	r1, [r3, #12]
 800593a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	ea40 0301 	orr.w	r3, r0, r1
 8005944:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800594a:	689a      	ldr	r2, [r3, #8]
 800594c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	431a      	orrs	r2, r3
 8005954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005958:	695b      	ldr	r3, [r3, #20]
 800595a:	431a      	orrs	r2, r3
 800595c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005960:	69db      	ldr	r3, [r3, #28]
 8005962:	4313      	orrs	r3, r2
 8005964:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005974:	f021 010c 	bic.w	r1, r1, #12
 8005978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005982:	430b      	orrs	r3, r1
 8005984:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	695b      	ldr	r3, [r3, #20]
 800598e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005996:	6999      	ldr	r1, [r3, #24]
 8005998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	ea40 0301 	orr.w	r3, r0, r1
 80059a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80059a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	4b8f      	ldr	r3, [pc, #572]	; (8005be8 <UART_SetConfig+0x2cc>)
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d005      	beq.n	80059bc <UART_SetConfig+0xa0>
 80059b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	4b8d      	ldr	r3, [pc, #564]	; (8005bec <UART_SetConfig+0x2d0>)
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d104      	bne.n	80059c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80059bc:	f7fe fd54 	bl	8004468 <HAL_RCC_GetPCLK2Freq>
 80059c0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80059c4:	e003      	b.n	80059ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80059c6:	f7fe fd3b 	bl	8004440 <HAL_RCC_GetPCLK1Freq>
 80059ca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059d2:	69db      	ldr	r3, [r3, #28]
 80059d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059d8:	f040 810c 	bne.w	8005bf4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80059dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059e0:	2200      	movs	r2, #0
 80059e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80059e6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80059ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80059ee:	4622      	mov	r2, r4
 80059f0:	462b      	mov	r3, r5
 80059f2:	1891      	adds	r1, r2, r2
 80059f4:	65b9      	str	r1, [r7, #88]	; 0x58
 80059f6:	415b      	adcs	r3, r3
 80059f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80059fe:	4621      	mov	r1, r4
 8005a00:	eb12 0801 	adds.w	r8, r2, r1
 8005a04:	4629      	mov	r1, r5
 8005a06:	eb43 0901 	adc.w	r9, r3, r1
 8005a0a:	f04f 0200 	mov.w	r2, #0
 8005a0e:	f04f 0300 	mov.w	r3, #0
 8005a12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a1e:	4690      	mov	r8, r2
 8005a20:	4699      	mov	r9, r3
 8005a22:	4623      	mov	r3, r4
 8005a24:	eb18 0303 	adds.w	r3, r8, r3
 8005a28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005a2c:	462b      	mov	r3, r5
 8005a2e:	eb49 0303 	adc.w	r3, r9, r3
 8005a32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005a42:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005a46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005a4a:	460b      	mov	r3, r1
 8005a4c:	18db      	adds	r3, r3, r3
 8005a4e:	653b      	str	r3, [r7, #80]	; 0x50
 8005a50:	4613      	mov	r3, r2
 8005a52:	eb42 0303 	adc.w	r3, r2, r3
 8005a56:	657b      	str	r3, [r7, #84]	; 0x54
 8005a58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005a5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005a60:	f7fb f83c 	bl	8000adc <__aeabi_uldivmod>
 8005a64:	4602      	mov	r2, r0
 8005a66:	460b      	mov	r3, r1
 8005a68:	4b61      	ldr	r3, [pc, #388]	; (8005bf0 <UART_SetConfig+0x2d4>)
 8005a6a:	fba3 2302 	umull	r2, r3, r3, r2
 8005a6e:	095b      	lsrs	r3, r3, #5
 8005a70:	011c      	lsls	r4, r3, #4
 8005a72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a76:	2200      	movs	r2, #0
 8005a78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a7c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005a80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005a84:	4642      	mov	r2, r8
 8005a86:	464b      	mov	r3, r9
 8005a88:	1891      	adds	r1, r2, r2
 8005a8a:	64b9      	str	r1, [r7, #72]	; 0x48
 8005a8c:	415b      	adcs	r3, r3
 8005a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005a94:	4641      	mov	r1, r8
 8005a96:	eb12 0a01 	adds.w	sl, r2, r1
 8005a9a:	4649      	mov	r1, r9
 8005a9c:	eb43 0b01 	adc.w	fp, r3, r1
 8005aa0:	f04f 0200 	mov.w	r2, #0
 8005aa4:	f04f 0300 	mov.w	r3, #0
 8005aa8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005aac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005ab0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ab4:	4692      	mov	sl, r2
 8005ab6:	469b      	mov	fp, r3
 8005ab8:	4643      	mov	r3, r8
 8005aba:	eb1a 0303 	adds.w	r3, sl, r3
 8005abe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ac2:	464b      	mov	r3, r9
 8005ac4:	eb4b 0303 	adc.w	r3, fp, r3
 8005ac8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ad8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005adc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	18db      	adds	r3, r3, r3
 8005ae4:	643b      	str	r3, [r7, #64]	; 0x40
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	eb42 0303 	adc.w	r3, r2, r3
 8005aec:	647b      	str	r3, [r7, #68]	; 0x44
 8005aee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005af2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005af6:	f7fa fff1 	bl	8000adc <__aeabi_uldivmod>
 8005afa:	4602      	mov	r2, r0
 8005afc:	460b      	mov	r3, r1
 8005afe:	4611      	mov	r1, r2
 8005b00:	4b3b      	ldr	r3, [pc, #236]	; (8005bf0 <UART_SetConfig+0x2d4>)
 8005b02:	fba3 2301 	umull	r2, r3, r3, r1
 8005b06:	095b      	lsrs	r3, r3, #5
 8005b08:	2264      	movs	r2, #100	; 0x64
 8005b0a:	fb02 f303 	mul.w	r3, r2, r3
 8005b0e:	1acb      	subs	r3, r1, r3
 8005b10:	00db      	lsls	r3, r3, #3
 8005b12:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005b16:	4b36      	ldr	r3, [pc, #216]	; (8005bf0 <UART_SetConfig+0x2d4>)
 8005b18:	fba3 2302 	umull	r2, r3, r3, r2
 8005b1c:	095b      	lsrs	r3, r3, #5
 8005b1e:	005b      	lsls	r3, r3, #1
 8005b20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005b24:	441c      	add	r4, r3
 8005b26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b30:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005b34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005b38:	4642      	mov	r2, r8
 8005b3a:	464b      	mov	r3, r9
 8005b3c:	1891      	adds	r1, r2, r2
 8005b3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005b40:	415b      	adcs	r3, r3
 8005b42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005b48:	4641      	mov	r1, r8
 8005b4a:	1851      	adds	r1, r2, r1
 8005b4c:	6339      	str	r1, [r7, #48]	; 0x30
 8005b4e:	4649      	mov	r1, r9
 8005b50:	414b      	adcs	r3, r1
 8005b52:	637b      	str	r3, [r7, #52]	; 0x34
 8005b54:	f04f 0200 	mov.w	r2, #0
 8005b58:	f04f 0300 	mov.w	r3, #0
 8005b5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005b60:	4659      	mov	r1, fp
 8005b62:	00cb      	lsls	r3, r1, #3
 8005b64:	4651      	mov	r1, sl
 8005b66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b6a:	4651      	mov	r1, sl
 8005b6c:	00ca      	lsls	r2, r1, #3
 8005b6e:	4610      	mov	r0, r2
 8005b70:	4619      	mov	r1, r3
 8005b72:	4603      	mov	r3, r0
 8005b74:	4642      	mov	r2, r8
 8005b76:	189b      	adds	r3, r3, r2
 8005b78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b7c:	464b      	mov	r3, r9
 8005b7e:	460a      	mov	r2, r1
 8005b80:	eb42 0303 	adc.w	r3, r2, r3
 8005b84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005b94:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005b98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	18db      	adds	r3, r3, r3
 8005ba0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	eb42 0303 	adc.w	r3, r2, r3
 8005ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005baa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005bae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005bb2:	f7fa ff93 	bl	8000adc <__aeabi_uldivmod>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	460b      	mov	r3, r1
 8005bba:	4b0d      	ldr	r3, [pc, #52]	; (8005bf0 <UART_SetConfig+0x2d4>)
 8005bbc:	fba3 1302 	umull	r1, r3, r3, r2
 8005bc0:	095b      	lsrs	r3, r3, #5
 8005bc2:	2164      	movs	r1, #100	; 0x64
 8005bc4:	fb01 f303 	mul.w	r3, r1, r3
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	00db      	lsls	r3, r3, #3
 8005bcc:	3332      	adds	r3, #50	; 0x32
 8005bce:	4a08      	ldr	r2, [pc, #32]	; (8005bf0 <UART_SetConfig+0x2d4>)
 8005bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd4:	095b      	lsrs	r3, r3, #5
 8005bd6:	f003 0207 	and.w	r2, r3, #7
 8005bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4422      	add	r2, r4
 8005be2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005be4:	e106      	b.n	8005df4 <UART_SetConfig+0x4d8>
 8005be6:	bf00      	nop
 8005be8:	40011000 	.word	0x40011000
 8005bec:	40011400 	.word	0x40011400
 8005bf0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005bf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005bfe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005c02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005c06:	4642      	mov	r2, r8
 8005c08:	464b      	mov	r3, r9
 8005c0a:	1891      	adds	r1, r2, r2
 8005c0c:	6239      	str	r1, [r7, #32]
 8005c0e:	415b      	adcs	r3, r3
 8005c10:	627b      	str	r3, [r7, #36]	; 0x24
 8005c12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c16:	4641      	mov	r1, r8
 8005c18:	1854      	adds	r4, r2, r1
 8005c1a:	4649      	mov	r1, r9
 8005c1c:	eb43 0501 	adc.w	r5, r3, r1
 8005c20:	f04f 0200 	mov.w	r2, #0
 8005c24:	f04f 0300 	mov.w	r3, #0
 8005c28:	00eb      	lsls	r3, r5, #3
 8005c2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c2e:	00e2      	lsls	r2, r4, #3
 8005c30:	4614      	mov	r4, r2
 8005c32:	461d      	mov	r5, r3
 8005c34:	4643      	mov	r3, r8
 8005c36:	18e3      	adds	r3, r4, r3
 8005c38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005c3c:	464b      	mov	r3, r9
 8005c3e:	eb45 0303 	adc.w	r3, r5, r3
 8005c42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005c52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005c56:	f04f 0200 	mov.w	r2, #0
 8005c5a:	f04f 0300 	mov.w	r3, #0
 8005c5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005c62:	4629      	mov	r1, r5
 8005c64:	008b      	lsls	r3, r1, #2
 8005c66:	4621      	mov	r1, r4
 8005c68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c6c:	4621      	mov	r1, r4
 8005c6e:	008a      	lsls	r2, r1, #2
 8005c70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005c74:	f7fa ff32 	bl	8000adc <__aeabi_uldivmod>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	460b      	mov	r3, r1
 8005c7c:	4b60      	ldr	r3, [pc, #384]	; (8005e00 <UART_SetConfig+0x4e4>)
 8005c7e:	fba3 2302 	umull	r2, r3, r3, r2
 8005c82:	095b      	lsrs	r3, r3, #5
 8005c84:	011c      	lsls	r4, r3, #4
 8005c86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005c90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005c94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005c98:	4642      	mov	r2, r8
 8005c9a:	464b      	mov	r3, r9
 8005c9c:	1891      	adds	r1, r2, r2
 8005c9e:	61b9      	str	r1, [r7, #24]
 8005ca0:	415b      	adcs	r3, r3
 8005ca2:	61fb      	str	r3, [r7, #28]
 8005ca4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ca8:	4641      	mov	r1, r8
 8005caa:	1851      	adds	r1, r2, r1
 8005cac:	6139      	str	r1, [r7, #16]
 8005cae:	4649      	mov	r1, r9
 8005cb0:	414b      	adcs	r3, r1
 8005cb2:	617b      	str	r3, [r7, #20]
 8005cb4:	f04f 0200 	mov.w	r2, #0
 8005cb8:	f04f 0300 	mov.w	r3, #0
 8005cbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005cc0:	4659      	mov	r1, fp
 8005cc2:	00cb      	lsls	r3, r1, #3
 8005cc4:	4651      	mov	r1, sl
 8005cc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cca:	4651      	mov	r1, sl
 8005ccc:	00ca      	lsls	r2, r1, #3
 8005cce:	4610      	mov	r0, r2
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	4642      	mov	r2, r8
 8005cd6:	189b      	adds	r3, r3, r2
 8005cd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005cdc:	464b      	mov	r3, r9
 8005cde:	460a      	mov	r2, r1
 8005ce0:	eb42 0303 	adc.w	r3, r2, r3
 8005ce4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	67bb      	str	r3, [r7, #120]	; 0x78
 8005cf2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005cf4:	f04f 0200 	mov.w	r2, #0
 8005cf8:	f04f 0300 	mov.w	r3, #0
 8005cfc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005d00:	4649      	mov	r1, r9
 8005d02:	008b      	lsls	r3, r1, #2
 8005d04:	4641      	mov	r1, r8
 8005d06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d0a:	4641      	mov	r1, r8
 8005d0c:	008a      	lsls	r2, r1, #2
 8005d0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005d12:	f7fa fee3 	bl	8000adc <__aeabi_uldivmod>
 8005d16:	4602      	mov	r2, r0
 8005d18:	460b      	mov	r3, r1
 8005d1a:	4611      	mov	r1, r2
 8005d1c:	4b38      	ldr	r3, [pc, #224]	; (8005e00 <UART_SetConfig+0x4e4>)
 8005d1e:	fba3 2301 	umull	r2, r3, r3, r1
 8005d22:	095b      	lsrs	r3, r3, #5
 8005d24:	2264      	movs	r2, #100	; 0x64
 8005d26:	fb02 f303 	mul.w	r3, r2, r3
 8005d2a:	1acb      	subs	r3, r1, r3
 8005d2c:	011b      	lsls	r3, r3, #4
 8005d2e:	3332      	adds	r3, #50	; 0x32
 8005d30:	4a33      	ldr	r2, [pc, #204]	; (8005e00 <UART_SetConfig+0x4e4>)
 8005d32:	fba2 2303 	umull	r2, r3, r2, r3
 8005d36:	095b      	lsrs	r3, r3, #5
 8005d38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d3c:	441c      	add	r4, r3
 8005d3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d42:	2200      	movs	r2, #0
 8005d44:	673b      	str	r3, [r7, #112]	; 0x70
 8005d46:	677a      	str	r2, [r7, #116]	; 0x74
 8005d48:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005d4c:	4642      	mov	r2, r8
 8005d4e:	464b      	mov	r3, r9
 8005d50:	1891      	adds	r1, r2, r2
 8005d52:	60b9      	str	r1, [r7, #8]
 8005d54:	415b      	adcs	r3, r3
 8005d56:	60fb      	str	r3, [r7, #12]
 8005d58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d5c:	4641      	mov	r1, r8
 8005d5e:	1851      	adds	r1, r2, r1
 8005d60:	6039      	str	r1, [r7, #0]
 8005d62:	4649      	mov	r1, r9
 8005d64:	414b      	adcs	r3, r1
 8005d66:	607b      	str	r3, [r7, #4]
 8005d68:	f04f 0200 	mov.w	r2, #0
 8005d6c:	f04f 0300 	mov.w	r3, #0
 8005d70:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005d74:	4659      	mov	r1, fp
 8005d76:	00cb      	lsls	r3, r1, #3
 8005d78:	4651      	mov	r1, sl
 8005d7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d7e:	4651      	mov	r1, sl
 8005d80:	00ca      	lsls	r2, r1, #3
 8005d82:	4610      	mov	r0, r2
 8005d84:	4619      	mov	r1, r3
 8005d86:	4603      	mov	r3, r0
 8005d88:	4642      	mov	r2, r8
 8005d8a:	189b      	adds	r3, r3, r2
 8005d8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d8e:	464b      	mov	r3, r9
 8005d90:	460a      	mov	r2, r1
 8005d92:	eb42 0303 	adc.w	r3, r2, r3
 8005d96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	663b      	str	r3, [r7, #96]	; 0x60
 8005da2:	667a      	str	r2, [r7, #100]	; 0x64
 8005da4:	f04f 0200 	mov.w	r2, #0
 8005da8:	f04f 0300 	mov.w	r3, #0
 8005dac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005db0:	4649      	mov	r1, r9
 8005db2:	008b      	lsls	r3, r1, #2
 8005db4:	4641      	mov	r1, r8
 8005db6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005dba:	4641      	mov	r1, r8
 8005dbc:	008a      	lsls	r2, r1, #2
 8005dbe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005dc2:	f7fa fe8b 	bl	8000adc <__aeabi_uldivmod>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	460b      	mov	r3, r1
 8005dca:	4b0d      	ldr	r3, [pc, #52]	; (8005e00 <UART_SetConfig+0x4e4>)
 8005dcc:	fba3 1302 	umull	r1, r3, r3, r2
 8005dd0:	095b      	lsrs	r3, r3, #5
 8005dd2:	2164      	movs	r1, #100	; 0x64
 8005dd4:	fb01 f303 	mul.w	r3, r1, r3
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	011b      	lsls	r3, r3, #4
 8005ddc:	3332      	adds	r3, #50	; 0x32
 8005dde:	4a08      	ldr	r2, [pc, #32]	; (8005e00 <UART_SetConfig+0x4e4>)
 8005de0:	fba2 2303 	umull	r2, r3, r2, r3
 8005de4:	095b      	lsrs	r3, r3, #5
 8005de6:	f003 020f 	and.w	r2, r3, #15
 8005dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4422      	add	r2, r4
 8005df2:	609a      	str	r2, [r3, #8]
}
 8005df4:	bf00      	nop
 8005df6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e00:	51eb851f 	.word	0x51eb851f

08005e04 <_vsniprintf_r>:
 8005e04:	b530      	push	{r4, r5, lr}
 8005e06:	4614      	mov	r4, r2
 8005e08:	2c00      	cmp	r4, #0
 8005e0a:	b09b      	sub	sp, #108	; 0x6c
 8005e0c:	4605      	mov	r5, r0
 8005e0e:	461a      	mov	r2, r3
 8005e10:	da05      	bge.n	8005e1e <_vsniprintf_r+0x1a>
 8005e12:	238b      	movs	r3, #139	; 0x8b
 8005e14:	6003      	str	r3, [r0, #0]
 8005e16:	f04f 30ff 	mov.w	r0, #4294967295
 8005e1a:	b01b      	add	sp, #108	; 0x6c
 8005e1c:	bd30      	pop	{r4, r5, pc}
 8005e1e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005e22:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005e26:	bf14      	ite	ne
 8005e28:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005e2c:	4623      	moveq	r3, r4
 8005e2e:	9302      	str	r3, [sp, #8]
 8005e30:	9305      	str	r3, [sp, #20]
 8005e32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005e36:	9100      	str	r1, [sp, #0]
 8005e38:	9104      	str	r1, [sp, #16]
 8005e3a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005e3e:	4669      	mov	r1, sp
 8005e40:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005e42:	f000 f99f 	bl	8006184 <_svfiprintf_r>
 8005e46:	1c43      	adds	r3, r0, #1
 8005e48:	bfbc      	itt	lt
 8005e4a:	238b      	movlt	r3, #139	; 0x8b
 8005e4c:	602b      	strlt	r3, [r5, #0]
 8005e4e:	2c00      	cmp	r4, #0
 8005e50:	d0e3      	beq.n	8005e1a <_vsniprintf_r+0x16>
 8005e52:	9b00      	ldr	r3, [sp, #0]
 8005e54:	2200      	movs	r2, #0
 8005e56:	701a      	strb	r2, [r3, #0]
 8005e58:	e7df      	b.n	8005e1a <_vsniprintf_r+0x16>
	...

08005e5c <vsniprintf>:
 8005e5c:	b507      	push	{r0, r1, r2, lr}
 8005e5e:	9300      	str	r3, [sp, #0]
 8005e60:	4613      	mov	r3, r2
 8005e62:	460a      	mov	r2, r1
 8005e64:	4601      	mov	r1, r0
 8005e66:	4803      	ldr	r0, [pc, #12]	; (8005e74 <vsniprintf+0x18>)
 8005e68:	6800      	ldr	r0, [r0, #0]
 8005e6a:	f7ff ffcb 	bl	8005e04 <_vsniprintf_r>
 8005e6e:	b003      	add	sp, #12
 8005e70:	f85d fb04 	ldr.w	pc, [sp], #4
 8005e74:	20000068 	.word	0x20000068

08005e78 <memset>:
 8005e78:	4402      	add	r2, r0
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d100      	bne.n	8005e82 <memset+0xa>
 8005e80:	4770      	bx	lr
 8005e82:	f803 1b01 	strb.w	r1, [r3], #1
 8005e86:	e7f9      	b.n	8005e7c <memset+0x4>

08005e88 <__errno>:
 8005e88:	4b01      	ldr	r3, [pc, #4]	; (8005e90 <__errno+0x8>)
 8005e8a:	6818      	ldr	r0, [r3, #0]
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop
 8005e90:	20000068 	.word	0x20000068

08005e94 <__libc_init_array>:
 8005e94:	b570      	push	{r4, r5, r6, lr}
 8005e96:	4d0d      	ldr	r5, [pc, #52]	; (8005ecc <__libc_init_array+0x38>)
 8005e98:	4c0d      	ldr	r4, [pc, #52]	; (8005ed0 <__libc_init_array+0x3c>)
 8005e9a:	1b64      	subs	r4, r4, r5
 8005e9c:	10a4      	asrs	r4, r4, #2
 8005e9e:	2600      	movs	r6, #0
 8005ea0:	42a6      	cmp	r6, r4
 8005ea2:	d109      	bne.n	8005eb8 <__libc_init_array+0x24>
 8005ea4:	4d0b      	ldr	r5, [pc, #44]	; (8005ed4 <__libc_init_array+0x40>)
 8005ea6:	4c0c      	ldr	r4, [pc, #48]	; (8005ed8 <__libc_init_array+0x44>)
 8005ea8:	f000 fc6a 	bl	8006780 <_init>
 8005eac:	1b64      	subs	r4, r4, r5
 8005eae:	10a4      	asrs	r4, r4, #2
 8005eb0:	2600      	movs	r6, #0
 8005eb2:	42a6      	cmp	r6, r4
 8005eb4:	d105      	bne.n	8005ec2 <__libc_init_array+0x2e>
 8005eb6:	bd70      	pop	{r4, r5, r6, pc}
 8005eb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ebc:	4798      	blx	r3
 8005ebe:	3601      	adds	r6, #1
 8005ec0:	e7ee      	b.n	8005ea0 <__libc_init_array+0xc>
 8005ec2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ec6:	4798      	blx	r3
 8005ec8:	3601      	adds	r6, #1
 8005eca:	e7f2      	b.n	8005eb2 <__libc_init_array+0x1e>
 8005ecc:	08006854 	.word	0x08006854
 8005ed0:	08006854 	.word	0x08006854
 8005ed4:	08006854 	.word	0x08006854
 8005ed8:	08006858 	.word	0x08006858

08005edc <__retarget_lock_acquire_recursive>:
 8005edc:	4770      	bx	lr

08005ede <__retarget_lock_release_recursive>:
 8005ede:	4770      	bx	lr

08005ee0 <_free_r>:
 8005ee0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005ee2:	2900      	cmp	r1, #0
 8005ee4:	d044      	beq.n	8005f70 <_free_r+0x90>
 8005ee6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005eea:	9001      	str	r0, [sp, #4]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f1a1 0404 	sub.w	r4, r1, #4
 8005ef2:	bfb8      	it	lt
 8005ef4:	18e4      	addlt	r4, r4, r3
 8005ef6:	f000 f8df 	bl	80060b8 <__malloc_lock>
 8005efa:	4a1e      	ldr	r2, [pc, #120]	; (8005f74 <_free_r+0x94>)
 8005efc:	9801      	ldr	r0, [sp, #4]
 8005efe:	6813      	ldr	r3, [r2, #0]
 8005f00:	b933      	cbnz	r3, 8005f10 <_free_r+0x30>
 8005f02:	6063      	str	r3, [r4, #4]
 8005f04:	6014      	str	r4, [r2, #0]
 8005f06:	b003      	add	sp, #12
 8005f08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f0c:	f000 b8da 	b.w	80060c4 <__malloc_unlock>
 8005f10:	42a3      	cmp	r3, r4
 8005f12:	d908      	bls.n	8005f26 <_free_r+0x46>
 8005f14:	6825      	ldr	r5, [r4, #0]
 8005f16:	1961      	adds	r1, r4, r5
 8005f18:	428b      	cmp	r3, r1
 8005f1a:	bf01      	itttt	eq
 8005f1c:	6819      	ldreq	r1, [r3, #0]
 8005f1e:	685b      	ldreq	r3, [r3, #4]
 8005f20:	1949      	addeq	r1, r1, r5
 8005f22:	6021      	streq	r1, [r4, #0]
 8005f24:	e7ed      	b.n	8005f02 <_free_r+0x22>
 8005f26:	461a      	mov	r2, r3
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	b10b      	cbz	r3, 8005f30 <_free_r+0x50>
 8005f2c:	42a3      	cmp	r3, r4
 8005f2e:	d9fa      	bls.n	8005f26 <_free_r+0x46>
 8005f30:	6811      	ldr	r1, [r2, #0]
 8005f32:	1855      	adds	r5, r2, r1
 8005f34:	42a5      	cmp	r5, r4
 8005f36:	d10b      	bne.n	8005f50 <_free_r+0x70>
 8005f38:	6824      	ldr	r4, [r4, #0]
 8005f3a:	4421      	add	r1, r4
 8005f3c:	1854      	adds	r4, r2, r1
 8005f3e:	42a3      	cmp	r3, r4
 8005f40:	6011      	str	r1, [r2, #0]
 8005f42:	d1e0      	bne.n	8005f06 <_free_r+0x26>
 8005f44:	681c      	ldr	r4, [r3, #0]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	6053      	str	r3, [r2, #4]
 8005f4a:	440c      	add	r4, r1
 8005f4c:	6014      	str	r4, [r2, #0]
 8005f4e:	e7da      	b.n	8005f06 <_free_r+0x26>
 8005f50:	d902      	bls.n	8005f58 <_free_r+0x78>
 8005f52:	230c      	movs	r3, #12
 8005f54:	6003      	str	r3, [r0, #0]
 8005f56:	e7d6      	b.n	8005f06 <_free_r+0x26>
 8005f58:	6825      	ldr	r5, [r4, #0]
 8005f5a:	1961      	adds	r1, r4, r5
 8005f5c:	428b      	cmp	r3, r1
 8005f5e:	bf04      	itt	eq
 8005f60:	6819      	ldreq	r1, [r3, #0]
 8005f62:	685b      	ldreq	r3, [r3, #4]
 8005f64:	6063      	str	r3, [r4, #4]
 8005f66:	bf04      	itt	eq
 8005f68:	1949      	addeq	r1, r1, r5
 8005f6a:	6021      	streq	r1, [r4, #0]
 8005f6c:	6054      	str	r4, [r2, #4]
 8005f6e:	e7ca      	b.n	8005f06 <_free_r+0x26>
 8005f70:	b003      	add	sp, #12
 8005f72:	bd30      	pop	{r4, r5, pc}
 8005f74:	20001cd4 	.word	0x20001cd4

08005f78 <sbrk_aligned>:
 8005f78:	b570      	push	{r4, r5, r6, lr}
 8005f7a:	4e0e      	ldr	r6, [pc, #56]	; (8005fb4 <sbrk_aligned+0x3c>)
 8005f7c:	460c      	mov	r4, r1
 8005f7e:	6831      	ldr	r1, [r6, #0]
 8005f80:	4605      	mov	r5, r0
 8005f82:	b911      	cbnz	r1, 8005f8a <sbrk_aligned+0x12>
 8005f84:	f000 fba6 	bl	80066d4 <_sbrk_r>
 8005f88:	6030      	str	r0, [r6, #0]
 8005f8a:	4621      	mov	r1, r4
 8005f8c:	4628      	mov	r0, r5
 8005f8e:	f000 fba1 	bl	80066d4 <_sbrk_r>
 8005f92:	1c43      	adds	r3, r0, #1
 8005f94:	d00a      	beq.n	8005fac <sbrk_aligned+0x34>
 8005f96:	1cc4      	adds	r4, r0, #3
 8005f98:	f024 0403 	bic.w	r4, r4, #3
 8005f9c:	42a0      	cmp	r0, r4
 8005f9e:	d007      	beq.n	8005fb0 <sbrk_aligned+0x38>
 8005fa0:	1a21      	subs	r1, r4, r0
 8005fa2:	4628      	mov	r0, r5
 8005fa4:	f000 fb96 	bl	80066d4 <_sbrk_r>
 8005fa8:	3001      	adds	r0, #1
 8005faa:	d101      	bne.n	8005fb0 <sbrk_aligned+0x38>
 8005fac:	f04f 34ff 	mov.w	r4, #4294967295
 8005fb0:	4620      	mov	r0, r4
 8005fb2:	bd70      	pop	{r4, r5, r6, pc}
 8005fb4:	20001cd8 	.word	0x20001cd8

08005fb8 <_malloc_r>:
 8005fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fbc:	1ccd      	adds	r5, r1, #3
 8005fbe:	f025 0503 	bic.w	r5, r5, #3
 8005fc2:	3508      	adds	r5, #8
 8005fc4:	2d0c      	cmp	r5, #12
 8005fc6:	bf38      	it	cc
 8005fc8:	250c      	movcc	r5, #12
 8005fca:	2d00      	cmp	r5, #0
 8005fcc:	4607      	mov	r7, r0
 8005fce:	db01      	blt.n	8005fd4 <_malloc_r+0x1c>
 8005fd0:	42a9      	cmp	r1, r5
 8005fd2:	d905      	bls.n	8005fe0 <_malloc_r+0x28>
 8005fd4:	230c      	movs	r3, #12
 8005fd6:	603b      	str	r3, [r7, #0]
 8005fd8:	2600      	movs	r6, #0
 8005fda:	4630      	mov	r0, r6
 8005fdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fe0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80060b4 <_malloc_r+0xfc>
 8005fe4:	f000 f868 	bl	80060b8 <__malloc_lock>
 8005fe8:	f8d8 3000 	ldr.w	r3, [r8]
 8005fec:	461c      	mov	r4, r3
 8005fee:	bb5c      	cbnz	r4, 8006048 <_malloc_r+0x90>
 8005ff0:	4629      	mov	r1, r5
 8005ff2:	4638      	mov	r0, r7
 8005ff4:	f7ff ffc0 	bl	8005f78 <sbrk_aligned>
 8005ff8:	1c43      	adds	r3, r0, #1
 8005ffa:	4604      	mov	r4, r0
 8005ffc:	d155      	bne.n	80060aa <_malloc_r+0xf2>
 8005ffe:	f8d8 4000 	ldr.w	r4, [r8]
 8006002:	4626      	mov	r6, r4
 8006004:	2e00      	cmp	r6, #0
 8006006:	d145      	bne.n	8006094 <_malloc_r+0xdc>
 8006008:	2c00      	cmp	r4, #0
 800600a:	d048      	beq.n	800609e <_malloc_r+0xe6>
 800600c:	6823      	ldr	r3, [r4, #0]
 800600e:	4631      	mov	r1, r6
 8006010:	4638      	mov	r0, r7
 8006012:	eb04 0903 	add.w	r9, r4, r3
 8006016:	f000 fb5d 	bl	80066d4 <_sbrk_r>
 800601a:	4581      	cmp	r9, r0
 800601c:	d13f      	bne.n	800609e <_malloc_r+0xe6>
 800601e:	6821      	ldr	r1, [r4, #0]
 8006020:	1a6d      	subs	r5, r5, r1
 8006022:	4629      	mov	r1, r5
 8006024:	4638      	mov	r0, r7
 8006026:	f7ff ffa7 	bl	8005f78 <sbrk_aligned>
 800602a:	3001      	adds	r0, #1
 800602c:	d037      	beq.n	800609e <_malloc_r+0xe6>
 800602e:	6823      	ldr	r3, [r4, #0]
 8006030:	442b      	add	r3, r5
 8006032:	6023      	str	r3, [r4, #0]
 8006034:	f8d8 3000 	ldr.w	r3, [r8]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d038      	beq.n	80060ae <_malloc_r+0xf6>
 800603c:	685a      	ldr	r2, [r3, #4]
 800603e:	42a2      	cmp	r2, r4
 8006040:	d12b      	bne.n	800609a <_malloc_r+0xe2>
 8006042:	2200      	movs	r2, #0
 8006044:	605a      	str	r2, [r3, #4]
 8006046:	e00f      	b.n	8006068 <_malloc_r+0xb0>
 8006048:	6822      	ldr	r2, [r4, #0]
 800604a:	1b52      	subs	r2, r2, r5
 800604c:	d41f      	bmi.n	800608e <_malloc_r+0xd6>
 800604e:	2a0b      	cmp	r2, #11
 8006050:	d917      	bls.n	8006082 <_malloc_r+0xca>
 8006052:	1961      	adds	r1, r4, r5
 8006054:	42a3      	cmp	r3, r4
 8006056:	6025      	str	r5, [r4, #0]
 8006058:	bf18      	it	ne
 800605a:	6059      	strne	r1, [r3, #4]
 800605c:	6863      	ldr	r3, [r4, #4]
 800605e:	bf08      	it	eq
 8006060:	f8c8 1000 	streq.w	r1, [r8]
 8006064:	5162      	str	r2, [r4, r5]
 8006066:	604b      	str	r3, [r1, #4]
 8006068:	4638      	mov	r0, r7
 800606a:	f104 060b 	add.w	r6, r4, #11
 800606e:	f000 f829 	bl	80060c4 <__malloc_unlock>
 8006072:	f026 0607 	bic.w	r6, r6, #7
 8006076:	1d23      	adds	r3, r4, #4
 8006078:	1af2      	subs	r2, r6, r3
 800607a:	d0ae      	beq.n	8005fda <_malloc_r+0x22>
 800607c:	1b9b      	subs	r3, r3, r6
 800607e:	50a3      	str	r3, [r4, r2]
 8006080:	e7ab      	b.n	8005fda <_malloc_r+0x22>
 8006082:	42a3      	cmp	r3, r4
 8006084:	6862      	ldr	r2, [r4, #4]
 8006086:	d1dd      	bne.n	8006044 <_malloc_r+0x8c>
 8006088:	f8c8 2000 	str.w	r2, [r8]
 800608c:	e7ec      	b.n	8006068 <_malloc_r+0xb0>
 800608e:	4623      	mov	r3, r4
 8006090:	6864      	ldr	r4, [r4, #4]
 8006092:	e7ac      	b.n	8005fee <_malloc_r+0x36>
 8006094:	4634      	mov	r4, r6
 8006096:	6876      	ldr	r6, [r6, #4]
 8006098:	e7b4      	b.n	8006004 <_malloc_r+0x4c>
 800609a:	4613      	mov	r3, r2
 800609c:	e7cc      	b.n	8006038 <_malloc_r+0x80>
 800609e:	230c      	movs	r3, #12
 80060a0:	603b      	str	r3, [r7, #0]
 80060a2:	4638      	mov	r0, r7
 80060a4:	f000 f80e 	bl	80060c4 <__malloc_unlock>
 80060a8:	e797      	b.n	8005fda <_malloc_r+0x22>
 80060aa:	6025      	str	r5, [r4, #0]
 80060ac:	e7dc      	b.n	8006068 <_malloc_r+0xb0>
 80060ae:	605b      	str	r3, [r3, #4]
 80060b0:	deff      	udf	#255	; 0xff
 80060b2:	bf00      	nop
 80060b4:	20001cd4 	.word	0x20001cd4

080060b8 <__malloc_lock>:
 80060b8:	4801      	ldr	r0, [pc, #4]	; (80060c0 <__malloc_lock+0x8>)
 80060ba:	f7ff bf0f 	b.w	8005edc <__retarget_lock_acquire_recursive>
 80060be:	bf00      	nop
 80060c0:	20001cd0 	.word	0x20001cd0

080060c4 <__malloc_unlock>:
 80060c4:	4801      	ldr	r0, [pc, #4]	; (80060cc <__malloc_unlock+0x8>)
 80060c6:	f7ff bf0a 	b.w	8005ede <__retarget_lock_release_recursive>
 80060ca:	bf00      	nop
 80060cc:	20001cd0 	.word	0x20001cd0

080060d0 <__ssputs_r>:
 80060d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060d4:	688e      	ldr	r6, [r1, #8]
 80060d6:	461f      	mov	r7, r3
 80060d8:	42be      	cmp	r6, r7
 80060da:	680b      	ldr	r3, [r1, #0]
 80060dc:	4682      	mov	sl, r0
 80060de:	460c      	mov	r4, r1
 80060e0:	4690      	mov	r8, r2
 80060e2:	d82c      	bhi.n	800613e <__ssputs_r+0x6e>
 80060e4:	898a      	ldrh	r2, [r1, #12]
 80060e6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80060ea:	d026      	beq.n	800613a <__ssputs_r+0x6a>
 80060ec:	6965      	ldr	r5, [r4, #20]
 80060ee:	6909      	ldr	r1, [r1, #16]
 80060f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80060f4:	eba3 0901 	sub.w	r9, r3, r1
 80060f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80060fc:	1c7b      	adds	r3, r7, #1
 80060fe:	444b      	add	r3, r9
 8006100:	106d      	asrs	r5, r5, #1
 8006102:	429d      	cmp	r5, r3
 8006104:	bf38      	it	cc
 8006106:	461d      	movcc	r5, r3
 8006108:	0553      	lsls	r3, r2, #21
 800610a:	d527      	bpl.n	800615c <__ssputs_r+0x8c>
 800610c:	4629      	mov	r1, r5
 800610e:	f7ff ff53 	bl	8005fb8 <_malloc_r>
 8006112:	4606      	mov	r6, r0
 8006114:	b360      	cbz	r0, 8006170 <__ssputs_r+0xa0>
 8006116:	6921      	ldr	r1, [r4, #16]
 8006118:	464a      	mov	r2, r9
 800611a:	f000 faeb 	bl	80066f4 <memcpy>
 800611e:	89a3      	ldrh	r3, [r4, #12]
 8006120:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006128:	81a3      	strh	r3, [r4, #12]
 800612a:	6126      	str	r6, [r4, #16]
 800612c:	6165      	str	r5, [r4, #20]
 800612e:	444e      	add	r6, r9
 8006130:	eba5 0509 	sub.w	r5, r5, r9
 8006134:	6026      	str	r6, [r4, #0]
 8006136:	60a5      	str	r5, [r4, #8]
 8006138:	463e      	mov	r6, r7
 800613a:	42be      	cmp	r6, r7
 800613c:	d900      	bls.n	8006140 <__ssputs_r+0x70>
 800613e:	463e      	mov	r6, r7
 8006140:	6820      	ldr	r0, [r4, #0]
 8006142:	4632      	mov	r2, r6
 8006144:	4641      	mov	r1, r8
 8006146:	f000 faab 	bl	80066a0 <memmove>
 800614a:	68a3      	ldr	r3, [r4, #8]
 800614c:	1b9b      	subs	r3, r3, r6
 800614e:	60a3      	str	r3, [r4, #8]
 8006150:	6823      	ldr	r3, [r4, #0]
 8006152:	4433      	add	r3, r6
 8006154:	6023      	str	r3, [r4, #0]
 8006156:	2000      	movs	r0, #0
 8006158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800615c:	462a      	mov	r2, r5
 800615e:	f000 fad7 	bl	8006710 <_realloc_r>
 8006162:	4606      	mov	r6, r0
 8006164:	2800      	cmp	r0, #0
 8006166:	d1e0      	bne.n	800612a <__ssputs_r+0x5a>
 8006168:	6921      	ldr	r1, [r4, #16]
 800616a:	4650      	mov	r0, sl
 800616c:	f7ff feb8 	bl	8005ee0 <_free_r>
 8006170:	230c      	movs	r3, #12
 8006172:	f8ca 3000 	str.w	r3, [sl]
 8006176:	89a3      	ldrh	r3, [r4, #12]
 8006178:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800617c:	81a3      	strh	r3, [r4, #12]
 800617e:	f04f 30ff 	mov.w	r0, #4294967295
 8006182:	e7e9      	b.n	8006158 <__ssputs_r+0x88>

08006184 <_svfiprintf_r>:
 8006184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006188:	4698      	mov	r8, r3
 800618a:	898b      	ldrh	r3, [r1, #12]
 800618c:	061b      	lsls	r3, r3, #24
 800618e:	b09d      	sub	sp, #116	; 0x74
 8006190:	4607      	mov	r7, r0
 8006192:	460d      	mov	r5, r1
 8006194:	4614      	mov	r4, r2
 8006196:	d50e      	bpl.n	80061b6 <_svfiprintf_r+0x32>
 8006198:	690b      	ldr	r3, [r1, #16]
 800619a:	b963      	cbnz	r3, 80061b6 <_svfiprintf_r+0x32>
 800619c:	2140      	movs	r1, #64	; 0x40
 800619e:	f7ff ff0b 	bl	8005fb8 <_malloc_r>
 80061a2:	6028      	str	r0, [r5, #0]
 80061a4:	6128      	str	r0, [r5, #16]
 80061a6:	b920      	cbnz	r0, 80061b2 <_svfiprintf_r+0x2e>
 80061a8:	230c      	movs	r3, #12
 80061aa:	603b      	str	r3, [r7, #0]
 80061ac:	f04f 30ff 	mov.w	r0, #4294967295
 80061b0:	e0d0      	b.n	8006354 <_svfiprintf_r+0x1d0>
 80061b2:	2340      	movs	r3, #64	; 0x40
 80061b4:	616b      	str	r3, [r5, #20]
 80061b6:	2300      	movs	r3, #0
 80061b8:	9309      	str	r3, [sp, #36]	; 0x24
 80061ba:	2320      	movs	r3, #32
 80061bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80061c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80061c4:	2330      	movs	r3, #48	; 0x30
 80061c6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800636c <_svfiprintf_r+0x1e8>
 80061ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80061ce:	f04f 0901 	mov.w	r9, #1
 80061d2:	4623      	mov	r3, r4
 80061d4:	469a      	mov	sl, r3
 80061d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061da:	b10a      	cbz	r2, 80061e0 <_svfiprintf_r+0x5c>
 80061dc:	2a25      	cmp	r2, #37	; 0x25
 80061de:	d1f9      	bne.n	80061d4 <_svfiprintf_r+0x50>
 80061e0:	ebba 0b04 	subs.w	fp, sl, r4
 80061e4:	d00b      	beq.n	80061fe <_svfiprintf_r+0x7a>
 80061e6:	465b      	mov	r3, fp
 80061e8:	4622      	mov	r2, r4
 80061ea:	4629      	mov	r1, r5
 80061ec:	4638      	mov	r0, r7
 80061ee:	f7ff ff6f 	bl	80060d0 <__ssputs_r>
 80061f2:	3001      	adds	r0, #1
 80061f4:	f000 80a9 	beq.w	800634a <_svfiprintf_r+0x1c6>
 80061f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061fa:	445a      	add	r2, fp
 80061fc:	9209      	str	r2, [sp, #36]	; 0x24
 80061fe:	f89a 3000 	ldrb.w	r3, [sl]
 8006202:	2b00      	cmp	r3, #0
 8006204:	f000 80a1 	beq.w	800634a <_svfiprintf_r+0x1c6>
 8006208:	2300      	movs	r3, #0
 800620a:	f04f 32ff 	mov.w	r2, #4294967295
 800620e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006212:	f10a 0a01 	add.w	sl, sl, #1
 8006216:	9304      	str	r3, [sp, #16]
 8006218:	9307      	str	r3, [sp, #28]
 800621a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800621e:	931a      	str	r3, [sp, #104]	; 0x68
 8006220:	4654      	mov	r4, sl
 8006222:	2205      	movs	r2, #5
 8006224:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006228:	4850      	ldr	r0, [pc, #320]	; (800636c <_svfiprintf_r+0x1e8>)
 800622a:	f7f9 ffe9 	bl	8000200 <memchr>
 800622e:	9a04      	ldr	r2, [sp, #16]
 8006230:	b9d8      	cbnz	r0, 800626a <_svfiprintf_r+0xe6>
 8006232:	06d0      	lsls	r0, r2, #27
 8006234:	bf44      	itt	mi
 8006236:	2320      	movmi	r3, #32
 8006238:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800623c:	0711      	lsls	r1, r2, #28
 800623e:	bf44      	itt	mi
 8006240:	232b      	movmi	r3, #43	; 0x2b
 8006242:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006246:	f89a 3000 	ldrb.w	r3, [sl]
 800624a:	2b2a      	cmp	r3, #42	; 0x2a
 800624c:	d015      	beq.n	800627a <_svfiprintf_r+0xf6>
 800624e:	9a07      	ldr	r2, [sp, #28]
 8006250:	4654      	mov	r4, sl
 8006252:	2000      	movs	r0, #0
 8006254:	f04f 0c0a 	mov.w	ip, #10
 8006258:	4621      	mov	r1, r4
 800625a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800625e:	3b30      	subs	r3, #48	; 0x30
 8006260:	2b09      	cmp	r3, #9
 8006262:	d94d      	bls.n	8006300 <_svfiprintf_r+0x17c>
 8006264:	b1b0      	cbz	r0, 8006294 <_svfiprintf_r+0x110>
 8006266:	9207      	str	r2, [sp, #28]
 8006268:	e014      	b.n	8006294 <_svfiprintf_r+0x110>
 800626a:	eba0 0308 	sub.w	r3, r0, r8
 800626e:	fa09 f303 	lsl.w	r3, r9, r3
 8006272:	4313      	orrs	r3, r2
 8006274:	9304      	str	r3, [sp, #16]
 8006276:	46a2      	mov	sl, r4
 8006278:	e7d2      	b.n	8006220 <_svfiprintf_r+0x9c>
 800627a:	9b03      	ldr	r3, [sp, #12]
 800627c:	1d19      	adds	r1, r3, #4
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	9103      	str	r1, [sp, #12]
 8006282:	2b00      	cmp	r3, #0
 8006284:	bfbb      	ittet	lt
 8006286:	425b      	neglt	r3, r3
 8006288:	f042 0202 	orrlt.w	r2, r2, #2
 800628c:	9307      	strge	r3, [sp, #28]
 800628e:	9307      	strlt	r3, [sp, #28]
 8006290:	bfb8      	it	lt
 8006292:	9204      	strlt	r2, [sp, #16]
 8006294:	7823      	ldrb	r3, [r4, #0]
 8006296:	2b2e      	cmp	r3, #46	; 0x2e
 8006298:	d10c      	bne.n	80062b4 <_svfiprintf_r+0x130>
 800629a:	7863      	ldrb	r3, [r4, #1]
 800629c:	2b2a      	cmp	r3, #42	; 0x2a
 800629e:	d134      	bne.n	800630a <_svfiprintf_r+0x186>
 80062a0:	9b03      	ldr	r3, [sp, #12]
 80062a2:	1d1a      	adds	r2, r3, #4
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	9203      	str	r2, [sp, #12]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	bfb8      	it	lt
 80062ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80062b0:	3402      	adds	r4, #2
 80062b2:	9305      	str	r3, [sp, #20]
 80062b4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800637c <_svfiprintf_r+0x1f8>
 80062b8:	7821      	ldrb	r1, [r4, #0]
 80062ba:	2203      	movs	r2, #3
 80062bc:	4650      	mov	r0, sl
 80062be:	f7f9 ff9f 	bl	8000200 <memchr>
 80062c2:	b138      	cbz	r0, 80062d4 <_svfiprintf_r+0x150>
 80062c4:	9b04      	ldr	r3, [sp, #16]
 80062c6:	eba0 000a 	sub.w	r0, r0, sl
 80062ca:	2240      	movs	r2, #64	; 0x40
 80062cc:	4082      	lsls	r2, r0
 80062ce:	4313      	orrs	r3, r2
 80062d0:	3401      	adds	r4, #1
 80062d2:	9304      	str	r3, [sp, #16]
 80062d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062d8:	4825      	ldr	r0, [pc, #148]	; (8006370 <_svfiprintf_r+0x1ec>)
 80062da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80062de:	2206      	movs	r2, #6
 80062e0:	f7f9 ff8e 	bl	8000200 <memchr>
 80062e4:	2800      	cmp	r0, #0
 80062e6:	d038      	beq.n	800635a <_svfiprintf_r+0x1d6>
 80062e8:	4b22      	ldr	r3, [pc, #136]	; (8006374 <_svfiprintf_r+0x1f0>)
 80062ea:	bb1b      	cbnz	r3, 8006334 <_svfiprintf_r+0x1b0>
 80062ec:	9b03      	ldr	r3, [sp, #12]
 80062ee:	3307      	adds	r3, #7
 80062f0:	f023 0307 	bic.w	r3, r3, #7
 80062f4:	3308      	adds	r3, #8
 80062f6:	9303      	str	r3, [sp, #12]
 80062f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062fa:	4433      	add	r3, r6
 80062fc:	9309      	str	r3, [sp, #36]	; 0x24
 80062fe:	e768      	b.n	80061d2 <_svfiprintf_r+0x4e>
 8006300:	fb0c 3202 	mla	r2, ip, r2, r3
 8006304:	460c      	mov	r4, r1
 8006306:	2001      	movs	r0, #1
 8006308:	e7a6      	b.n	8006258 <_svfiprintf_r+0xd4>
 800630a:	2300      	movs	r3, #0
 800630c:	3401      	adds	r4, #1
 800630e:	9305      	str	r3, [sp, #20]
 8006310:	4619      	mov	r1, r3
 8006312:	f04f 0c0a 	mov.w	ip, #10
 8006316:	4620      	mov	r0, r4
 8006318:	f810 2b01 	ldrb.w	r2, [r0], #1
 800631c:	3a30      	subs	r2, #48	; 0x30
 800631e:	2a09      	cmp	r2, #9
 8006320:	d903      	bls.n	800632a <_svfiprintf_r+0x1a6>
 8006322:	2b00      	cmp	r3, #0
 8006324:	d0c6      	beq.n	80062b4 <_svfiprintf_r+0x130>
 8006326:	9105      	str	r1, [sp, #20]
 8006328:	e7c4      	b.n	80062b4 <_svfiprintf_r+0x130>
 800632a:	fb0c 2101 	mla	r1, ip, r1, r2
 800632e:	4604      	mov	r4, r0
 8006330:	2301      	movs	r3, #1
 8006332:	e7f0      	b.n	8006316 <_svfiprintf_r+0x192>
 8006334:	ab03      	add	r3, sp, #12
 8006336:	9300      	str	r3, [sp, #0]
 8006338:	462a      	mov	r2, r5
 800633a:	4b0f      	ldr	r3, [pc, #60]	; (8006378 <_svfiprintf_r+0x1f4>)
 800633c:	a904      	add	r1, sp, #16
 800633e:	4638      	mov	r0, r7
 8006340:	f3af 8000 	nop.w
 8006344:	1c42      	adds	r2, r0, #1
 8006346:	4606      	mov	r6, r0
 8006348:	d1d6      	bne.n	80062f8 <_svfiprintf_r+0x174>
 800634a:	89ab      	ldrh	r3, [r5, #12]
 800634c:	065b      	lsls	r3, r3, #25
 800634e:	f53f af2d 	bmi.w	80061ac <_svfiprintf_r+0x28>
 8006352:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006354:	b01d      	add	sp, #116	; 0x74
 8006356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800635a:	ab03      	add	r3, sp, #12
 800635c:	9300      	str	r3, [sp, #0]
 800635e:	462a      	mov	r2, r5
 8006360:	4b05      	ldr	r3, [pc, #20]	; (8006378 <_svfiprintf_r+0x1f4>)
 8006362:	a904      	add	r1, sp, #16
 8006364:	4638      	mov	r0, r7
 8006366:	f000 f879 	bl	800645c <_printf_i>
 800636a:	e7eb      	b.n	8006344 <_svfiprintf_r+0x1c0>
 800636c:	08006818 	.word	0x08006818
 8006370:	08006822 	.word	0x08006822
 8006374:	00000000 	.word	0x00000000
 8006378:	080060d1 	.word	0x080060d1
 800637c:	0800681e 	.word	0x0800681e

08006380 <_printf_common>:
 8006380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006384:	4616      	mov	r6, r2
 8006386:	4699      	mov	r9, r3
 8006388:	688a      	ldr	r2, [r1, #8]
 800638a:	690b      	ldr	r3, [r1, #16]
 800638c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006390:	4293      	cmp	r3, r2
 8006392:	bfb8      	it	lt
 8006394:	4613      	movlt	r3, r2
 8006396:	6033      	str	r3, [r6, #0]
 8006398:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800639c:	4607      	mov	r7, r0
 800639e:	460c      	mov	r4, r1
 80063a0:	b10a      	cbz	r2, 80063a6 <_printf_common+0x26>
 80063a2:	3301      	adds	r3, #1
 80063a4:	6033      	str	r3, [r6, #0]
 80063a6:	6823      	ldr	r3, [r4, #0]
 80063a8:	0699      	lsls	r1, r3, #26
 80063aa:	bf42      	ittt	mi
 80063ac:	6833      	ldrmi	r3, [r6, #0]
 80063ae:	3302      	addmi	r3, #2
 80063b0:	6033      	strmi	r3, [r6, #0]
 80063b2:	6825      	ldr	r5, [r4, #0]
 80063b4:	f015 0506 	ands.w	r5, r5, #6
 80063b8:	d106      	bne.n	80063c8 <_printf_common+0x48>
 80063ba:	f104 0a19 	add.w	sl, r4, #25
 80063be:	68e3      	ldr	r3, [r4, #12]
 80063c0:	6832      	ldr	r2, [r6, #0]
 80063c2:	1a9b      	subs	r3, r3, r2
 80063c4:	42ab      	cmp	r3, r5
 80063c6:	dc26      	bgt.n	8006416 <_printf_common+0x96>
 80063c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80063cc:	1e13      	subs	r3, r2, #0
 80063ce:	6822      	ldr	r2, [r4, #0]
 80063d0:	bf18      	it	ne
 80063d2:	2301      	movne	r3, #1
 80063d4:	0692      	lsls	r2, r2, #26
 80063d6:	d42b      	bmi.n	8006430 <_printf_common+0xb0>
 80063d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063dc:	4649      	mov	r1, r9
 80063de:	4638      	mov	r0, r7
 80063e0:	47c0      	blx	r8
 80063e2:	3001      	adds	r0, #1
 80063e4:	d01e      	beq.n	8006424 <_printf_common+0xa4>
 80063e6:	6823      	ldr	r3, [r4, #0]
 80063e8:	6922      	ldr	r2, [r4, #16]
 80063ea:	f003 0306 	and.w	r3, r3, #6
 80063ee:	2b04      	cmp	r3, #4
 80063f0:	bf02      	ittt	eq
 80063f2:	68e5      	ldreq	r5, [r4, #12]
 80063f4:	6833      	ldreq	r3, [r6, #0]
 80063f6:	1aed      	subeq	r5, r5, r3
 80063f8:	68a3      	ldr	r3, [r4, #8]
 80063fa:	bf0c      	ite	eq
 80063fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006400:	2500      	movne	r5, #0
 8006402:	4293      	cmp	r3, r2
 8006404:	bfc4      	itt	gt
 8006406:	1a9b      	subgt	r3, r3, r2
 8006408:	18ed      	addgt	r5, r5, r3
 800640a:	2600      	movs	r6, #0
 800640c:	341a      	adds	r4, #26
 800640e:	42b5      	cmp	r5, r6
 8006410:	d11a      	bne.n	8006448 <_printf_common+0xc8>
 8006412:	2000      	movs	r0, #0
 8006414:	e008      	b.n	8006428 <_printf_common+0xa8>
 8006416:	2301      	movs	r3, #1
 8006418:	4652      	mov	r2, sl
 800641a:	4649      	mov	r1, r9
 800641c:	4638      	mov	r0, r7
 800641e:	47c0      	blx	r8
 8006420:	3001      	adds	r0, #1
 8006422:	d103      	bne.n	800642c <_printf_common+0xac>
 8006424:	f04f 30ff 	mov.w	r0, #4294967295
 8006428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800642c:	3501      	adds	r5, #1
 800642e:	e7c6      	b.n	80063be <_printf_common+0x3e>
 8006430:	18e1      	adds	r1, r4, r3
 8006432:	1c5a      	adds	r2, r3, #1
 8006434:	2030      	movs	r0, #48	; 0x30
 8006436:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800643a:	4422      	add	r2, r4
 800643c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006440:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006444:	3302      	adds	r3, #2
 8006446:	e7c7      	b.n	80063d8 <_printf_common+0x58>
 8006448:	2301      	movs	r3, #1
 800644a:	4622      	mov	r2, r4
 800644c:	4649      	mov	r1, r9
 800644e:	4638      	mov	r0, r7
 8006450:	47c0      	blx	r8
 8006452:	3001      	adds	r0, #1
 8006454:	d0e6      	beq.n	8006424 <_printf_common+0xa4>
 8006456:	3601      	adds	r6, #1
 8006458:	e7d9      	b.n	800640e <_printf_common+0x8e>
	...

0800645c <_printf_i>:
 800645c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006460:	7e0f      	ldrb	r7, [r1, #24]
 8006462:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006464:	2f78      	cmp	r7, #120	; 0x78
 8006466:	4691      	mov	r9, r2
 8006468:	4680      	mov	r8, r0
 800646a:	460c      	mov	r4, r1
 800646c:	469a      	mov	sl, r3
 800646e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006472:	d807      	bhi.n	8006484 <_printf_i+0x28>
 8006474:	2f62      	cmp	r7, #98	; 0x62
 8006476:	d80a      	bhi.n	800648e <_printf_i+0x32>
 8006478:	2f00      	cmp	r7, #0
 800647a:	f000 80d4 	beq.w	8006626 <_printf_i+0x1ca>
 800647e:	2f58      	cmp	r7, #88	; 0x58
 8006480:	f000 80c0 	beq.w	8006604 <_printf_i+0x1a8>
 8006484:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006488:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800648c:	e03a      	b.n	8006504 <_printf_i+0xa8>
 800648e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006492:	2b15      	cmp	r3, #21
 8006494:	d8f6      	bhi.n	8006484 <_printf_i+0x28>
 8006496:	a101      	add	r1, pc, #4	; (adr r1, 800649c <_printf_i+0x40>)
 8006498:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800649c:	080064f5 	.word	0x080064f5
 80064a0:	08006509 	.word	0x08006509
 80064a4:	08006485 	.word	0x08006485
 80064a8:	08006485 	.word	0x08006485
 80064ac:	08006485 	.word	0x08006485
 80064b0:	08006485 	.word	0x08006485
 80064b4:	08006509 	.word	0x08006509
 80064b8:	08006485 	.word	0x08006485
 80064bc:	08006485 	.word	0x08006485
 80064c0:	08006485 	.word	0x08006485
 80064c4:	08006485 	.word	0x08006485
 80064c8:	0800660d 	.word	0x0800660d
 80064cc:	08006535 	.word	0x08006535
 80064d0:	080065c7 	.word	0x080065c7
 80064d4:	08006485 	.word	0x08006485
 80064d8:	08006485 	.word	0x08006485
 80064dc:	0800662f 	.word	0x0800662f
 80064e0:	08006485 	.word	0x08006485
 80064e4:	08006535 	.word	0x08006535
 80064e8:	08006485 	.word	0x08006485
 80064ec:	08006485 	.word	0x08006485
 80064f0:	080065cf 	.word	0x080065cf
 80064f4:	682b      	ldr	r3, [r5, #0]
 80064f6:	1d1a      	adds	r2, r3, #4
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	602a      	str	r2, [r5, #0]
 80064fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006500:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006504:	2301      	movs	r3, #1
 8006506:	e09f      	b.n	8006648 <_printf_i+0x1ec>
 8006508:	6820      	ldr	r0, [r4, #0]
 800650a:	682b      	ldr	r3, [r5, #0]
 800650c:	0607      	lsls	r7, r0, #24
 800650e:	f103 0104 	add.w	r1, r3, #4
 8006512:	6029      	str	r1, [r5, #0]
 8006514:	d501      	bpl.n	800651a <_printf_i+0xbe>
 8006516:	681e      	ldr	r6, [r3, #0]
 8006518:	e003      	b.n	8006522 <_printf_i+0xc6>
 800651a:	0646      	lsls	r6, r0, #25
 800651c:	d5fb      	bpl.n	8006516 <_printf_i+0xba>
 800651e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006522:	2e00      	cmp	r6, #0
 8006524:	da03      	bge.n	800652e <_printf_i+0xd2>
 8006526:	232d      	movs	r3, #45	; 0x2d
 8006528:	4276      	negs	r6, r6
 800652a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800652e:	485a      	ldr	r0, [pc, #360]	; (8006698 <_printf_i+0x23c>)
 8006530:	230a      	movs	r3, #10
 8006532:	e012      	b.n	800655a <_printf_i+0xfe>
 8006534:	682b      	ldr	r3, [r5, #0]
 8006536:	6820      	ldr	r0, [r4, #0]
 8006538:	1d19      	adds	r1, r3, #4
 800653a:	6029      	str	r1, [r5, #0]
 800653c:	0605      	lsls	r5, r0, #24
 800653e:	d501      	bpl.n	8006544 <_printf_i+0xe8>
 8006540:	681e      	ldr	r6, [r3, #0]
 8006542:	e002      	b.n	800654a <_printf_i+0xee>
 8006544:	0641      	lsls	r1, r0, #25
 8006546:	d5fb      	bpl.n	8006540 <_printf_i+0xe4>
 8006548:	881e      	ldrh	r6, [r3, #0]
 800654a:	4853      	ldr	r0, [pc, #332]	; (8006698 <_printf_i+0x23c>)
 800654c:	2f6f      	cmp	r7, #111	; 0x6f
 800654e:	bf0c      	ite	eq
 8006550:	2308      	moveq	r3, #8
 8006552:	230a      	movne	r3, #10
 8006554:	2100      	movs	r1, #0
 8006556:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800655a:	6865      	ldr	r5, [r4, #4]
 800655c:	60a5      	str	r5, [r4, #8]
 800655e:	2d00      	cmp	r5, #0
 8006560:	bfa2      	ittt	ge
 8006562:	6821      	ldrge	r1, [r4, #0]
 8006564:	f021 0104 	bicge.w	r1, r1, #4
 8006568:	6021      	strge	r1, [r4, #0]
 800656a:	b90e      	cbnz	r6, 8006570 <_printf_i+0x114>
 800656c:	2d00      	cmp	r5, #0
 800656e:	d04b      	beq.n	8006608 <_printf_i+0x1ac>
 8006570:	4615      	mov	r5, r2
 8006572:	fbb6 f1f3 	udiv	r1, r6, r3
 8006576:	fb03 6711 	mls	r7, r3, r1, r6
 800657a:	5dc7      	ldrb	r7, [r0, r7]
 800657c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006580:	4637      	mov	r7, r6
 8006582:	42bb      	cmp	r3, r7
 8006584:	460e      	mov	r6, r1
 8006586:	d9f4      	bls.n	8006572 <_printf_i+0x116>
 8006588:	2b08      	cmp	r3, #8
 800658a:	d10b      	bne.n	80065a4 <_printf_i+0x148>
 800658c:	6823      	ldr	r3, [r4, #0]
 800658e:	07de      	lsls	r6, r3, #31
 8006590:	d508      	bpl.n	80065a4 <_printf_i+0x148>
 8006592:	6923      	ldr	r3, [r4, #16]
 8006594:	6861      	ldr	r1, [r4, #4]
 8006596:	4299      	cmp	r1, r3
 8006598:	bfde      	ittt	le
 800659a:	2330      	movle	r3, #48	; 0x30
 800659c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80065a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80065a4:	1b52      	subs	r2, r2, r5
 80065a6:	6122      	str	r2, [r4, #16]
 80065a8:	f8cd a000 	str.w	sl, [sp]
 80065ac:	464b      	mov	r3, r9
 80065ae:	aa03      	add	r2, sp, #12
 80065b0:	4621      	mov	r1, r4
 80065b2:	4640      	mov	r0, r8
 80065b4:	f7ff fee4 	bl	8006380 <_printf_common>
 80065b8:	3001      	adds	r0, #1
 80065ba:	d14a      	bne.n	8006652 <_printf_i+0x1f6>
 80065bc:	f04f 30ff 	mov.w	r0, #4294967295
 80065c0:	b004      	add	sp, #16
 80065c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065c6:	6823      	ldr	r3, [r4, #0]
 80065c8:	f043 0320 	orr.w	r3, r3, #32
 80065cc:	6023      	str	r3, [r4, #0]
 80065ce:	4833      	ldr	r0, [pc, #204]	; (800669c <_printf_i+0x240>)
 80065d0:	2778      	movs	r7, #120	; 0x78
 80065d2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80065d6:	6823      	ldr	r3, [r4, #0]
 80065d8:	6829      	ldr	r1, [r5, #0]
 80065da:	061f      	lsls	r7, r3, #24
 80065dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80065e0:	d402      	bmi.n	80065e8 <_printf_i+0x18c>
 80065e2:	065f      	lsls	r7, r3, #25
 80065e4:	bf48      	it	mi
 80065e6:	b2b6      	uxthmi	r6, r6
 80065e8:	07df      	lsls	r7, r3, #31
 80065ea:	bf48      	it	mi
 80065ec:	f043 0320 	orrmi.w	r3, r3, #32
 80065f0:	6029      	str	r1, [r5, #0]
 80065f2:	bf48      	it	mi
 80065f4:	6023      	strmi	r3, [r4, #0]
 80065f6:	b91e      	cbnz	r6, 8006600 <_printf_i+0x1a4>
 80065f8:	6823      	ldr	r3, [r4, #0]
 80065fa:	f023 0320 	bic.w	r3, r3, #32
 80065fe:	6023      	str	r3, [r4, #0]
 8006600:	2310      	movs	r3, #16
 8006602:	e7a7      	b.n	8006554 <_printf_i+0xf8>
 8006604:	4824      	ldr	r0, [pc, #144]	; (8006698 <_printf_i+0x23c>)
 8006606:	e7e4      	b.n	80065d2 <_printf_i+0x176>
 8006608:	4615      	mov	r5, r2
 800660a:	e7bd      	b.n	8006588 <_printf_i+0x12c>
 800660c:	682b      	ldr	r3, [r5, #0]
 800660e:	6826      	ldr	r6, [r4, #0]
 8006610:	6961      	ldr	r1, [r4, #20]
 8006612:	1d18      	adds	r0, r3, #4
 8006614:	6028      	str	r0, [r5, #0]
 8006616:	0635      	lsls	r5, r6, #24
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	d501      	bpl.n	8006620 <_printf_i+0x1c4>
 800661c:	6019      	str	r1, [r3, #0]
 800661e:	e002      	b.n	8006626 <_printf_i+0x1ca>
 8006620:	0670      	lsls	r0, r6, #25
 8006622:	d5fb      	bpl.n	800661c <_printf_i+0x1c0>
 8006624:	8019      	strh	r1, [r3, #0]
 8006626:	2300      	movs	r3, #0
 8006628:	6123      	str	r3, [r4, #16]
 800662a:	4615      	mov	r5, r2
 800662c:	e7bc      	b.n	80065a8 <_printf_i+0x14c>
 800662e:	682b      	ldr	r3, [r5, #0]
 8006630:	1d1a      	adds	r2, r3, #4
 8006632:	602a      	str	r2, [r5, #0]
 8006634:	681d      	ldr	r5, [r3, #0]
 8006636:	6862      	ldr	r2, [r4, #4]
 8006638:	2100      	movs	r1, #0
 800663a:	4628      	mov	r0, r5
 800663c:	f7f9 fde0 	bl	8000200 <memchr>
 8006640:	b108      	cbz	r0, 8006646 <_printf_i+0x1ea>
 8006642:	1b40      	subs	r0, r0, r5
 8006644:	6060      	str	r0, [r4, #4]
 8006646:	6863      	ldr	r3, [r4, #4]
 8006648:	6123      	str	r3, [r4, #16]
 800664a:	2300      	movs	r3, #0
 800664c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006650:	e7aa      	b.n	80065a8 <_printf_i+0x14c>
 8006652:	6923      	ldr	r3, [r4, #16]
 8006654:	462a      	mov	r2, r5
 8006656:	4649      	mov	r1, r9
 8006658:	4640      	mov	r0, r8
 800665a:	47d0      	blx	sl
 800665c:	3001      	adds	r0, #1
 800665e:	d0ad      	beq.n	80065bc <_printf_i+0x160>
 8006660:	6823      	ldr	r3, [r4, #0]
 8006662:	079b      	lsls	r3, r3, #30
 8006664:	d413      	bmi.n	800668e <_printf_i+0x232>
 8006666:	68e0      	ldr	r0, [r4, #12]
 8006668:	9b03      	ldr	r3, [sp, #12]
 800666a:	4298      	cmp	r0, r3
 800666c:	bfb8      	it	lt
 800666e:	4618      	movlt	r0, r3
 8006670:	e7a6      	b.n	80065c0 <_printf_i+0x164>
 8006672:	2301      	movs	r3, #1
 8006674:	4632      	mov	r2, r6
 8006676:	4649      	mov	r1, r9
 8006678:	4640      	mov	r0, r8
 800667a:	47d0      	blx	sl
 800667c:	3001      	adds	r0, #1
 800667e:	d09d      	beq.n	80065bc <_printf_i+0x160>
 8006680:	3501      	adds	r5, #1
 8006682:	68e3      	ldr	r3, [r4, #12]
 8006684:	9903      	ldr	r1, [sp, #12]
 8006686:	1a5b      	subs	r3, r3, r1
 8006688:	42ab      	cmp	r3, r5
 800668a:	dcf2      	bgt.n	8006672 <_printf_i+0x216>
 800668c:	e7eb      	b.n	8006666 <_printf_i+0x20a>
 800668e:	2500      	movs	r5, #0
 8006690:	f104 0619 	add.w	r6, r4, #25
 8006694:	e7f5      	b.n	8006682 <_printf_i+0x226>
 8006696:	bf00      	nop
 8006698:	08006829 	.word	0x08006829
 800669c:	0800683a 	.word	0x0800683a

080066a0 <memmove>:
 80066a0:	4288      	cmp	r0, r1
 80066a2:	b510      	push	{r4, lr}
 80066a4:	eb01 0402 	add.w	r4, r1, r2
 80066a8:	d902      	bls.n	80066b0 <memmove+0x10>
 80066aa:	4284      	cmp	r4, r0
 80066ac:	4623      	mov	r3, r4
 80066ae:	d807      	bhi.n	80066c0 <memmove+0x20>
 80066b0:	1e43      	subs	r3, r0, #1
 80066b2:	42a1      	cmp	r1, r4
 80066b4:	d008      	beq.n	80066c8 <memmove+0x28>
 80066b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80066be:	e7f8      	b.n	80066b2 <memmove+0x12>
 80066c0:	4402      	add	r2, r0
 80066c2:	4601      	mov	r1, r0
 80066c4:	428a      	cmp	r2, r1
 80066c6:	d100      	bne.n	80066ca <memmove+0x2a>
 80066c8:	bd10      	pop	{r4, pc}
 80066ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80066ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80066d2:	e7f7      	b.n	80066c4 <memmove+0x24>

080066d4 <_sbrk_r>:
 80066d4:	b538      	push	{r3, r4, r5, lr}
 80066d6:	4d06      	ldr	r5, [pc, #24]	; (80066f0 <_sbrk_r+0x1c>)
 80066d8:	2300      	movs	r3, #0
 80066da:	4604      	mov	r4, r0
 80066dc:	4608      	mov	r0, r1
 80066de:	602b      	str	r3, [r5, #0]
 80066e0:	f7fb fcd0 	bl	8002084 <_sbrk>
 80066e4:	1c43      	adds	r3, r0, #1
 80066e6:	d102      	bne.n	80066ee <_sbrk_r+0x1a>
 80066e8:	682b      	ldr	r3, [r5, #0]
 80066ea:	b103      	cbz	r3, 80066ee <_sbrk_r+0x1a>
 80066ec:	6023      	str	r3, [r4, #0]
 80066ee:	bd38      	pop	{r3, r4, r5, pc}
 80066f0:	20001ccc 	.word	0x20001ccc

080066f4 <memcpy>:
 80066f4:	440a      	add	r2, r1
 80066f6:	4291      	cmp	r1, r2
 80066f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80066fc:	d100      	bne.n	8006700 <memcpy+0xc>
 80066fe:	4770      	bx	lr
 8006700:	b510      	push	{r4, lr}
 8006702:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006706:	f803 4f01 	strb.w	r4, [r3, #1]!
 800670a:	4291      	cmp	r1, r2
 800670c:	d1f9      	bne.n	8006702 <memcpy+0xe>
 800670e:	bd10      	pop	{r4, pc}

08006710 <_realloc_r>:
 8006710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006714:	4680      	mov	r8, r0
 8006716:	4614      	mov	r4, r2
 8006718:	460e      	mov	r6, r1
 800671a:	b921      	cbnz	r1, 8006726 <_realloc_r+0x16>
 800671c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006720:	4611      	mov	r1, r2
 8006722:	f7ff bc49 	b.w	8005fb8 <_malloc_r>
 8006726:	b92a      	cbnz	r2, 8006734 <_realloc_r+0x24>
 8006728:	f7ff fbda 	bl	8005ee0 <_free_r>
 800672c:	4625      	mov	r5, r4
 800672e:	4628      	mov	r0, r5
 8006730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006734:	f000 f81b 	bl	800676e <_malloc_usable_size_r>
 8006738:	4284      	cmp	r4, r0
 800673a:	4607      	mov	r7, r0
 800673c:	d802      	bhi.n	8006744 <_realloc_r+0x34>
 800673e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006742:	d812      	bhi.n	800676a <_realloc_r+0x5a>
 8006744:	4621      	mov	r1, r4
 8006746:	4640      	mov	r0, r8
 8006748:	f7ff fc36 	bl	8005fb8 <_malloc_r>
 800674c:	4605      	mov	r5, r0
 800674e:	2800      	cmp	r0, #0
 8006750:	d0ed      	beq.n	800672e <_realloc_r+0x1e>
 8006752:	42bc      	cmp	r4, r7
 8006754:	4622      	mov	r2, r4
 8006756:	4631      	mov	r1, r6
 8006758:	bf28      	it	cs
 800675a:	463a      	movcs	r2, r7
 800675c:	f7ff ffca 	bl	80066f4 <memcpy>
 8006760:	4631      	mov	r1, r6
 8006762:	4640      	mov	r0, r8
 8006764:	f7ff fbbc 	bl	8005ee0 <_free_r>
 8006768:	e7e1      	b.n	800672e <_realloc_r+0x1e>
 800676a:	4635      	mov	r5, r6
 800676c:	e7df      	b.n	800672e <_realloc_r+0x1e>

0800676e <_malloc_usable_size_r>:
 800676e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006772:	1f18      	subs	r0, r3, #4
 8006774:	2b00      	cmp	r3, #0
 8006776:	bfbc      	itt	lt
 8006778:	580b      	ldrlt	r3, [r1, r0]
 800677a:	18c0      	addlt	r0, r0, r3
 800677c:	4770      	bx	lr
	...

08006780 <_init>:
 8006780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006782:	bf00      	nop
 8006784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006786:	bc08      	pop	{r3}
 8006788:	469e      	mov	lr, r3
 800678a:	4770      	bx	lr

0800678c <_fini>:
 800678c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800678e:	bf00      	nop
 8006790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006792:	bc08      	pop	{r3}
 8006794:	469e      	mov	lr, r3
 8006796:	4770      	bx	lr
